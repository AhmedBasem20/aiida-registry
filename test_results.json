[
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.cp": {
          "description": [
            "`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\n"
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 304,
                "message": "The retrieved folder contains multiple XML files."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The required XML file could not be read."
              },
              {
                "status": 330,
                "message": "The required POS file could not be read."
              },
              {
                "status": 340,
                "message": "The required trajectory data could not be read."
              }
            ]
          }
        },
        "quantumespresso.create_kpoints_from_distance": {
          "description": [
            "Generate a uniformly spaced kpoint mesh for a given structure.",
            "",
            "    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.",
            "",
            "    :param structure: the StructureData to which the mesh should apply",
            "    :param distance: a Float with the desired distance between kpoints in reciprocal space",
            "    :param force_parity: a Bool to specify whether the generated mesh should maintain parity",
            "    :returns: a KpointsData with the generated mesh"
          ],
          "spec": {
            "inputs": [
              {
                "name": "distance",
                "required": true,
                "valid_types": "Data",
                "info": "a Float with the desired distance between kpoints in reciprocal space"
              },
              {
                "name": "force_parity",
                "required": true,
                "valid_types": "Data",
                "info": "a Bool to specify whether the generated mesh should maintain parity"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": "the StructureData to which the mesh should apply"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.dos": {
          "description": [
            "`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The dos file could not be read from the retrieved folder."
              }
            ]
          }
        },
        "quantumespresso.epw": {
          "description": [
            "`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine kpoint mesh"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse kpoint mesh"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder_nscf",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed nscf `PwCalculation`"
              },
              {
                "name": "parent_folder_ph",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PhCalculation`"
              },
              {
                "name": "qfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine qpoint mesh"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse qpoint mesh"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.matdyn": {
          "description": [
            "`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "Kpoints on which to calculate the phonon frequencies."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The output frequencies file could not be read from the retrieved folder."
              },
              {
                "status": 410,
                "message": "Number of kpoints not found in the output data"
              },
              {
                "status": 411,
                "message": "Number of kpoints in the inputs is not commensurate with those in the output"
              }
            ]
          }
        },
        "quantumespresso.merge_ph_outputs": {
          "description": [
            "Calcfunction to merge outputs from multiple `ph.x` calculations with different q-points."
          ],
          "spec": {
            "inputs": [
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.namelists": {
          "description": [
            "`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.neb": {
          "description": [
            "Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."
          ],
          "spec": {
            "inputs": [
              {
                "name": "first_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Initial structure"
              },
              {
                "name": "last_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Final structure"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "NEB-specific input parameters"
              },
              {
                "name": "pw",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              }
            ],
            "outputs": [
              {
                "name": "output_mep",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The original and interpolated energy profiles along the minimum-energy path ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters dictionary of the NEB calculation"
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "iteration_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.open_grid": {
          "description": [
            "``CalcJob`` implementation for the ``open_grid.x`` code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a completed `PwCalculation` on an irreducible Brilloui ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The explicit list of kpoints of the unfolded kmesh"
              },
              {
                "name": "kpoints_mesh",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The dimensions of the unfolded kmesh"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 312,
                "message": "Found rotation or fractional translation not compatible with FFT grid."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message."
              },
              {
                "status": 350,
                "message": "Mismatch between kmesh dimensions and number of kpoints."
              }
            ]
          }
        },
        "quantumespresso.ph": {
          "description": [
            "`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PwCalculation`"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "qpoint mesh"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The minimization cycle did not reach self-consistency."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              }
            ]
          }
        },
        "quantumespresso.pp": {
          "description": [
            "`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job is performed."
              }
            ],
            "outputs": [
              {
                "name": "output_data",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_data_multiple",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The parent folder did not contain the required XML output file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete."
              },
              {
                "status": 330,
                "message": "The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."
              },
              {
                "status": 331,
                "message": "The formatted data output file `{filename}` could not be read."
              },
              {
                "status": 332,
                "message": "The data file format is not supported by the parser"
              },
              {
                "status": 333,
                "message": "The formatted data output file `{filename}` could not be parsed"
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.projwfc": {
          "description": [
            "`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.",
            "",
            "    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch",
            "    wavefunctions onto atomic orbitals.",
            "",
            "    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "Dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_down",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_up",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "projections",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_down",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_up",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 330,
                "message": "The pdos_tot file could not be read from the retrieved folder."
              },
              {
                "status": 340,
                "message": "An exception was raised parsing bands and projections."
              }
            ]
          }
        },
        "quantumespresso.pw": {
          "description": [
            "`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 360,
                "message": "The code failed in finding a valid reciprocal lattice vector."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 464,
                "message": "The S matrix was found to be not positive definite."
              },
              {
                "status": 465,
                "message": "The `zhegvd` failed in the PPCG diagonalization."
              },
              {
                "status": 466,
                "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
              },
              {
                "status": 467,
                "message": "The eigenvector failed to converge."
              },
              {
                "status": 468,
                "message": "The factorization in the Broyden routine failed."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 503,
                "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 542,
                "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw2gw": {
          "description": [
            "`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "eps",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation.`"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "The eps*.dat output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The eps*.dat output files do not have the expected shape (N, 2)."
              },
              {
                "status": 331,
                "message": "The eps*.dat output files contains different values of energies."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.pw2wannier90": {
          "description": [
            "`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.",
            "",
            "    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "nnkp_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "A SinglefileData containing the .nnkp file generated by wannier90.x -pp"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message"
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.pwimmigrant": {
          "description": [
            "Create a PwCalculation object that can be used to import old jobs.",
            "",
            "    This is a sublass of aiida_quantumespresso.calculations.PwCalculation",
            "    with slight modifications to some of the class variables and additional",
            "    methods that",
            "",
            "        a. parse the job's input file to create the calculation's input",
            "           nodes that would exist if the calculation were submitted using AiiDa,",
            "        b. bypass the functions of the daemon, and prepare the node's attributes",
            "           such that all the processes (copying of the files to the repository,",
            "           results parsing, ect.) can be performed",
            "",
            "    .. note:: The keyword arguments of PwCalculation are also available.",
            "",
            "    :param remote_workdir: Absolute path to the directory where the job was run.",
            "        The transport of the computer you link ask input to the calculation is",
            "        the transport that will be used to retrieve the calculation's files.",
            "        Therefore, ``remote_workdir`` should be the absolute path to the job's",
            "        directory on that computer.",
            "    :type remote_workdir: str",
            "",
            "    :param input_file_name: The file name of the job's input file.",
            "    :type input_file_name: str",
            "",
            "    :param output_file_name: The file name of the job's output file (i.e. the",
            "        file containing the stdout of QE).",
            "    :type output_file_name: str"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 360,
                "message": "The code failed in finding a valid reciprocal lattice vector."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 464,
                "message": "The S matrix was found to be not positive definite."
              },
              {
                "status": 465,
                "message": "The `zhegvd` failed in the PPCG diagonalization."
              },
              {
                "status": 466,
                "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
              },
              {
                "status": 467,
                "message": "The eigenvector failed to converge."
              },
              {
                "status": 468,
                "message": "The factorization in the Broyden routine failed."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 503,
                "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 542,
                "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.q2r": {
          "description": [
            "`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The force constants file could not be read."
              }
            ]
          }
        },
        "quantumespresso.seekpath_structure_analysis": {
          "description": [
            "Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.",
            "",
            "    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the",
            "    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the",
            "    original structure in which case the k-points are only congruent with the primitive cell.",
            "",
            "    The keyword arguments can be used to specify various Seekpath parameters, such as:",
            "",
            "        with_time_reversal: True",
            "        reference_distance: 0.025",
            "        recipe: 'hpkot'",
            "        threshold: 1e-07",
            "        symprec: 1e-05",
            "        angle_tolerance: -1.0",
            "",
            "    Note that exact parameters that are available and their defaults will depend on your Seekpath version."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.xspectra": {
          "description": [
            "CalcJob implementation for the xspectra.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "core_wfc_data",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Core wavefunction data, generated by the upf2plotcore.sh utility"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The K-point sampling to be used for the XSpectra calculation"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "gamma_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "An optional file containing the data for the broadening function used when  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 313,
                "message": "xiabs was set incorrectly, check and ensure that the index value correctly refers to the atomic species containing the core-hole (where the index starts from 1)."
              },
              {
                "status": 314,
                "message": "xiabs was either set to 0 or less, or was greater than ntyp."
              },
              {
                "status": 330,
                "message": "The xspectra output file could not be read from the retrieved folder."
              },
              {
                "status": 331,
                "message": "The spectrum data file could not be read using NumPy genfromtxt"
              },
              {
                "status": 400,
                "message": "The time limit set for the calculation was exceeded, and the job wrote a save file before exiting."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "musconv": {
          "description": [
            "WorkChain for finding converged supercell for interstitial impurity calculation"
          ],
          "spec": {
            "inputs": [
              {
                "name": "pwscf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input initial structure"
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u00c5 between k-points in reciprocal space."
              },
              {
                "name": "max_iter_num",
                "required": false,
                "valid_types": "Int, NoneType",
                "info": "Maximum number of iteration in the supercell convergence loop"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "min_length",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum length of the smallest lattice vector for the first generated s ..."
              },
              {
                "name": "pseudofamily",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "The label of the pseudo family"
              }
            ],
            "outputs": [
              {
                "name": "Converged_SCmatrix",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "Converged_supercell",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 402,
                "message": "one of the PwCalculation subprocesses failed"
              },
              {
                "status": 702,
                "message": "Max number of supercell convergence reached "
              },
              {
                "status": 704,
                "message": "Error in fitting the forces to an exponential"
              }
            ]
          }
        },
        "quantumespresso.matdyn.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "matdyn",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pdos": {
          "description": [
            "A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."
          ],
          "spec": {
            "inputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax`  ..."
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` of the `nscf` calculation."
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Em ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "align_to_fermi",
                "required": false,
                "valid_types": "Bool",
                "info": "If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, work directories of all called calculation will be cleaned at  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` of the `scf` calculation."
              },
              {
                "name": "serial_clean",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "If ``True``, calculations will be run in serial, and work directories will  ..."
              }
            ],
            "outputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."
              },
              {
                "status": 401,
                "message": "the SCF sub process failed"
              },
              {
                "status": 402,
                "message": "the NSCF sub process failed"
              },
              {
                "status": 403,
                "message": "the DOS sub process failed"
              },
              {
                "status": 404,
                "message": "the PROJWFC sub process failed"
              },
              {
                "status": 404,
                "message": "both the DOS and PROJWFC sub process failed"
              }
            ]
          }
        },
        "quantumespresso.ph.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ph",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "only_initialization",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 401,
                "message": "The work chain failed to merge the q-points data from multiple `PhCalculation`s because not all q-points were parsed."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pw.bands": {
          "description": [
            "Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
            "",
            "    The logic for the computation of various parameters for the BANDS step is as follows:",
            "",
            "    Number of bands:",
            "        One can specify the number of bands to be used in the BANDS step either directly through the input parameters",
            "        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When",
            "        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being",
            "        used. If the `nbands_factor` is specified the maximum value of the following values will be used:",
            "",
            "        * `nbnd` of the preceding SCF calculation",
            "        * 0.5 * nelectrons * nbands_factor",
            "        * 0.5 * nelectrons + 4",
            "",
            "    Kpoints:",
            "        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the",
            "        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.",
            "        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry",
            "        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that",
            "        of `bands_kpoints_distance` or the SeekPath default if not specified."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the BANDS calculation."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "bands_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Explicit kpoints to use for the BANDS calculation. Specify either this or ` ..."
              },
              {
                "name": "bands_kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Minimum kpoints distance for the BANDS calculation. Specify either this or  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nbands_factor",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The number of bands for the BANDS calculation is that used for the SCF mult ..."
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation  ..."
              }
            ],
            "outputs": [
              {
                "name": "band_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the BANDS `PwBaseWorkChain`."
              },
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "BandsData",
                "info": "The computed band structure."
              },
              {
                "name": "scf_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "primitive_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The normalized and primitivized structure for which the bands are computed."
              },
              {
                "name": "seekpath_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."
              },
              {
                "status": 202,
                "message": "Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."
              },
              {
                "status": 401,
                "message": "The PwRelaxWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "The scf PwBasexWorkChain sub process failed"
              },
              {
                "status": 403,
                "message": "The bands PwBasexWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.pw.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "pw",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "An explicit k-points list or mesh. Either this or `kpoints_distance` has to ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 203,
                "message": "Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 210,
                "message": "Required key for `automatic_parallelization` was not specified.This exit status has been deprecated as the automatic parallellization feature was removed."
              },
              {
                "status": 211,
                "message": "Unrecognized keys were specified for `automatic_parallelization`.This exit status has been deprecated as the automatic parallellization feature was removed."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 310,
                "message": "The calculation failed with a known unrecoverable error."
              },
              {
                "status": 320,
                "message": "The initialization calculation failed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw.relax": {
          "description": [
            "Workchain to relax a structure using Quantum ESPRESSO pw.x."
          ],
          "spec": {
            "inputs": [
              {
                "name": "base",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the main relax loop."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "base_final_scf",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the final scf."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "max_meta_convergence_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of variable cell relax iterations in the meta convergenc ..."
              },
              {
                "name": "meta_convergence",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True` the workchain will perform a meta-convergence on the cell volume."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "volume_convergence",
                "required": false,
                "valid_types": "Float",
                "info": "The volume difference threshold between two consecutive meta convergence it ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The successfully relaxed structure."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "the relax PwBaseWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "the final scf PwBaseWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.q2r.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "q2r",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.xps": {
          "description": [
            "Workchain to compute X-ray photoelectron spectra (XPS) for a given structure.",
            "",
            "    The WorkChain itself firstly calls the PwRelaxWorkChain to relax the input structure if",
            "    required. Then determines the input settings for each XPS calculation automatically using",
            "    ``get_xspectra_structures()``. The input structures are generated from the standardized",
            "    structure by converting each to a supercell with cell dimensions of at least 8.0 angstrom",
            "    in each periodic dimension in order to sufficiently reduce the unphysical interaction",
            "    of the core-hole with neighbouring images. The size of the minimum size requirement can be",
            "    overriden by the user if required. Then the standard Delta-Self-Consistent-Field (\u0394SCF)",
            "    method is used to get the XPS binding energy. Finally, the XPS spectrum is calculated",
            "    using the Voigt profile."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ch_scf",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the basic xps workflow (core-hole SCF)."
              },
              {
                "name": "core_hole_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
              },
              {
                "name": "gipaw_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str",
                "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
              },
              {
                "name": "calc_binding_energy",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, run scf calculation for the supercell."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
              },
              {
                "name": "core_hole_treatments",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set core-hole treatment to all elements present. The ..."
              },
              {
                "name": "correction_energies",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set the correction energy to all elements present. "
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "elements_list",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "The list of elements to be considered for analysis, each must be valid elem ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
              },
              {
                "name": "spglib_settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
              },
              {
                "name": "structure_preparation_settings",
                "required": false,
                "valid_types": "Dict, Float, Int, Bool, Str",
                "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
              },
              {
                "name": "voight_gamma",
                "required": false,
                "valid_types": "Float",
                "info": "The gamma parameter for the Lorenzian broadening in the Voight method."
              },
              {
                "name": "voight_sigma",
                "required": false,
                "valid_types": "Float",
                "info": "The sigma parameter for the gaussian broadening in the Voight method."
              }
            ],
            "outputs": [
              {
                "name": "binding_energies",
                "required": true,
                "valid_types": "Dict",
                "info": "All the binding energy values for each element calculated by the WorkChain."
              },
              {
                "name": "chemical_shifts",
                "required": true,
                "valid_types": "Dict",
                "info": "All the chemical shift values for each element calculated by the WorkChain."
              },
              {
                "name": "final_spectra_be",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element based on binding energy."
              },
              {
                "name": "final_spectra_cls",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element based on chemical shift."
              },
              {
                "name": "output_parameters_ch_scf",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of each ``PwBaseWorkChain`` performed``."
              },
              {
                "name": "supercell_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
              },
              {
                "name": "symmetry_analysis_data",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters from ``get_xspectra_structures()``."
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure from the ``relax`` process."
              },
              {
                "name": "output_parameters_relax",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the relax step."
              },
              {
                "name": "output_parameters_scf",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the scf step."
              },
              {
                "name": "standardized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The standardized crystal structure used to generate structures for XPS sub- ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The Relax sub process failed"
              },
              {
                "status": 402,
                "message": "The SCF Pw sub processes failed"
              },
              {
                "status": 402,
                "message": "One or more CH_SCF Pw sub processes failed"
              }
            ]
          }
        },
        "quantumespresso.xspectra.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO xspectra.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "xspectra",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "An explicit k-points mesh. Either this or `kpoints_distance` has to be prov ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.xspectra.core": {
          "description": [
            "Workchain to compute X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
            "",
            "    The workflow follows the process required to compute the XAS of an input structure: an SCF calculation is performed",
            "    using the provided structure, which is then followed by the calculation of the XAS itself by XSpectra. The",
            "    calculations performed by the WorkChain in a typical run will be:",
            "",
            "    - PwSCF calculation with pw.x of the input structure with a core-hole present.",
            "    - Generation of core-wavefunction data with upf2plotcore.sh (if requested).",
            "    - XAS calculation with xspectra.x to compute the Lanczos coefficients and print the XANES spectra for the",
            "      polarisation vectors requested in the input.",
            "    - Collation of output data from pw.x and xspectra.x calculations, including a combination of XANES dipole spectra",
            "      based on polarisation vectors to represent the powder spectrum of the structure (if requested).",
            "",
            "    If ``run_replot = True`` is set in the inputs (defaults to False), the WorkChain will run a second xspectra.x",
            "    calculation which replots the spectra produced from the ``xs_prod`` step. This option can be very useful for",
            "    obtaining a final spectrum at low levels of broadening (relative to the default of 0.5 eV), particularly as higher",
            "    levels of broadening significantly speed up the convergence of the Lanczos procedure. Inputs for the replot",
            "    calculation are found in the ``xs_plot`` namespace.",
            "",
            "    The core-wavefunction plot derived from the ground-state of the absorbing element can be provided as a top-level",
            "    input or produced by the WorkChain. If left to the WorkChain, the ground-state pseudopotential assigned to the",
            "    absorbing element will be used to generate this data using the upf2plotcore.sh utility script (via the",
            "    ``aiida-shell`` plugin).",
            "",
            "    In its current stage of development, the workflow requires the following:",
            "",
            "    - An input structure where the desired absorbing atom in the system is marked as a separate Kind. The default",
            "      behaviour for the WorkChain is to set the Kind name as 'X', however this can be changed via the `overrides`",
            "      dictionary.",
            "    - A code node for ``upf2plotcore``, configured for the ``aiida-shell`` plugin",
            "      (https://github.com/sphuber/aiida-shell). Alternatively, a ``SinglefileData`` node from a previous ``ShellJob``",
            "      run can be supplied under ``inputs.core_wfc_data``.",
            "    - A suitable pair of pseudopotentials for the element type of the absorbing atom, one for the ground-state occupancy",
            "      which contains GIPAW informtation for the core level of interest for the XAS (e.g. 1s in the case of a K-edge",
            "      calculation) and the other containing a core hole. (For the moment this can be passed either via the",
            "      ``core_hole_pseudos`` field in ``get_builder_from_protocol`` or via the overrides, but will be changed later once",
            "      full families of core-hole pseudopotentials become available)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "eps_vectors",
                "required": true,
                "valid_types": "List",
                "info": "The list of 3-vectors to use in XSpectra sub-processes. The number of sub-l ..."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `pw.x` calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation, with at least one site containing the ..."
              },
              {
                "name": "xs_prod",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `xspectra.x` calculation to compute the Lanczos."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "The name for the Kind representing the absorbing atom in the structure. Mus ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "core_wfc_data",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "The core wavefunction data file extracted from the ground-state pseudo for  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "get_powder_spectrum",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, the WorkChain will combine XANES dipole spectra computed using t ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "run_replot",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              },
              {
                "name": "upf2plotcore_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "The code node required for upf2plotcore.sh configured for ``aiida-shell``.  ..."
              },
              {
                "name": "xs_plot",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the re-plot `xspectra.x` calculation of the Lanczos."
              }
            ],
            "outputs": [
              {
                "name": "parameters_scf",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "parameters_xspectra",
                "required": true,
                "valid_types": "Dict",
                "info": "The output dictionaries of each `XspectraBaseWorkChain` performed"
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": "An XyData node containing all the final spectra produced by the WorkChain."
              },
              {
                "name": "powder_spectrum",
                "required": false,
                "valid_types": "XyData",
                "info": "The simulated powder spectrum"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The SCF sub process failed"
              },
              {
                "status": 402,
                "message": "One or more XSpectra sub processes failed"
              },
              {
                "status": 403,
                "message": "The pseudo for the absorbing element contains no GIPAW information."
              }
            ]
          }
        },
        "quantumespresso.xspectra.crystal": {
          "description": [
            "Workchain to compute all X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
            "",
            "    The WorkChain follows the process required to compute all the K-edge XAS spectra for each",
            "    element in a given structure. The WorkChain itself firstly calls the PwRelaxWorkChain to",
            "    relax the input structure, then determines the input settings for each XAS",
            "    calculation automatically using ``get_xspectra_structures()``:",
            "",
            "        - Firstly the input structure is converted to its conventional standard cell using",
            "          ``spglib`` and detects the space group number for the conventional cell.",
            "        - Symmetry analysis of the standardized structure using ``spglib`` is then used to",
            "          determine the number of non-equivalent atomic sites in the structure for each",
            "          element considered for analysis.",
            "",
            "    Using the symmetry data returned from ``get_xspectra_structures``, input structures for",
            "    the XspectraCoreWorkChain are generated from the standardized structure by converting each",
            "    to a supercell with cell dimensions of at least 8.0 angstroms in each periodic dimension -",
            "    required in order to sufficiently reduce the unphysical interaction of the core-hole with",
            "    neighbouring images. The size of the minimum size requirement can be overriden by the",
            "    user if required. The WorkChain then uses the space group number to set the list of",
            "    polarisation vectors for the ``XspectraCoreWorkChain`` to compute for all subsequent",
            "    calculations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "core",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the basic xspectra workflow (core-hole SCF + XAS."
              },
              {
                "name": "core_hole_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
              },
              {
                "name": "elements_list",
                "required": true,
                "valid_types": "List",
                "info": "The list of elements to be considered for analysis, each must be a valid el ..."
              },
              {
                "name": "gipaw_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str",
                "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
              },
              {
                "name": "core_hole_treatments",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set core-hole treatment to given elements present. T ..."
              },
              {
                "name": "core_wfc_data",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input namespace to provide core wavefunction inputs for each element. Must  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
              },
              {
                "name": "return_all_powder_spectra",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, the WorkChain will return all ``powder_spectrum`` nodes from e ..."
              },
              {
                "name": "spglib_settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
              },
              {
                "name": "structure_preparation_settings",
                "required": false,
                "valid_types": "Dict, Float, Int, Bool, Str",
                "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
              },
              {
                "name": "upf2plotcore_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "Code node for the upf2plotcore.sh ShellJob code."
              }
            ],
            "outputs": [
              {
                "name": "final_spectra",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element"
              },
              {
                "name": "supercell_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
              },
              {
                "name": "symmetry_analysis_data",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters from ``get_xspectra_structures()``."
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure from the ``relax`` process."
              },
              {
                "name": "parameters_relax",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the relax step."
              },
              {
                "name": "parameters_scf",
                "required": false,
                "valid_types": "Dict",
                "info": "The output parameters of each ``PwBaseWorkChain`` performed in each ``Xspec ..."
              },
              {
                "name": "parameters_xspectra",
                "required": false,
                "valid_types": "Dict",
                "info": "The output dictionaries of each `XspectraCalculation` performed"
              },
              {
                "name": "powder_spectra",
                "required": false,
                "valid_types": "XyData",
                "info": "All the spectra generated by the WorkChain."
              },
              {
                "name": "standardized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The standardized crystal structure used to generate structures for XSpectra ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The Relax sub process failed"
              },
              {
                "status": 402,
                "message": "One or more XSpectra workflows failed"
              },
              {
                "status": 403,
                "message": "The pseudos for one or more absorbing elements contain no GIPAW information."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "pyscf.base": {
          "description": [
            "``CalcJob`` plugin for PySCF."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure with molecular structure definition."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input parameters used to render the PySCF script template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "cubegen",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Computed cube files."
              },
              {
                "name": "fcidump",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Computed fcidump files."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Various computed properties parsed from the `FILENAME_RESULTS` output file."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure if the input parameters contained the `optimizer` k ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The stdout output file was not retrieved."
              },
              {
                "status": 303,
                "message": "The stderr output file was not retrieved."
              },
              {
                "status": 304,
                "message": "The results JSON file was not retrieved."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "pyscf.base": {
          "description": [
            "Workchain to run a pyscf calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "pyscf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "cubegen",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Computed cube files."
              },
              {
                "name": "fcidump",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Computed fcidump files."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Various computed properties parsed from the `FILENAME_RESULTS` output file."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure if the input parameters contained the `optimizer` k ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.cp": {
          "description": [
            "`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\n"
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 304,
                "message": "The retrieved folder contains multiple XML files."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The required XML file could not be read."
              },
              {
                "status": 330,
                "message": "The required POS file could not be read."
              },
              {
                "status": 340,
                "message": "The required trajectory data could not be read."
              }
            ]
          }
        },
        "quantumespresso.create_kpoints_from_distance": {
          "description": [
            "Generate a uniformly spaced kpoint mesh for a given structure.",
            "",
            "    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.",
            "",
            "    :param structure: the StructureData to which the mesh should apply",
            "    :param distance: a Float with the desired distance between kpoints in reciprocal space",
            "    :param force_parity: a Bool to specify whether the generated mesh should maintain parity",
            "    :returns: a KpointsData with the generated mesh"
          ],
          "spec": {
            "inputs": [
              {
                "name": "distance",
                "required": true,
                "valid_types": "Data",
                "info": "a Float with the desired distance between kpoints in reciprocal space"
              },
              {
                "name": "force_parity",
                "required": true,
                "valid_types": "Data",
                "info": "a Bool to specify whether the generated mesh should maintain parity"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": "the StructureData to which the mesh should apply"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.dos": {
          "description": [
            "`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The dos file could not be read from the retrieved folder."
              }
            ]
          }
        },
        "quantumespresso.epw": {
          "description": [
            "`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine kpoint mesh"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse kpoint mesh"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder_nscf",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed nscf `PwCalculation`"
              },
              {
                "name": "parent_folder_ph",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PhCalculation`"
              },
              {
                "name": "qfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine qpoint mesh"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse qpoint mesh"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.matdyn": {
          "description": [
            "`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "Kpoints on which to calculate the phonon frequencies."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The output frequencies file could not be read from the retrieved folder."
              },
              {
                "status": 410,
                "message": "Number of kpoints not found in the output data"
              },
              {
                "status": 411,
                "message": "Number of kpoints in the inputs is not commensurate with those in the output"
              }
            ]
          }
        },
        "quantumespresso.merge_ph_outputs": {
          "description": [
            "Calcfunction to merge outputs from multiple `ph.x` calculations with different q-points."
          ],
          "spec": {
            "inputs": [
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.namelists": {
          "description": [
            "`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.neb": {
          "description": [
            "Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."
          ],
          "spec": {
            "inputs": [
              {
                "name": "first_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Initial structure"
              },
              {
                "name": "last_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Final structure"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "NEB-specific input parameters"
              },
              {
                "name": "pw",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              }
            ],
            "outputs": [
              {
                "name": "output_mep",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The original and interpolated energy profiles along the minimum-energy path ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters dictionary of the NEB calculation"
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "iteration_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.open_grid": {
          "description": [
            "``CalcJob`` implementation for the ``open_grid.x`` code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a completed `PwCalculation` on an irreducible Brilloui ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The explicit list of kpoints of the unfolded kmesh"
              },
              {
                "name": "kpoints_mesh",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The dimensions of the unfolded kmesh"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 312,
                "message": "Found rotation or fractional translation not compatible with FFT grid."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message."
              },
              {
                "status": 350,
                "message": "Mismatch between kmesh dimensions and number of kpoints."
              }
            ]
          }
        },
        "quantumespresso.ph": {
          "description": [
            "`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PwCalculation`"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "qpoint mesh"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The minimization cycle did not reach self-consistency."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              }
            ]
          }
        },
        "quantumespresso.pp": {
          "description": [
            "`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job is performed."
              }
            ],
            "outputs": [
              {
                "name": "output_data",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_data_multiple",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The parent folder did not contain the required XML output file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete."
              },
              {
                "status": 330,
                "message": "The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."
              },
              {
                "status": 331,
                "message": "The formatted data output file `{filename}` could not be read."
              },
              {
                "status": 332,
                "message": "The data file format is not supported by the parser"
              },
              {
                "status": 333,
                "message": "The formatted data output file `{filename}` could not be parsed"
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.projwfc": {
          "description": [
            "`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.",
            "",
            "    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch",
            "    wavefunctions onto atomic orbitals.",
            "",
            "    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "Dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_down",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_up",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "projections",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_down",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_up",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 330,
                "message": "The pdos_tot file could not be read from the retrieved folder."
              },
              {
                "status": 340,
                "message": "An exception was raised parsing bands and projections."
              }
            ]
          }
        },
        "quantumespresso.pw": {
          "description": [
            "`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 360,
                "message": "The code failed in finding a valid reciprocal lattice vector."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 464,
                "message": "The S matrix was found to be not positive definite."
              },
              {
                "status": 465,
                "message": "The `zhegvd` failed in the PPCG diagonalization."
              },
              {
                "status": 466,
                "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
              },
              {
                "status": 467,
                "message": "The eigenvector failed to converge."
              },
              {
                "status": 468,
                "message": "The factorization in the Broyden routine failed."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 503,
                "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 542,
                "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw2gw": {
          "description": [
            "`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "eps",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation.`"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "The eps*.dat output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The eps*.dat output files do not have the expected shape (N, 2)."
              },
              {
                "status": 331,
                "message": "The eps*.dat output files contains different values of energies."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.pw2wannier90": {
          "description": [
            "`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.",
            "",
            "    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "nnkp_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "A SinglefileData containing the .nnkp file generated by wannier90.x -pp"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message"
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.pwimmigrant": {
          "description": [
            "Create a PwCalculation object that can be used to import old jobs.",
            "",
            "    This is a sublass of aiida_quantumespresso.calculations.PwCalculation",
            "    with slight modifications to some of the class variables and additional",
            "    methods that",
            "",
            "        a. parse the job's input file to create the calculation's input",
            "           nodes that would exist if the calculation were submitted using AiiDa,",
            "        b. bypass the functions of the daemon, and prepare the node's attributes",
            "           such that all the processes (copying of the files to the repository,",
            "           results parsing, ect.) can be performed",
            "",
            "    .. note:: The keyword arguments of PwCalculation are also available.",
            "",
            "    :param remote_workdir: Absolute path to the directory where the job was run.",
            "        The transport of the computer you link ask input to the calculation is",
            "        the transport that will be used to retrieve the calculation's files.",
            "        Therefore, ``remote_workdir`` should be the absolute path to the job's",
            "        directory on that computer.",
            "    :type remote_workdir: str",
            "",
            "    :param input_file_name: The file name of the job's input file.",
            "    :type input_file_name: str",
            "",
            "    :param output_file_name: The file name of the job's output file (i.e. the",
            "        file containing the stdout of QE).",
            "    :type output_file_name: str"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 360,
                "message": "The code failed in finding a valid reciprocal lattice vector."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 464,
                "message": "The S matrix was found to be not positive definite."
              },
              {
                "status": 465,
                "message": "The `zhegvd` failed in the PPCG diagonalization."
              },
              {
                "status": 466,
                "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
              },
              {
                "status": 467,
                "message": "The eigenvector failed to converge."
              },
              {
                "status": 468,
                "message": "The factorization in the Broyden routine failed."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 503,
                "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 542,
                "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.q2r": {
          "description": [
            "`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The force constants file could not be read."
              }
            ]
          }
        },
        "quantumespresso.seekpath_structure_analysis": {
          "description": [
            "Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.",
            "",
            "    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the",
            "    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the",
            "    original structure in which case the k-points are only congruent with the primitive cell.",
            "",
            "    The keyword arguments can be used to specify various Seekpath parameters, such as:",
            "",
            "        with_time_reversal: True",
            "        reference_distance: 0.025",
            "        recipe: 'hpkot'",
            "        threshold: 1e-07",
            "        symprec: 1e-05",
            "        angle_tolerance: -1.0",
            "",
            "    Note that exact parameters that are available and their defaults will depend on your Seekpath version."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.xspectra": {
          "description": [
            "CalcJob implementation for the xspectra.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "core_wfc_data",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Core wavefunction data, generated by the upf2plotcore.sh utility"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The K-point sampling to be used for the XSpectra calculation"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "gamma_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "An optional file containing the data for the broadening function used when  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 313,
                "message": "xiabs was set incorrectly, check and ensure that the index value correctly refers to the atomic species containing the core-hole (where the index starts from 1)."
              },
              {
                "status": 314,
                "message": "xiabs was either set to 0 or less, or was greater than ntyp."
              },
              {
                "status": 330,
                "message": "The xspectra output file could not be read from the retrieved folder."
              },
              {
                "status": 331,
                "message": "The spectrum data file could not be read using NumPy genfromtxt"
              },
              {
                "status": 400,
                "message": "The time limit set for the calculation was exceeded, and the job wrote a save file before exiting."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "quantumespresso.matdyn.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "matdyn",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pdos": {
          "description": [
            "A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."
          ],
          "spec": {
            "inputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax`  ..."
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` of the `nscf` calculation."
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Em ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "align_to_fermi",
                "required": false,
                "valid_types": "Bool",
                "info": "If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, work directories of all called calculation will be cleaned at  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` of the `scf` calculation."
              },
              {
                "name": "serial_clean",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "If ``True``, calculations will be run in serial, and work directories will  ..."
              }
            ],
            "outputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."
              },
              {
                "status": 401,
                "message": "the SCF sub process failed"
              },
              {
                "status": 402,
                "message": "the NSCF sub process failed"
              },
              {
                "status": 403,
                "message": "the DOS sub process failed"
              },
              {
                "status": 404,
                "message": "the PROJWFC sub process failed"
              },
              {
                "status": 404,
                "message": "both the DOS and PROJWFC sub process failed"
              }
            ]
          }
        },
        "quantumespresso.ph.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ph",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "only_initialization",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 401,
                "message": "The work chain failed to merge the q-points data from multiple `PhCalculation`s because not all q-points were parsed."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pw.bands": {
          "description": [
            "Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
            "",
            "    The logic for the computation of various parameters for the BANDS step is as follows:",
            "",
            "    Number of bands:",
            "        One can specify the number of bands to be used in the BANDS step either directly through the input parameters",
            "        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When",
            "        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being",
            "        used. If the `nbands_factor` is specified the maximum value of the following values will be used:",
            "",
            "        * `nbnd` of the preceding SCF calculation",
            "        * 0.5 * nelectrons * nbands_factor",
            "        * 0.5 * nelectrons + 4",
            "",
            "    Kpoints:",
            "        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the",
            "        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.",
            "        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry",
            "        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that",
            "        of `bands_kpoints_distance` or the SeekPath default if not specified."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the BANDS calculation."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "bands_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Explicit kpoints to use for the BANDS calculation. Specify either this or ` ..."
              },
              {
                "name": "bands_kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Minimum kpoints distance for the BANDS calculation. Specify either this or  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nbands_factor",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The number of bands for the BANDS calculation is that used for the SCF mult ..."
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation  ..."
              }
            ],
            "outputs": [
              {
                "name": "band_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the BANDS `PwBaseWorkChain`."
              },
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "BandsData",
                "info": "The computed band structure."
              },
              {
                "name": "scf_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "primitive_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The normalized and primitivized structure for which the bands are computed."
              },
              {
                "name": "seekpath_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."
              },
              {
                "status": 202,
                "message": "Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."
              },
              {
                "status": 401,
                "message": "The PwRelaxWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "The scf PwBasexWorkChain sub process failed"
              },
              {
                "status": 403,
                "message": "The bands PwBasexWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.pw.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "pw",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "An explicit k-points list or mesh. Either this or `kpoints_distance` has to ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 203,
                "message": "Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 210,
                "message": "Required key for `automatic_parallelization` was not specified.This exit status has been deprecated as the automatic parallellization feature was removed."
              },
              {
                "status": 211,
                "message": "Unrecognized keys were specified for `automatic_parallelization`.This exit status has been deprecated as the automatic parallellization feature was removed."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 310,
                "message": "The calculation failed with a known unrecoverable error."
              },
              {
                "status": 320,
                "message": "The initialization calculation failed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw.relax": {
          "description": [
            "Workchain to relax a structure using Quantum ESPRESSO pw.x."
          ],
          "spec": {
            "inputs": [
              {
                "name": "base",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the main relax loop."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "base_final_scf",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the final scf."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "max_meta_convergence_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of variable cell relax iterations in the meta convergenc ..."
              },
              {
                "name": "meta_convergence",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True` the workchain will perform a meta-convergence on the cell volume."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "volume_convergence",
                "required": false,
                "valid_types": "Float",
                "info": "The volume difference threshold between two consecutive meta convergence it ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The successfully relaxed structure."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "the relax PwBaseWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "the final scf PwBaseWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.q2r.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "q2r",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.xps": {
          "description": [
            "Workchain to compute X-ray photoelectron spectra (XPS) for a given structure.",
            "",
            "    The WorkChain itself firstly calls the PwRelaxWorkChain to relax the input structure if",
            "    required. Then determines the input settings for each XPS calculation automatically using",
            "    ``get_xspectra_structures()``. The input structures are generated from the standardized",
            "    structure by converting each to a supercell with cell dimensions of at least 8.0 angstrom",
            "    in each periodic dimension in order to sufficiently reduce the unphysical interaction",
            "    of the core-hole with neighbouring images. The size of the minimum size requirement can be",
            "    overriden by the user if required. Then the standard Delta-Self-Consistent-Field (\u0394SCF)",
            "    method is used to get the XPS binding energy. Finally, the XPS spectrum is calculated",
            "    using the Voigt profile."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ch_scf",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the basic xps workflow (core-hole SCF)."
              },
              {
                "name": "core_hole_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
              },
              {
                "name": "gipaw_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str",
                "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
              },
              {
                "name": "calc_binding_energy",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, run scf calculation for the supercell."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
              },
              {
                "name": "core_hole_treatments",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set core-hole treatment to all elements present. The ..."
              },
              {
                "name": "correction_energies",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set the correction energy to all elements present. "
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "elements_list",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "The list of elements to be considered for analysis, each must be valid elem ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
              },
              {
                "name": "spglib_settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
              },
              {
                "name": "structure_preparation_settings",
                "required": false,
                "valid_types": "Dict, Float, Int, Bool, Str",
                "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
              },
              {
                "name": "voight_gamma",
                "required": false,
                "valid_types": "Float",
                "info": "The gamma parameter for the Lorenzian broadening in the Voight method."
              },
              {
                "name": "voight_sigma",
                "required": false,
                "valid_types": "Float",
                "info": "The sigma parameter for the gaussian broadening in the Voight method."
              }
            ],
            "outputs": [
              {
                "name": "binding_energies",
                "required": true,
                "valid_types": "Dict",
                "info": "All the binding energy values for each element calculated by the WorkChain."
              },
              {
                "name": "chemical_shifts",
                "required": true,
                "valid_types": "Dict",
                "info": "All the chemical shift values for each element calculated by the WorkChain."
              },
              {
                "name": "final_spectra_be",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element based on binding energy."
              },
              {
                "name": "final_spectra_cls",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element based on chemical shift."
              },
              {
                "name": "output_parameters_ch_scf",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of each ``PwBaseWorkChain`` performed``."
              },
              {
                "name": "supercell_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
              },
              {
                "name": "symmetry_analysis_data",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters from ``get_xspectra_structures()``."
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure from the ``relax`` process."
              },
              {
                "name": "output_parameters_relax",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the relax step."
              },
              {
                "name": "output_parameters_scf",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the scf step."
              },
              {
                "name": "standardized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The standardized crystal structure used to generate structures for XPS sub- ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The Relax sub process failed"
              },
              {
                "status": 402,
                "message": "The SCF Pw sub processes failed"
              },
              {
                "status": 402,
                "message": "One or more CH_SCF Pw sub processes failed"
              }
            ]
          }
        },
        "quantumespresso.xspectra.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO xspectra.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "xspectra",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "An explicit k-points mesh. Either this or `kpoints_distance` has to be prov ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.xspectra.core": {
          "description": [
            "Workchain to compute X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
            "",
            "    The workflow follows the process required to compute the XAS of an input structure: an SCF calculation is performed",
            "    using the provided structure, which is then followed by the calculation of the XAS itself by XSpectra. The",
            "    calculations performed by the WorkChain in a typical run will be:",
            "",
            "    - PwSCF calculation with pw.x of the input structure with a core-hole present.",
            "    - Generation of core-wavefunction data with upf2plotcore.sh (if requested).",
            "    - XAS calculation with xspectra.x to compute the Lanczos coefficients and print the XANES spectra for the",
            "      polarisation vectors requested in the input.",
            "    - Collation of output data from pw.x and xspectra.x calculations, including a combination of XANES dipole spectra",
            "      based on polarisation vectors to represent the powder spectrum of the structure (if requested).",
            "",
            "    If ``run_replot = True`` is set in the inputs (defaults to False), the WorkChain will run a second xspectra.x",
            "    calculation which replots the spectra produced from the ``xs_prod`` step. This option can be very useful for",
            "    obtaining a final spectrum at low levels of broadening (relative to the default of 0.5 eV), particularly as higher",
            "    levels of broadening significantly speed up the convergence of the Lanczos procedure. Inputs for the replot",
            "    calculation are found in the ``xs_plot`` namespace.",
            "",
            "    The core-wavefunction plot derived from the ground-state of the absorbing element can be provided as a top-level",
            "    input or produced by the WorkChain. If left to the WorkChain, the ground-state pseudopotential assigned to the",
            "    absorbing element will be used to generate this data using the upf2plotcore.sh utility script (via the",
            "    ``aiida-shell`` plugin).",
            "",
            "    In its current stage of development, the workflow requires the following:",
            "",
            "    - An input structure where the desired absorbing atom in the system is marked as a separate Kind. The default",
            "      behaviour for the WorkChain is to set the Kind name as 'X', however this can be changed via the `overrides`",
            "      dictionary.",
            "    - A code node for ``upf2plotcore``, configured for the ``aiida-shell`` plugin",
            "      (https://github.com/sphuber/aiida-shell). Alternatively, a ``SinglefileData`` node from a previous ``ShellJob``",
            "      run can be supplied under ``inputs.core_wfc_data``.",
            "    - A suitable pair of pseudopotentials for the element type of the absorbing atom, one for the ground-state occupancy",
            "      which contains GIPAW informtation for the core level of interest for the XAS (e.g. 1s in the case of a K-edge",
            "      calculation) and the other containing a core hole. (For the moment this can be passed either via the",
            "      ``core_hole_pseudos`` field in ``get_builder_from_protocol`` or via the overrides, but will be changed later once",
            "      full families of core-hole pseudopotentials become available)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "eps_vectors",
                "required": true,
                "valid_types": "List",
                "info": "The list of 3-vectors to use in XSpectra sub-processes. The number of sub-l ..."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `pw.x` calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation, with at least one site containing the ..."
              },
              {
                "name": "xs_prod",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `xspectra.x` calculation to compute the Lanczos."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "The name for the Kind representing the absorbing atom in the structure. Mus ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "core_wfc_data",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "The core wavefunction data file extracted from the ground-state pseudo for  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "get_powder_spectrum",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, the WorkChain will combine XANES dipole spectra computed using t ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "run_replot",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              },
              {
                "name": "upf2plotcore_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "The code node required for upf2plotcore.sh configured for ``aiida-shell``.  ..."
              },
              {
                "name": "xs_plot",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the re-plot `xspectra.x` calculation of the Lanczos."
              }
            ],
            "outputs": [
              {
                "name": "parameters_scf",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "parameters_xspectra",
                "required": true,
                "valid_types": "Dict",
                "info": "The output dictionaries of each `XspectraBaseWorkChain` performed"
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": "An XyData node containing all the final spectra produced by the WorkChain."
              },
              {
                "name": "powder_spectrum",
                "required": false,
                "valid_types": "XyData",
                "info": "The simulated powder spectrum"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The SCF sub process failed"
              },
              {
                "status": 402,
                "message": "One or more XSpectra sub processes failed"
              },
              {
                "status": 403,
                "message": "The pseudo for the absorbing element contains no GIPAW information."
              }
            ]
          }
        },
        "quantumespresso.xspectra.crystal": {
          "description": [
            "Workchain to compute all X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
            "",
            "    The WorkChain follows the process required to compute all the K-edge XAS spectra for each",
            "    element in a given structure. The WorkChain itself firstly calls the PwRelaxWorkChain to",
            "    relax the input structure, then determines the input settings for each XAS",
            "    calculation automatically using ``get_xspectra_structures()``:",
            "",
            "        - Firstly the input structure is converted to its conventional standard cell using",
            "          ``spglib`` and detects the space group number for the conventional cell.",
            "        - Symmetry analysis of the standardized structure using ``spglib`` is then used to",
            "          determine the number of non-equivalent atomic sites in the structure for each",
            "          element considered for analysis.",
            "",
            "    Using the symmetry data returned from ``get_xspectra_structures``, input structures for",
            "    the XspectraCoreWorkChain are generated from the standardized structure by converting each",
            "    to a supercell with cell dimensions of at least 8.0 angstroms in each periodic dimension -",
            "    required in order to sufficiently reduce the unphysical interaction of the core-hole with",
            "    neighbouring images. The size of the minimum size requirement can be overriden by the",
            "    user if required. The WorkChain then uses the space group number to set the list of",
            "    polarisation vectors for the ``XspectraCoreWorkChain`` to compute for all subsequent",
            "    calculations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "core",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the basic xspectra workflow (core-hole SCF + XAS."
              },
              {
                "name": "core_hole_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
              },
              {
                "name": "elements_list",
                "required": true,
                "valid_types": "List",
                "info": "The list of elements to be considered for analysis, each must be a valid el ..."
              },
              {
                "name": "gipaw_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str",
                "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
              },
              {
                "name": "core_hole_treatments",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set core-hole treatment to given elements present. T ..."
              },
              {
                "name": "core_wfc_data",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input namespace to provide core wavefunction inputs for each element. Must  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
              },
              {
                "name": "return_all_powder_spectra",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, the WorkChain will return all ``powder_spectrum`` nodes from e ..."
              },
              {
                "name": "spglib_settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
              },
              {
                "name": "structure_preparation_settings",
                "required": false,
                "valid_types": "Dict, Float, Int, Bool, Str",
                "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
              },
              {
                "name": "upf2plotcore_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "Code node for the upf2plotcore.sh ShellJob code."
              }
            ],
            "outputs": [
              {
                "name": "final_spectra",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element"
              },
              {
                "name": "supercell_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
              },
              {
                "name": "symmetry_analysis_data",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters from ``get_xspectra_structures()``."
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure from the ``relax`` process."
              },
              {
                "name": "parameters_relax",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the relax step."
              },
              {
                "name": "parameters_scf",
                "required": false,
                "valid_types": "Dict",
                "info": "The output parameters of each ``PwBaseWorkChain`` performed in each ``Xspec ..."
              },
              {
                "name": "parameters_xspectra",
                "required": false,
                "valid_types": "Dict",
                "info": "The output dictionaries of each `XspectraCalculation` performed"
              },
              {
                "name": "powder_spectra",
                "required": false,
                "valid_types": "XyData",
                "info": "All the spectra generated by the WorkChain."
              },
              {
                "name": "standardized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The standardized crystal structure used to generate structures for XSpectra ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The Relax sub process failed"
              },
              {
                "status": 402,
                "message": "One or more XSpectra workflows failed"
              },
              {
                "status": 403,
                "message": "The pseudos for one or more absorbing elements contain no GIPAW information."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "general-MD": {
          "description": [
            "AiiDA calculation plugin wrapping an executable with user defined",
            "    input and output files."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "command",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "The command used to execute the job."
              },
              {
                "name": "input_files",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Dictionary of input files."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "output_files",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "List of output file names."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "log",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "link to the default file.log."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              },
              {
                "status": 301,
                "message": "Specified output file not produced by command."
              }
            ]
          }
        },
        "gromacs.editconf": {
          "description": [
            "AiiDA calculation plugin wrapping the 'gmx editconf' executable.",
            "",
            "    AiiDA plugin wrapper for adding a simulation box to structure file."
          ],
          "spec": {
            "inputs": [
              {
                "name": "grofile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input structure file."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "EditconfParameters",
                "info": "Command line parameters for gmx editconf."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "grofile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output file containing simulation box."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "stdout",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "stdout"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              }
            ]
          }
        },
        "gromacs.genion": {
          "description": [
            "AiiDA calculation plugin wrapping the 'gmx genion' executable.",
            "",
            "    AiiDA plugin wrapper for converting PDB files to GRO files."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "GenionParameters",
                "info": "Command line parameters for gmx genion"
              },
              {
                "name": "topfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input topology file."
              },
              {
                "name": "tprfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input tpr file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "grofile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output gro file with ions added."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "stdout",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "stdout"
              },
              {
                "name": "topfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output topology with ions added."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              }
            ]
          }
        },
        "gromacs.grompp": {
          "description": [
            "AiiDA calculation plugin wrapping the 'gmx grompp' executable.",
            "",
            "    AiiDA plugin wrapper for converting PDB files to GRO files."
          ],
          "spec": {
            "inputs": [
              {
                "name": "grofile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input structure"
              },
              {
                "name": "mdpfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "grompp run file."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "GromppParameters",
                "info": "Command line parameters for gmx grompp"
              },
              {
                "name": "topfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input topology"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "itpfile",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Restraints file"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "stdout",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "stdout"
              },
              {
                "name": "tprfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output gro file ready for adding ions."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              }
            ]
          }
        },
        "gromacs.mdrun": {
          "description": [
            "AiiDA calculation plugin wrapping the 'gmx mdrun' executable.",
            "",
            "    AiiDA plugin wrapper for converting PDB files to GRO files."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "MdrunParameters",
                "info": "Command line parameters for gmx mdrun"
              },
              {
                "name": "tprfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "enfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output energy file."
              },
              {
                "name": "grofile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output structure file."
              },
              {
                "name": "logfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output log file."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "stdout",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "stdout"
              },
              {
                "name": "trrfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output trajectory."
              },
              {
                "name": "cptfile",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Checkpoint file."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              }
            ]
          }
        },
        "gromacs.pdb2gmx": {
          "description": [
            "AiiDA calculation plugin wrapping the 'gmx pdb2gmx' executable.",
            "",
            "    AiiDA plugin wrapper for converting PDB files to GRO files."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Pdb2gmxParameters",
                "info": "Command line parameters for gmx pdb2gmx"
              },
              {
                "name": "pdbfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "grofile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output forcefield compliant file."
              },
              {
                "name": "itpfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output forcefield compliant file."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "stdout",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "stdout"
              },
              {
                "name": "topfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output forcefield compliant file."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              }
            ]
          }
        },
        "gromacs.solvate": {
          "description": [
            "AiiDA calculation plugin wrapping the 'gmx solvate' executable.",
            "",
            "    AiiDA plugin wrapper for solvating a molecular system."
          ],
          "spec": {
            "inputs": [
              {
                "name": "grofile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input structure"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "SolvateParameters",
                "info": "Command line parameters for gmx solvate."
              },
              {
                "name": "topfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input topology"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "grofile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output solvated gro file."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "stdout",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "stdout"
              },
              {
                "name": "topfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output topology file."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "gromacs.setup": {
          "description": [
            "WorkChain for setting up a gromacs simulation automatically."
          ],
          "spec": {
            "inputs": [
              {
                "name": "editconfparameters",
                "required": true,
                "valid_types": "EditconfParameters",
                "info": "Command line parameters for gmx editconf"
              },
              {
                "name": "genionparameters",
                "required": true,
                "valid_types": "GenionParameters",
                "info": "Command line parameters for gmx genion"
              },
              {
                "name": "gromppionsparameters",
                "required": true,
                "valid_types": "GromppParameters",
                "info": "Command line parameters for gmx grompp"
              },
              {
                "name": "gromppminparameters",
                "required": true,
                "valid_types": "GromppParameters",
                "info": "Command line parameters for gmx grompp minimisation run"
              },
              {
                "name": "gromppnptparameters",
                "required": true,
                "valid_types": "GromppParameters",
                "info": "Command line parameters for gmx grompp npt equilibration run"
              },
              {
                "name": "gromppnvtparameters",
                "required": true,
                "valid_types": "GromppParameters",
                "info": "Command line parameters for gmx grompp nvt equilibration run"
              },
              {
                "name": "gromppprodparameters",
                "required": true,
                "valid_types": "GromppParameters",
                "info": "Command line parameters for gmx grompp production run"
              },
              {
                "name": "ionsmdp",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "MD parameters for adding ions."
              },
              {
                "name": "local_code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "mdrunparameters",
                "required": true,
                "valid_types": "MdrunParameters",
                "info": "Command line parameters for gmx mdrun production run"
              },
              {
                "name": "minimiseparameters",
                "required": true,
                "valid_types": "MdrunParameters",
                "info": "Command line parameters for gmx mdrun minimisation run"
              },
              {
                "name": "minmdp",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "MD parameters for minimisation."
              },
              {
                "name": "nptmdp",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "MD parameters for NPT equilibration."
              },
              {
                "name": "nptparameters",
                "required": true,
                "valid_types": "MdrunParameters",
                "info": "Command line parameters for gmx mdrun npt equilibration run"
              },
              {
                "name": "nvtmdp",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "MD parameters for NVT equilibration."
              },
              {
                "name": "nvtparameters",
                "required": true,
                "valid_types": "MdrunParameters",
                "info": "Command line parameters for gmx mdrun nvt equilibration run"
              },
              {
                "name": "pdb2gmxparameters",
                "required": true,
                "valid_types": "Pdb2gmxParameters",
                "info": "Command line parameters for gmx pdb2gmx"
              },
              {
                "name": "pdbfile",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input structure."
              },
              {
                "name": "prodmdp",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "MD parameters for production run."
              },
              {
                "name": "solvateparameters",
                "required": true,
                "valid_types": "SolvateParameters",
                "info": "Command line parameters for gmx solvate"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "remote_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.shell": {
          "description": [
            "Implementation of :class:`aiida.engine.CalcJob` to run a simple shell command."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "arguments",
                "required": false,
                "valid_types": "List, NoneType",
                "info": ""
              },
              {
                "name": "filenames",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "nodes",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "outputs",
                "required": false,
                "valid_types": "List, NoneType",
                "info": ""
              },
              {
                "name": "parser",
                "required": false,
                "valid_types": "PickledData, NoneType",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Exit status could not be determined: exit status file was not retrieved."
              },
              {
                "status": 301,
                "message": "Exit status could not be determined: exit status file does not contain a valid integer."
              },
              {
                "status": 302,
                "message": "The stdout file was not retrieved."
              },
              {
                "status": 303,
                "message": "One or more output files defined in the `outputs` input were not retrieved: {missing_filepaths}."
              },
              {
                "status": 310,
                "message": "Callable specified in the `parser` input excepted: {exception}."
              },
              {
                "status": 400,
                "message": "The command exited with a non-zero status: {status} {stderr}."
              },
              {
                "status": 410,
                "message": "The command exited with a zero status but the stderr was not empty."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "phonopy.phonopy": {
          "description": [
            "Base `CalcJob` implementation for Phonopy post-processing."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Phonopy parameters (`setting tags`) for post processing. The following tags ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "force_constants",
                "required": false,
                "valid_types": "ForceConstantsData, NoneType",
                "info": "Force constants of the input structure."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "phonopy_data",
                "required": false,
                "valid_types": "PhonopyData, NoneType",
                "info": "The preprocess output info of a previous ForceConstantsWorkChain."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Settings for phonopy calculation."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "irreducible_representations",
                "required": false,
                "valid_types": "Dict",
                "info": "Irreducible representation output."
              },
              {
                "name": "modulation",
                "required": false,
                "valid_types": "Dict",
                "info": "Modulation information."
              },
              {
                "name": "output_force_constants",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Calculated force constants."
              },
              {
                "name": "output_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Sum up info of phonopy calculation."
              },
              {
                "name": "phonon_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Calculated phonon band structure."
              },
              {
                "name": "projected_phonon_dos",
                "required": false,
                "valid_types": "XyData",
                "info": "Calculated projected DOS."
              },
              {
                "name": "qpoints",
                "required": false,
                "valid_types": "BandsData",
                "info": "Calculated qpoints."
              },
              {
                "name": "qpoints_mesh",
                "required": false,
                "valid_types": "BandsData",
                "info": "Calculated qpoint mesh."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "thermal_displacement_matrices",
                "required": false,
                "valid_types": "Dict",
                "info": "Calculated thermal displacements matrices."
              },
              {
                "name": "thermal_displacements",
                "required": false,
                "valid_types": "Dict",
                "info": "Calculated thermal displacements."
              },
              {
                "name": "thermal_properties",
                "required": false,
                "valid_types": "XyData",
                "info": "Calculated thermal properties."
              },
              {
                "name": "total_phonon_dos",
                "required": false,
                "valid_types": "XyData",
                "info": "Calculated total DOS."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required phonopy file."
              },
              {
                "status": 304,
                "message": "The retrieved folder did not contain one or more expected output files."
              },
              {
                "status": 305,
                "message": "No run mode has been selected."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The loading of yaml file got an unexpected error."
              },
              {
                "status": 321,
                "message": "The file loading via numpy got an unexpected error."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The parser was not able to parse one or more files."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "phonopy.phonopy": {
          "description": [
            "Abstract workflow for automated frozen phonons.",
            "",
            "    Phonopy is used to produce structures with displacements,",
            "    while the forces are calculated with a quantum engine of choice.",
            "",
            "    This workchain is meant to be used as a base for other specific force calculato plugin workchains,",
            "    or as an example on how to set a possible workchain/workflow. For this reason, the outline of",
            "    this class is not defined, while it provides the inputs and a `setup` method, which can be used",
            "    in a specific workflow outline. Ideally, the workflow would look like:",
            "",
            "    1. Setup the preprocess data.",
            "",
            "        This is already provided in this class. It setups a `PreProcessData` node, from where",
            "        supercell, primitive cell and supercells with displacements can be easily extracted using",
            "        the methods of the nodes. This node can be taken from `self.ctx.preprocess_data`, and used",
            "        during the outline of the workflow.",
            "",
            "    2. Run supercells using the selected quantum engine/force calculator code.",
            "",
            "        In specific code implementations, a force calculation on supercells needs to be run.",
            "        To get these supercells, one need simply to run:",
            "",
            "        ```self.ctx.preprocess_data.calcfunctions.get_supercells_with_displacements()```",
            "",
            "        This will return a dictionary with all the supercells as StructureData to run for the phonon calculation.",
            "        The keys of this dictionary are of the type `supercell_{number}`, where `number` is an integer.",
            "        These numbers are essentials since the `phonopy` force sets is generated following these numbers,",
            "        in order to make sure to refer to the correct displacement. Thus, it is required to keep track",
            "        of them.",
            "        Moreover,a calculation over the pristine supercell structure should be run before hand as reference.",
            "        This structure can instead be gotten via:",
            "",
            "        ```self.ctx.preprocess_data.calcfunctions.get_supercell()```",
            "",
            "        This will return a StructureData without any label.",
            "",
            "        For an example of implementation, refer to aiidateam/aiida-common-worfklows.",
            "",
            "        * Note: some type of force calculation needs to map some variables from the unitcell to the supercell",
            "        (and in certain case even the primitive cell), e.g. the atomic spin in VASP. Since this is code dependent,",
            "        you will need to map these parameters before launching the force calculation of a certain supercell",
            "        with displacement. This information can be gotten via:",
            "",
            "        ```self.ctx.preprocess_data.get_cells_mappings()```",
            "",
            "        Moreover, consider that cells in phonopy will always (re)fold the atoms in order to have positive coordinates.",
            "",
            "    3. Inspect all runs and expose the forces and energies (not mandatory) outputs.",
            "",
            "        * Suggested: when the calculation on each supercell has finished (correctly)",
            "        expose the output forces (and energies) in the dynamical `supercells_forces(energies)` namespace(s).",
            "        Provide each supercell forces as an `ArrayData` with the forces stored as `forces`",
            "        (e.g. if your code plugin stores  the forces in `TrajectoryData`, extract them with a `calcfunction`).",
            "        Expose each `ArrayData` choosing a **common prefix**, while as **suffix use",
            "        _{number}**, with `{number}` referring to the correspective supercell label suffix (that you are supposed to",
            "        keep track somewhere, e.g. in the label of the code calculation/workchain).",
            "        Now you can gather all the information in one data noe, i.e. in a `PhonopyData` node.",
            "        To do so, you can simple run:",
            "",
            "        ```self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(**self.outputs.supercells_forces)```",
            "",
            "        and then expose it as output in the `output_phonopy_data` namespace.",
            "",
            "        * Alternatively: instead of exposing the supercell forces as outputs, you can directly gather all the forces",
            "        in a dictionary and run directly to the `generate_phonopy_data` method using this dictionary (always using",
            "        the double *).",
            "",
            "        See the implementation in aiidateam/aiida-common-workflows for an example.",
            "",
            "    4. (optional) Run the non-analytical constants on the primitive cell.",
            "",
            "        Non-analytical constants should be run for polar insulators. These require usually a linear response code",
            "        or a finite difference approach (e.g. using the electric enthalpy). Since this is usually the most expensive",
            "        part, you should run them on the primitive cell. To get it, use:",
            "",
            "        ```self.ctx.preprocess_data.calcfunctions.get_primitive_cell()```",
            "",
            "        If you compute also these, collect the dielectric tensor and the effectic born charges in an ArrayData,",
            "        with the arraynames `dielectric` and `born_charges` (in Cartesian coordinates!).",
            "        Then, gather all the information of nac and forces in a unique `PhonopyData` via:",
            "",
            "        ```",
            "        self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(",
            "            nac_parameters=nac_paramters,",
            "            **self.outputs.supercells_forces",
            "            )",
            "        ```",
            "",
            "        and expose the output.",
            "",
            "        * Note: we require in the input for generating the full phonopy data, to give the nac in the primitive cell.",
            "        The primitive cell of phonopy will just rotate the lattice vectors, thus mantaining the Cartasian coordinate",
            "        system. It can happen, though, that the unitcell is not the primitive cell of the system, meaning that the",
            "        primitive cell will contain less atoms. We expect in input the nac computed on this number of atoms. If you",
            "        want, for some reason, compute the nac on the unitcell, you will need to get the reduced nac.",
            "        To do so, you can consider using a built-in function in phonopy, namely:",
            "",
            "        :py:func:`phonopy.structure.symmetry.elaborate_borns_and_epsilon`"
          ],
          "spec": {
            "inputs": [
              {
                "name": "options",
                "required": true,
                "valid_types": "",
                "info": "Options for how to run the workflow."
              },
              {
                "name": "displacement_generator",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Info for displacements generation. The following flags are allowed:\n distan ..."
              },
              {
                "name": "fc_options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Options for force constants calculation (optional). The following flags are ..."
              },
              {
                "name": "is_symmetry",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Whether using or not the space group symmetries."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nac_parameters",
                "required": false,
                "valid_types": "ArrayData, NoneType",
                "info": "Non-analytical parameters."
              },
              {
                "name": "preprocess_data",
                "required": false,
                "valid_types": "PhonopyData, PreProcessData, NoneType",
                "info": "The preprocess data for frozen phonon calcualtion."
              },
              {
                "name": "primitive_matrix",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "The matrix used to generate the primitive cell from the input structure in  ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": "The structure at equilibrium volume."
              },
              {
                "name": "supercell_matrix",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "The matrix used to generate the supercell from the input structure in the L ..."
              },
              {
                "name": "symmetry_tolerance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Symmetry tolerance for space group analysis on the input structure."
              }
            ],
            "outputs": [
              {
                "name": "output_phonopy_data",
                "required": true,
                "valid_types": "PhonopyData",
                "info": "The phonopy data with supercells displacements, forces and (optionally)nac  ..."
              },
              {
                "name": "supercells_forces",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The forces acting on the atoms of each supercell."
              },
              {
                "name": "output_force_constants",
                "required": false,
                "valid_types": "ForceConstantsData",
                "info": "The matrix of force constants computed with finite displacements."
              },
              {
                "name": "supercells",
                "required": false,
                "valid_types": "StructureData",
                "info": "The supercells with displacements."
              },
              {
                "name": "supercells_energies",
                "required": false,
                "valid_types": "Float",
                "info": "The total energy of each supercell."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.cp": {
          "description": [
            "`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\n"
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 304,
                "message": "The retrieved folder contains multiple XML files."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The required XML file could not be read."
              },
              {
                "status": 330,
                "message": "The required POS file could not be read."
              },
              {
                "status": 340,
                "message": "The required trajectory data could not be read."
              }
            ]
          }
        },
        "quantumespresso.create_kpoints_from_distance": {
          "description": [
            "Generate a uniformly spaced kpoint mesh for a given structure.",
            "",
            "    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.",
            "",
            "    :param structure: the StructureData to which the mesh should apply",
            "    :param distance: a Float with the desired distance between kpoints in reciprocal space",
            "    :param force_parity: a Bool to specify whether the generated mesh should maintain parity",
            "    :returns: a KpointsData with the generated mesh"
          ],
          "spec": {
            "inputs": [
              {
                "name": "distance",
                "required": true,
                "valid_types": "Data",
                "info": "a Float with the desired distance between kpoints in reciprocal space"
              },
              {
                "name": "force_parity",
                "required": true,
                "valid_types": "Data",
                "info": "a Bool to specify whether the generated mesh should maintain parity"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": "the StructureData to which the mesh should apply"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.dos": {
          "description": [
            "`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The dos file could not be read from the retrieved folder."
              }
            ]
          }
        },
        "quantumespresso.epw": {
          "description": [
            "`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine kpoint mesh"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse kpoint mesh"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder_nscf",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed nscf `PwCalculation`"
              },
              {
                "name": "parent_folder_ph",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PhCalculation`"
              },
              {
                "name": "qfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine qpoint mesh"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse qpoint mesh"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.matdyn": {
          "description": [
            "`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "Kpoints on which to calculate the phonon frequencies."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The output frequencies file could not be read from the retrieved folder."
              },
              {
                "status": 410,
                "message": "Number of kpoints not found in the output data"
              },
              {
                "status": 411,
                "message": "Number of kpoints in the inputs is not commensurate with those in the output"
              }
            ]
          }
        },
        "quantumespresso.merge_ph_outputs": {
          "description": [
            "Calcfunction to merge outputs from multiple `ph.x` calculations with different q-points."
          ],
          "spec": {
            "inputs": [
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.namelists": {
          "description": [
            "`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.neb": {
          "description": [
            "Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."
          ],
          "spec": {
            "inputs": [
              {
                "name": "first_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Initial structure"
              },
              {
                "name": "last_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Final structure"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "NEB-specific input parameters"
              },
              {
                "name": "pw",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              }
            ],
            "outputs": [
              {
                "name": "output_mep",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The original and interpolated energy profiles along the minimum-energy path ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters dictionary of the NEB calculation"
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "iteration_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.open_grid": {
          "description": [
            "``CalcJob`` implementation for the ``open_grid.x`` code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a completed `PwCalculation` on an irreducible Brilloui ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The explicit list of kpoints of the unfolded kmesh"
              },
              {
                "name": "kpoints_mesh",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The dimensions of the unfolded kmesh"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 312,
                "message": "Found rotation or fractional translation not compatible with FFT grid."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message."
              },
              {
                "status": 350,
                "message": "Mismatch between kmesh dimensions and number of kpoints."
              }
            ]
          }
        },
        "quantumespresso.ph": {
          "description": [
            "`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PwCalculation`"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "qpoint mesh"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The minimization cycle did not reach self-consistency."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              }
            ]
          }
        },
        "quantumespresso.pp": {
          "description": [
            "`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job is performed."
              }
            ],
            "outputs": [
              {
                "name": "output_data",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_data_multiple",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The parent folder did not contain the required XML output file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete."
              },
              {
                "status": 330,
                "message": "The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."
              },
              {
                "status": 331,
                "message": "The formatted data output file `{filename}` could not be read."
              },
              {
                "status": 332,
                "message": "The data file format is not supported by the parser"
              },
              {
                "status": 333,
                "message": "The formatted data output file `{filename}` could not be parsed"
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.projwfc": {
          "description": [
            "`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.",
            "",
            "    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch",
            "    wavefunctions onto atomic orbitals.",
            "",
            "    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "Dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_down",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_up",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "projections",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_down",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_up",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 330,
                "message": "The pdos_tot file could not be read from the retrieved folder."
              },
              {
                "status": 340,
                "message": "An exception was raised parsing bands and projections."
              }
            ]
          }
        },
        "quantumespresso.pw": {
          "description": [
            "`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 360,
                "message": "The code failed in finding a valid reciprocal lattice vector."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 464,
                "message": "The S matrix was found to be not positive definite."
              },
              {
                "status": 465,
                "message": "The `zhegvd` failed in the PPCG diagonalization."
              },
              {
                "status": 466,
                "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
              },
              {
                "status": 467,
                "message": "The eigenvector failed to converge."
              },
              {
                "status": 468,
                "message": "The factorization in the Broyden routine failed."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 503,
                "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 542,
                "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw2gw": {
          "description": [
            "`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "eps",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation.`"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "The eps*.dat output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The eps*.dat output files do not have the expected shape (N, 2)."
              },
              {
                "status": 331,
                "message": "The eps*.dat output files contains different values of energies."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.pw2wannier90": {
          "description": [
            "`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.",
            "",
            "    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "nnkp_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "A SinglefileData containing the .nnkp file generated by wannier90.x -pp"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message"
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.pwimmigrant": {
          "description": [
            "Create a PwCalculation object that can be used to import old jobs.",
            "",
            "    This is a sublass of aiida_quantumespresso.calculations.PwCalculation",
            "    with slight modifications to some of the class variables and additional",
            "    methods that",
            "",
            "        a. parse the job's input file to create the calculation's input",
            "           nodes that would exist if the calculation were submitted using AiiDa,",
            "        b. bypass the functions of the daemon, and prepare the node's attributes",
            "           such that all the processes (copying of the files to the repository,",
            "           results parsing, ect.) can be performed",
            "",
            "    .. note:: The keyword arguments of PwCalculation are also available.",
            "",
            "    :param remote_workdir: Absolute path to the directory where the job was run.",
            "        The transport of the computer you link ask input to the calculation is",
            "        the transport that will be used to retrieve the calculation's files.",
            "        Therefore, ``remote_workdir`` should be the absolute path to the job's",
            "        directory on that computer.",
            "    :type remote_workdir: str",
            "",
            "    :param input_file_name: The file name of the job's input file.",
            "    :type input_file_name: str",
            "",
            "    :param output_file_name: The file name of the job's output file (i.e. the",
            "        file containing the stdout of QE).",
            "    :type output_file_name: str"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 360,
                "message": "The code failed in finding a valid reciprocal lattice vector."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 464,
                "message": "The S matrix was found to be not positive definite."
              },
              {
                "status": 465,
                "message": "The `zhegvd` failed in the PPCG diagonalization."
              },
              {
                "status": 466,
                "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
              },
              {
                "status": 467,
                "message": "The eigenvector failed to converge."
              },
              {
                "status": 468,
                "message": "The factorization in the Broyden routine failed."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 503,
                "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 542,
                "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.q2r": {
          "description": [
            "`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The force constants file could not be read."
              }
            ]
          }
        },
        "quantumespresso.seekpath_structure_analysis": {
          "description": [
            "Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.",
            "",
            "    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the",
            "    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the",
            "    original structure in which case the k-points are only congruent with the primitive cell.",
            "",
            "    The keyword arguments can be used to specify various Seekpath parameters, such as:",
            "",
            "        with_time_reversal: True",
            "        reference_distance: 0.025",
            "        recipe: 'hpkot'",
            "        threshold: 1e-07",
            "        symprec: 1e-05",
            "        angle_tolerance: -1.0",
            "",
            "    Note that exact parameters that are available and their defaults will depend on your Seekpath version."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.xspectra": {
          "description": [
            "CalcJob implementation for the xspectra.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "core_wfc_data",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Core wavefunction data, generated by the upf2plotcore.sh utility"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The K-point sampling to be used for the XSpectra calculation"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "gamma_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "An optional file containing the data for the broadening function used when  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 313,
                "message": "xiabs was set incorrectly, check and ensure that the index value correctly refers to the atomic species containing the core-hole (where the index starts from 1)."
              },
              {
                "status": 314,
                "message": "xiabs was either set to 0 or less, or was greater than ntyp."
              },
              {
                "status": 330,
                "message": "The xspectra output file could not be read from the retrieved folder."
              },
              {
                "status": 331,
                "message": "The spectrum data file could not be read using NumPy genfromtxt"
              },
              {
                "status": 400,
                "message": "The time limit set for the calculation was exceeded, and the job wrote a save file before exiting."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "muon.find_muon": {
          "description": [
            "FindMuonWorkChain finds the candidate implantation site for a positive muon.",
            "    It first performs DFT relaxation calculations for a set of initial muon sites.",
            "    It then analyzes the results of these calculations and finds candidate muon sites.",
            "    If there are magnetic inequivalent sites not initially, they are recalculated",
            "    It further calculates the muon contact hyperfine field at these candidate sites."
          ],
          "spec": {
            "inputs": [
              {
                "name": "sc_matrix",
                "required": true,
                "valid_types": "List",
                "info": " List of length 1 for supercell size "
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input initial structure"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "mu_spacing",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Minimum distance in Angstrom between two starting muon positions  generated ..."
              },
              {
                "name": "qe",
                "required": false,
                "valid_types": "",
                "info": "Input parameters, settings and options for QE DFT calculations"
              }
            ],
            "outputs": [
              {
                "name": "all_index_uuid",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "all_sites",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "unique_sites",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "unique_sites_hyperfine",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 405,
                "message": "One of the PwRelaxWorkChain subprocesses failed"
              },
              {
                "status": 406,
                "message": "One of the PwBaseWorkChain subprocesses failed"
              },
              {
                "status": 407,
                "message": "One of the PPWorkChain subprocesses failed"
              }
            ]
          }
        },
        "quantumespresso.matdyn.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "matdyn",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pdos": {
          "description": [
            "A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."
          ],
          "spec": {
            "inputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax`  ..."
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` of the `nscf` calculation."
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Em ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "align_to_fermi",
                "required": false,
                "valid_types": "Bool",
                "info": "If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, work directories of all called calculation will be cleaned at  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` of the `scf` calculation."
              },
              {
                "name": "serial_clean",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "If ``True``, calculations will be run in serial, and work directories will  ..."
              }
            ],
            "outputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."
              },
              {
                "status": 401,
                "message": "the SCF sub process failed"
              },
              {
                "status": 402,
                "message": "the NSCF sub process failed"
              },
              {
                "status": 403,
                "message": "the DOS sub process failed"
              },
              {
                "status": 404,
                "message": "the PROJWFC sub process failed"
              },
              {
                "status": 404,
                "message": "both the DOS and PROJWFC sub process failed"
              }
            ]
          }
        },
        "quantumespresso.ph.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ph",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "only_initialization",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 401,
                "message": "The work chain failed to merge the q-points data from multiple `PhCalculation`s because not all q-points were parsed."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pw.bands": {
          "description": [
            "Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
            "",
            "    The logic for the computation of various parameters for the BANDS step is as follows:",
            "",
            "    Number of bands:",
            "        One can specify the number of bands to be used in the BANDS step either directly through the input parameters",
            "        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When",
            "        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being",
            "        used. If the `nbands_factor` is specified the maximum value of the following values will be used:",
            "",
            "        * `nbnd` of the preceding SCF calculation",
            "        * 0.5 * nelectrons * nbands_factor",
            "        * 0.5 * nelectrons + 4",
            "",
            "    Kpoints:",
            "        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the",
            "        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.",
            "        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry",
            "        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that",
            "        of `bands_kpoints_distance` or the SeekPath default if not specified."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the BANDS calculation."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "bands_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Explicit kpoints to use for the BANDS calculation. Specify either this or ` ..."
              },
              {
                "name": "bands_kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Minimum kpoints distance for the BANDS calculation. Specify either this or  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nbands_factor",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The number of bands for the BANDS calculation is that used for the SCF mult ..."
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation  ..."
              }
            ],
            "outputs": [
              {
                "name": "band_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the BANDS `PwBaseWorkChain`."
              },
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "BandsData",
                "info": "The computed band structure."
              },
              {
                "name": "scf_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "primitive_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The normalized and primitivized structure for which the bands are computed."
              },
              {
                "name": "seekpath_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."
              },
              {
                "status": 202,
                "message": "Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."
              },
              {
                "status": 401,
                "message": "The PwRelaxWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "The scf PwBasexWorkChain sub process failed"
              },
              {
                "status": 403,
                "message": "The bands PwBasexWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.pw.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "pw",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "An explicit k-points list or mesh. Either this or `kpoints_distance` has to ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 203,
                "message": "Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 210,
                "message": "Required key for `automatic_parallelization` was not specified.This exit status has been deprecated as the automatic parallellization feature was removed."
              },
              {
                "status": 211,
                "message": "Unrecognized keys were specified for `automatic_parallelization`.This exit status has been deprecated as the automatic parallellization feature was removed."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 310,
                "message": "The calculation failed with a known unrecoverable error."
              },
              {
                "status": 320,
                "message": "The initialization calculation failed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw.relax": {
          "description": [
            "Workchain to relax a structure using Quantum ESPRESSO pw.x."
          ],
          "spec": {
            "inputs": [
              {
                "name": "base",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the main relax loop."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "base_final_scf",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the final scf."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "max_meta_convergence_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of variable cell relax iterations in the meta convergenc ..."
              },
              {
                "name": "meta_convergence",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True` the workchain will perform a meta-convergence on the cell volume."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "volume_convergence",
                "required": false,
                "valid_types": "Float",
                "info": "The volume difference threshold between two consecutive meta convergence it ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The successfully relaxed structure."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "the relax PwBaseWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "the final scf PwBaseWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.q2r.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "q2r",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.xps": {
          "description": [
            "Workchain to compute X-ray photoelectron spectra (XPS) for a given structure.",
            "",
            "    The WorkChain itself firstly calls the PwRelaxWorkChain to relax the input structure if",
            "    required. Then determines the input settings for each XPS calculation automatically using",
            "    ``get_xspectra_structures()``. The input structures are generated from the standardized",
            "    structure by converting each to a supercell with cell dimensions of at least 8.0 angstrom",
            "    in each periodic dimension in order to sufficiently reduce the unphysical interaction",
            "    of the core-hole with neighbouring images. The size of the minimum size requirement can be",
            "    overriden by the user if required. Then the standard Delta-Self-Consistent-Field (\u0394SCF)",
            "    method is used to get the XPS binding energy. Finally, the XPS spectrum is calculated",
            "    using the Voigt profile."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ch_scf",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the basic xps workflow (core-hole SCF)."
              },
              {
                "name": "core_hole_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
              },
              {
                "name": "gipaw_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str",
                "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
              },
              {
                "name": "calc_binding_energy",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, run scf calculation for the supercell."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
              },
              {
                "name": "core_hole_treatments",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set core-hole treatment to all elements present. The ..."
              },
              {
                "name": "correction_energies",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set the correction energy to all elements present. "
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "elements_list",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "The list of elements to be considered for analysis, each must be valid elem ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
              },
              {
                "name": "spglib_settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
              },
              {
                "name": "structure_preparation_settings",
                "required": false,
                "valid_types": "Dict, Float, Int, Bool, Str",
                "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
              },
              {
                "name": "voight_gamma",
                "required": false,
                "valid_types": "Float",
                "info": "The gamma parameter for the Lorenzian broadening in the Voight method."
              },
              {
                "name": "voight_sigma",
                "required": false,
                "valid_types": "Float",
                "info": "The sigma parameter for the gaussian broadening in the Voight method."
              }
            ],
            "outputs": [
              {
                "name": "binding_energies",
                "required": true,
                "valid_types": "Dict",
                "info": "All the binding energy values for each element calculated by the WorkChain."
              },
              {
                "name": "chemical_shifts",
                "required": true,
                "valid_types": "Dict",
                "info": "All the chemical shift values for each element calculated by the WorkChain."
              },
              {
                "name": "final_spectra_be",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element based on binding energy."
              },
              {
                "name": "final_spectra_cls",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element based on chemical shift."
              },
              {
                "name": "output_parameters_ch_scf",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of each ``PwBaseWorkChain`` performed``."
              },
              {
                "name": "supercell_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
              },
              {
                "name": "symmetry_analysis_data",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters from ``get_xspectra_structures()``."
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure from the ``relax`` process."
              },
              {
                "name": "output_parameters_relax",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the relax step."
              },
              {
                "name": "output_parameters_scf",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the scf step."
              },
              {
                "name": "standardized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The standardized crystal structure used to generate structures for XPS sub- ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The Relax sub process failed"
              },
              {
                "status": 402,
                "message": "The SCF Pw sub processes failed"
              },
              {
                "status": 402,
                "message": "One or more CH_SCF Pw sub processes failed"
              }
            ]
          }
        },
        "quantumespresso.xspectra.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO xspectra.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "xspectra",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "An explicit k-points mesh. Either this or `kpoints_distance` has to be prov ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.xspectra.core": {
          "description": [
            "Workchain to compute X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
            "",
            "    The workflow follows the process required to compute the XAS of an input structure: an SCF calculation is performed",
            "    using the provided structure, which is then followed by the calculation of the XAS itself by XSpectra. The",
            "    calculations performed by the WorkChain in a typical run will be:",
            "",
            "    - PwSCF calculation with pw.x of the input structure with a core-hole present.",
            "    - Generation of core-wavefunction data with upf2plotcore.sh (if requested).",
            "    - XAS calculation with xspectra.x to compute the Lanczos coefficients and print the XANES spectra for the",
            "      polarisation vectors requested in the input.",
            "    - Collation of output data from pw.x and xspectra.x calculations, including a combination of XANES dipole spectra",
            "      based on polarisation vectors to represent the powder spectrum of the structure (if requested).",
            "",
            "    If ``run_replot = True`` is set in the inputs (defaults to False), the WorkChain will run a second xspectra.x",
            "    calculation which replots the spectra produced from the ``xs_prod`` step. This option can be very useful for",
            "    obtaining a final spectrum at low levels of broadening (relative to the default of 0.5 eV), particularly as higher",
            "    levels of broadening significantly speed up the convergence of the Lanczos procedure. Inputs for the replot",
            "    calculation are found in the ``xs_plot`` namespace.",
            "",
            "    The core-wavefunction plot derived from the ground-state of the absorbing element can be provided as a top-level",
            "    input or produced by the WorkChain. If left to the WorkChain, the ground-state pseudopotential assigned to the",
            "    absorbing element will be used to generate this data using the upf2plotcore.sh utility script (via the",
            "    ``aiida-shell`` plugin).",
            "",
            "    In its current stage of development, the workflow requires the following:",
            "",
            "    - An input structure where the desired absorbing atom in the system is marked as a separate Kind. The default",
            "      behaviour for the WorkChain is to set the Kind name as 'X', however this can be changed via the `overrides`",
            "      dictionary.",
            "    - A code node for ``upf2plotcore``, configured for the ``aiida-shell`` plugin",
            "      (https://github.com/sphuber/aiida-shell). Alternatively, a ``SinglefileData`` node from a previous ``ShellJob``",
            "      run can be supplied under ``inputs.core_wfc_data``.",
            "    - A suitable pair of pseudopotentials for the element type of the absorbing atom, one for the ground-state occupancy",
            "      which contains GIPAW informtation for the core level of interest for the XAS (e.g. 1s in the case of a K-edge",
            "      calculation) and the other containing a core hole. (For the moment this can be passed either via the",
            "      ``core_hole_pseudos`` field in ``get_builder_from_protocol`` or via the overrides, but will be changed later once",
            "      full families of core-hole pseudopotentials become available)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "eps_vectors",
                "required": true,
                "valid_types": "List",
                "info": "The list of 3-vectors to use in XSpectra sub-processes. The number of sub-l ..."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `pw.x` calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation, with at least one site containing the ..."
              },
              {
                "name": "xs_prod",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `xspectra.x` calculation to compute the Lanczos."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "The name for the Kind representing the absorbing atom in the structure. Mus ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "core_wfc_data",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "The core wavefunction data file extracted from the ground-state pseudo for  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "get_powder_spectrum",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, the WorkChain will combine XANES dipole spectra computed using t ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "run_replot",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              },
              {
                "name": "upf2plotcore_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "The code node required for upf2plotcore.sh configured for ``aiida-shell``.  ..."
              },
              {
                "name": "xs_plot",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the re-plot `xspectra.x` calculation of the Lanczos."
              }
            ],
            "outputs": [
              {
                "name": "parameters_scf",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "parameters_xspectra",
                "required": true,
                "valid_types": "Dict",
                "info": "The output dictionaries of each `XspectraBaseWorkChain` performed"
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": "An XyData node containing all the final spectra produced by the WorkChain."
              },
              {
                "name": "powder_spectrum",
                "required": false,
                "valid_types": "XyData",
                "info": "The simulated powder spectrum"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The SCF sub process failed"
              },
              {
                "status": 402,
                "message": "One or more XSpectra sub processes failed"
              },
              {
                "status": 403,
                "message": "The pseudo for the absorbing element contains no GIPAW information."
              }
            ]
          }
        },
        "quantumespresso.xspectra.crystal": {
          "description": [
            "Workchain to compute all X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
            "",
            "    The WorkChain follows the process required to compute all the K-edge XAS spectra for each",
            "    element in a given structure. The WorkChain itself firstly calls the PwRelaxWorkChain to",
            "    relax the input structure, then determines the input settings for each XAS",
            "    calculation automatically using ``get_xspectra_structures()``:",
            "",
            "        - Firstly the input structure is converted to its conventional standard cell using",
            "          ``spglib`` and detects the space group number for the conventional cell.",
            "        - Symmetry analysis of the standardized structure using ``spglib`` is then used to",
            "          determine the number of non-equivalent atomic sites in the structure for each",
            "          element considered for analysis.",
            "",
            "    Using the symmetry data returned from ``get_xspectra_structures``, input structures for",
            "    the XspectraCoreWorkChain are generated from the standardized structure by converting each",
            "    to a supercell with cell dimensions of at least 8.0 angstroms in each periodic dimension -",
            "    required in order to sufficiently reduce the unphysical interaction of the core-hole with",
            "    neighbouring images. The size of the minimum size requirement can be overriden by the",
            "    user if required. The WorkChain then uses the space group number to set the list of",
            "    polarisation vectors for the ``XspectraCoreWorkChain`` to compute for all subsequent",
            "    calculations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "core",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the basic xspectra workflow (core-hole SCF + XAS."
              },
              {
                "name": "core_hole_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
              },
              {
                "name": "elements_list",
                "required": true,
                "valid_types": "List",
                "info": "The list of elements to be considered for analysis, each must be a valid el ..."
              },
              {
                "name": "gipaw_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str",
                "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
              },
              {
                "name": "core_hole_treatments",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set core-hole treatment to given elements present. T ..."
              },
              {
                "name": "core_wfc_data",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input namespace to provide core wavefunction inputs for each element. Must  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
              },
              {
                "name": "return_all_powder_spectra",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, the WorkChain will return all ``powder_spectrum`` nodes from e ..."
              },
              {
                "name": "spglib_settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
              },
              {
                "name": "structure_preparation_settings",
                "required": false,
                "valid_types": "Dict, Float, Int, Bool, Str",
                "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
              },
              {
                "name": "upf2plotcore_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "Code node for the upf2plotcore.sh ShellJob code."
              }
            ],
            "outputs": [
              {
                "name": "final_spectra",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element"
              },
              {
                "name": "supercell_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
              },
              {
                "name": "symmetry_analysis_data",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters from ``get_xspectra_structures()``."
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure from the ``relax`` process."
              },
              {
                "name": "parameters_relax",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the relax step."
              },
              {
                "name": "parameters_scf",
                "required": false,
                "valid_types": "Dict",
                "info": "The output parameters of each ``PwBaseWorkChain`` performed in each ``Xspec ..."
              },
              {
                "name": "parameters_xspectra",
                "required": false,
                "valid_types": "Dict",
                "info": "The output dictionaries of each `XspectraCalculation` performed"
              },
              {
                "name": "powder_spectra",
                "required": false,
                "valid_types": "XyData",
                "info": "All the spectra generated by the WorkChain."
              },
              {
                "name": "standardized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The standardized crystal structure used to generate structures for XSpectra ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The Relax sub process failed"
              },
              {
                "status": 402,
                "message": "One or more XSpectra workflows failed"
              },
              {
                "status": 403,
                "message": "The pseudos for one or more absorbing elements contain no GIPAW information."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": false,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "ase.ase": {
          "description": [
            "`CalcJob` implementation that can be used to wrap around the ASE calculators."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters for the namelists."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The k-points to use for the calculation."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional settings that control the plugin."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 300,
                "message": "One of the expected output files was missing."
              },
              {
                "status": 301,
                "message": "The log file from the DFT code was not written out."
              },
              {
                "status": 302,
                "message": "Relaxation did not complete."
              },
              {
                "status": 303,
                "message": "SCF Failed."
              },
              {
                "status": 305,
                "message": "Cannot identify what went wrong."
              },
              {
                "status": 306,
                "message": "gpaw could not find the PAW potentials."
              },
              {
                "status": 307,
                "message": "Attribute Error found in the stderr file."
              },
              {
                "status": 308,
                "message": "Fermi level is infinite."
              },
              {
                "status": 400,
                "message": "The calculation ran out of walltime."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "ase.gpaw.base": {
          "description": [
            "Workchain to run a GPAW calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "gpaw",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "k-points to use for the calculation."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": false,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "vasp.immigrant": {
          "description": [
            "Parse VASP output objects stored in a specified directory.",
            "",
            "    Simulate running the VaspCalculation up to the point where it can be",
            "    retrieved and parsed, then hand over control to the runner for the rest.",
            "",
            "    Usage examples",
            "    --------------",
            "    Immigrant calculation can be perfomed as follows.",
            "",
            "    ::",
            "",
            "       code = Code.get_from_string('vasp@local')",
            "       folder = '/home/username/vasp-calc-dir'",
            "       settings = {'parser_settings': {'add_energies': True,",
            "                                       'add_forces': True,",
            "                                       'electronic_step_energies': True}}",
            "       VaspImmigrant = CalculationFactory('vasp.immigrant')",
            "       builder = VaspImmigrant.get_builder_from_folder(code,",
            "                                                       folder,",
            "                                                       settings=settings)",
            "       submit(builder)",
            "",
            "    Instead of ``builder``, inputs dict is obtained similarly as",
            "",
            "    ::",
            "",
            "       code = Code.get_from_string('vasp@local')",
            "       folder = '/home/username/vasp-calc-dir'",
            "       settings = {'parser_settings': {'add_energies': True,",
            "                                       'add_forces': True,",
            "                                       'electronic_step_energies': True}}",
            "       VaspImmigrant = CalculationFactory('vasp.immigrant')",
            "       inputs = VaspImmigrant.get_inputs_from_folder(code,",
            "                                                     folder,",
            "                                                     settings=settings)",
            "       submit(VaspImmigrant, **inputs)",
            "",
            "    Note",
            "    ----",
            "    The defaul metadata is set automatically as follows::",
            "",
            "       {'options': {'max_wallclock_seconds': 1,",
            "        'resources': {'num_machines': 1, 'num_mpiprocs_per_machine': 1}}}",
            "",
            "    Specific scheduler may require setting ``resources`` differently",
            "    (e.g., sge ``'parallel_env'``).",
            "",
            "    ``get_inputs_from_folder`` and ``get_builder_from_folder`` accept several",
            "    kwargs, see the docstring of ``get_inputs_from_folder``."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The kpoints to use (KPOINTS)."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The VASP input parameters (INCAR)."
              },
              {
                "name": "potential",
                "required": true,
                "valid_types": "PotcarData",
                "info": "The potentials (POTCAR)."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": "The input structure (POSCAR)."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The charge density. (CHGCAR)"
              },
              {
                "name": "dynamics",
                "required": false,
                "valid_types": "Dict",
                "info": "The VASP parameters related to ionic dynamics, e.g. flags to set the select ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "remote_workdir",
                "required": false,
                "valid_types": "str",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "A remote folder to restart from if need be"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional parameters not related to VASP itself."
              },
              {
                "name": "wavefunctions",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The wave function coefficients. (WAVECAR)"
              }
            ],
            "outputs": [
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters containing smaller quantities that do not depend on s ..."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density CHGCAR file."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The output k-points."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization"
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The output structure."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output plane wave coefficients file."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 333,
                "message": "VASP did not produce any output and did likely not execute properly."
              },
              {
                "status": 350,
                "message": "the retrieved folder data node could not be accessed."
              },
              {
                "status": 351,
                "message": "the retrieved_temporary folder data node could not be accessed."
              },
              {
                "status": 352,
                "message": "an object that is marked by the parser as critical is missing."
              },
              {
                "status": 700,
                "message": "Calculation did not reach the end of execution."
              },
              {
                "status": 701,
                "message": "The electronic structure is not converged."
              },
              {
                "status": 702,
                "message": "The ionic relaxation is not converged."
              },
              {
                "status": 703,
                "message": "VASP calculation encountered a critical error: {error_message}."
              },
              {
                "status": 704,
                "message": "Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."
              },
              {
                "status": 1001,
                "message": "parsing an object has failed."
              },
              {
                "status": 1002,
                "message": "the parser is not able to parse the {quantity} quantity"
              },
              {
                "status": 1003,
                "message": "the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"
              },
              {
                "status": 1004,
                "message": "the parser is not able to compose one or more output nodes: {nodes}"
              },
              {
                "status": 1005,
                "message": "Overflow detected in XML while parsing."
              }
            ]
          }
        },
        "vasp.neb": {
          "description": [
            "NEB calculations using VASP",
            "",
            "    ------------------------------------",
            "    Calculations for performing NEB calculations.",
            "    NEB calculations requires standard VASP inputs, but POSCAR are placed in",
            "    folder names 00, 01, 02... N for N-1 number of images.",
            "",
            "    Input frames should be placed under the ``neb_images`` input namespace as a dictionary like::",
            "      {",
            "          'image_00': structure_1,",
            "          'image_01': structure_2",
            "          ....",
            "      }",
            "",
            "    Output of individual frames are placed in the corresponding namespace under the same convention."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "final_structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": "The input structure (POSCAR) for the final image."
              },
              {
                "name": "initial_structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": "The input structure (POSCAR) for initial image."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The kpoints to use (KPOINTS)."
              },
              {
                "name": "neb_images",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": "Starting structure for the NEB images"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The VASP input parameters (INCAR)."
              },
              {
                "name": "potential",
                "required": true,
                "valid_types": "PotcarData",
                "info": "The potentials (POTCAR)."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The charge density. (CHGCAR)"
              },
              {
                "name": "dynamics",
                "required": false,
                "valid_types": "Dict",
                "info": "The VASP parameters related to ionic dynamics, e.g. flags to set the select ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "A remote folder to restart from if need be"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional parameters not related to VASP itself."
              },
              {
                "name": "wavefunctions",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The wave function coefficients. (WAVECAR)"
              }
            ],
            "outputs": [
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "Per-image misc output."
              },
              {
                "name": "neb_misc",
                "required": true,
                "valid_types": "Dict",
                "info": "NEB related data combined for each image"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "NEB images"
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "Kpoints for each image."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization for each image."
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output file containing the plane wave coefficients."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 333,
                "message": "VASP did not produce any output files and did likely not execute properly."
              },
              {
                "status": 350,
                "message": "the retrieved folder data node could not be accessed."
              },
              {
                "status": 351,
                "message": "the retrieved_temporary folder data node could not be accessed."
              },
              {
                "status": 352,
                "message": "an object that is marked by the parser as critical is missing."
              },
              {
                "status": 352,
                "message": "a file that is marked by the parser as critical is missing."
              },
              {
                "status": 700,
                "message": "Calculation did not reach the end of execution."
              },
              {
                "status": 701,
                "message": "The electronic structure is not converged."
              },
              {
                "status": 702,
                "message": "The ionic relaxation is not converged."
              },
              {
                "status": 703,
                "message": "VASP calculation encountered a critical error: {error_message}."
              },
              {
                "status": 704,
                "message": "Outputs for diagnosis are missing, please make sure the `neb_data` and `run_status` quantities are requested for parsing."
              },
              {
                "status": 1001,
                "message": "parsing an object has failed."
              },
              {
                "status": 1001,
                "message": "parsing a file has failed."
              },
              {
                "status": 1002,
                "message": "the parser is not able to parse the {quantity} quantity"
              },
              {
                "status": 1003,
                "message": "the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"
              },
              {
                "status": 1004,
                "message": "the parser is not able to compose one or more output nodes: {nodes}"
              },
              {
                "status": 1005,
                "message": "Overflow detected in XML while parsing."
              }
            ]
          }
        },
        "vasp.vasp": {
          "description": [
            "General-purpose VASP calculation.",
            "",
            "    ---------------------------------",
            "    By default retrieves only the 'OUTCAR', 'vasprun.xml', 'EIGENVAL', 'DOSCAR'",
            "    and Wannier90 input / output objects. These objects are deleted after parsing.",
            "    Additional retrieve objects can be specified via the",
            "    ``settings['ADDITIONAL_RETRIEVE_TEMPORARY_LIST']`` input. In addition, if you want to keep",
            "    any objects after parsing, put them in ``settings['ADDITIONAL_RETRIEVE_LIST']`` which is empty",
            "    by default.",
            "",
            "    Floating point precision for writing POSCAR objects can be adjusted using",
            "    ``settings['poscar_precision']``, default: 10",
            "",
            "    The following assumes you are familiar with the AiiDA data structures and",
            "    how to set up and run an AiiDA calculation in general.",
            "",
            "    Example usage::",
            "",
            "        from aiida.orm import CalculationFactory, DataFactory",
            "        from aiida.work import submit",
            "",
            "        proc = CalculationFactory('vasp.vasp').process()",
            "        inputs = proc.get_inputs_template()",
            "        inputs.parameter = <Dict with INCAR params>",
            "        inputs.structure = <StructureData>",
            "        inputs.kpoints = <KpointsData>",
            "        inputs.settings = <Dict with parser settings etc.>",
            "        inputs.potential = DataFactory('vasp.potcar').get_potcars_from_structure(structure, ...)",
            "        inputs.code = <Code representing vasp on your cluster>",
            "",
            "        submit(proc, **inputs)",
            "",
            "    Which is very similar to the workchain example.",
            "",
            "    Since we do not want the content parsers to know about the AiiDA infrastructure,",
            "    i.e. processes etc. we have no access to the exit codes defined on the CalcJob.",
            "    We thus have to deal with failures in parsing directly in the write calls here."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The kpoints to use (KPOINTS)."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The VASP input parameters (INCAR)."
              },
              {
                "name": "potential",
                "required": true,
                "valid_types": "PotcarData",
                "info": "The potentials (POTCAR)."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": "The input structure (POSCAR)."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The charge density. (CHGCAR)"
              },
              {
                "name": "dynamics",
                "required": false,
                "valid_types": "Dict",
                "info": "The VASP parameters related to ionic dynamics, e.g. flags to set the select ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "A remote folder to restart from if need be"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional parameters not related to VASP itself."
              },
              {
                "name": "wavefunctions",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The wave function coefficients. (WAVECAR)"
              }
            ],
            "outputs": [
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters containing smaller quantities that do not depend on s ..."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density CHGCAR file."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The output k-points."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization"
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The output structure."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output plane wave coefficients file."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 333,
                "message": "VASP did not produce any output and did likely not execute properly."
              },
              {
                "status": 350,
                "message": "the retrieved folder data node could not be accessed."
              },
              {
                "status": 351,
                "message": "the retrieved_temporary folder data node could not be accessed."
              },
              {
                "status": 352,
                "message": "an object that is marked by the parser as critical is missing."
              },
              {
                "status": 700,
                "message": "Calculation did not reach the end of execution."
              },
              {
                "status": 701,
                "message": "The electronic structure is not converged."
              },
              {
                "status": 702,
                "message": "The ionic relaxation is not converged."
              },
              {
                "status": 703,
                "message": "VASP calculation encountered a critical error: {error_message}."
              },
              {
                "status": 704,
                "message": "Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."
              },
              {
                "status": 1001,
                "message": "parsing an object has failed."
              },
              {
                "status": 1002,
                "message": "the parser is not able to parse the {quantity} quantity"
              },
              {
                "status": 1003,
                "message": "the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"
              },
              {
                "status": 1004,
                "message": "the parser is not able to compose one or more output nodes: {nodes}"
              },
              {
                "status": 1005,
                "message": "Overflow detected in XML while parsing."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "vasp.bands": {
          "description": [
            "Extract the band structure using k-point paths fetched from SeeKpath."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "dynamics",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "potential_family",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "potential_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "\n            The folder to restart in, which contains the outputs from the  ..."
              },
              {
                "name": "smearing",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": ""
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "\n            The maximum number of iterations to perform.\n            "
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "Site magnetization to be used as MAGMOM"
              },
              {
                "name": "verbose",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, enable more detailed output during workchain executio ..."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters containing smaller quantities that do not depend on s ..."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density CHGCAR file."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The output k-points."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization"
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The output structure."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output plane wave coefficients file."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 420,
                "message": "no called workchain detected"
              },
              {
                "status": 500,
                "message": "unknown error detected in the bands workchain"
              },
              {
                "status": 2001,
                "message": "BandsData not found in exposed_ouputs"
              }
            ]
          }
        },
        "vasp.converge": {
          "description": [
            "A workchain to perform convergence tests."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "converge",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "dynamics",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "potential_family",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "potential_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": ""
              },
              {
                "name": "verify",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "\n            The maximum number of iterations to perform.\n            "
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "\n            The restart folder from a previous workchain run that is going ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "Site magnetization to be used as MAGMOM"
              },
              {
                "name": "verbose",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, enable more detailed output during workchain executio ..."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "converge",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters containing smaller quantities that do not depend on s ..."
              },
              {
                "name": "relax",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density CHGCAR file."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The output k-points."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization"
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The output structure."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output plane wave coefficients file."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 420,
                "message": "no called workchain detected"
              },
              {
                "status": 500,
                "message": "unknown error detected in the converge workchain"
              }
            ]
          }
        },
        "vasp.immigrant": {
          "description": [
            "Import a VASP run executed in the directory specified by folder_path."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
              },
              {
                "name": "folder_path",
                "required": false,
                "valid_types": "Str",
                "info": "Deprecated."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "\n            The maximum number of iterations to perform.\n            "
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "potential_family",
                "required": false,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "potential_mapping",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_workdir",
                "required": false,
                "valid_types": "str",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "use_chgcar",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, WavefunData (of WAVECAR) is attached.\n            "
              },
              {
                "name": "use_wavecar",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, WavefunData (of WAVECAR) is attached.\n            "
              },
              {
                "name": "verbose",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, enable more detailed output during workchain executio ..."
              }
            ],
            "outputs": [
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters containing smaller quantities that do not depend on s ..."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density CHGCAR file."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The output k-points."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization"
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The output structure."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output plane wave coefficients file."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "vasp.master": {
          "description": [
            "The master workchain that selects sub workchains to perform necessary calculations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "converge",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "dynamics",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "potential_family",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "potential_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": ""
              },
              {
                "name": "verify",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": ""
              },
              {
                "name": "extract_bands",
                "required": false,
                "valid_types": "Bool",
                "info": "\n                   Do you want to extract the band structure?\n             ..."
              },
              {
                "name": "extract_dos",
                "required": false,
                "valid_types": "Bool",
                "info": "\n                   Do you want to extract the density of states?\n          ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float",
                "info": "\n                   The maximum distance between k-points in inverse AA.\n   ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "\n            The maximum number of iterations to perform.\n            "
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "\n            The restart folder from a previous workchain run that is going ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "Site magnetization to be used as MAGMOM"
              },
              {
                "name": "verbose",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, enable more detailed output during workchain executio ..."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "bands",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 420,
                "message": "no called workchain detected"
              },
              {
                "status": 500,
                "message": "unknown error detected in the master workchain"
              }
            ]
          }
        },
        "vasp.neb": {
          "description": [
            "The NEB workchain.",
            "",
            "    -------------------",
            "    Error handling enriched wrapper around VaspNEBCalculation.",
            "",
            "    Deliberately conserves most of the interface (required inputs) of the VaspNEBCalculation class, but",
            "    makes it possible for a user to interact with a workchain and not a calculation.",
            "",
            "    In addition, implement restarts of calculation when the calculation is net full converged for error handling."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "dynamics",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "final_structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": "The input structure (POSCAR) for the final image."
              },
              {
                "name": "initial_structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": "The input structure (POSCAR) for initial image."
              },
              {
                "name": "neb_images",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": "Starting structure for the NEB images"
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The VASP input parameters (INCAR)."
              },
              {
                "name": "potential_family",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "potential_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The charge density. (CHGCAR)"
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "kpoints_spacing",
                "required": false,
                "valid_types": "Float",
                "info": "Spacing for the kpoints in units A^-1 * 2pi (CASTEP style `kpoints_mp_spaci ..."
              },
              {
                "name": "kpoints_spacing_vasp",
                "required": false,
                "valid_types": "Float",
                "info": "Spacing for the kpoints in units A^-1 (VASP style)"
              },
              {
                "name": "ldau_mapping",
                "required": false,
                "valid_types": "Dict",
                "info": "Mappings, see the doc string of 'get_ldau_keys'"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "\n            The maximum number of iterations to perform.\n            "
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "A remote folder to restart from if need be"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional parameters not related to VASP itself."
              },
              {
                "name": "verbose",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, enable more detailed output during workchain executio ..."
              },
              {
                "name": "wavefunctions",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The wave function coefficients. (WAVECAR)"
              }
            ],
            "outputs": [
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "Per-image misc output."
              },
              {
                "name": "neb_misc",
                "required": true,
                "valid_types": "Dict",
                "info": "NEB related data combined for each image"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "NEB images"
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "Kpoints for each image."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization for each image."
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output file containing the plane wave coefficients."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 501,
                "message": "Unrecoverable error in launched NEB calculations."
              },
              {
                "status": 700,
                "message": "the user did not supply a potential family name"
              },
              {
                "status": 701,
                "message": "ValueError was returned from get_potcars_from_structure"
              },
              {
                "status": 702,
                "message": "the potential does not exist"
              },
              {
                "status": 703,
                "message": "the exception: {exception} was thrown while massaging the parameters"
              }
            ]
          }
        },
        "vasp.relax": {
          "description": [
            "Structure relaxation workchain."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "dynamics",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "potential_family",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "potential_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "relax",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": ""
              },
              {
                "name": "verify",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "\n            The maximum number of iterations to perform.\n            "
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "\n            The restart folder from a previous workchain run that is going ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "Site magnetization to be used as MAGMOM"
              },
              {
                "name": "verbose",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, enable more detailed output during workchain executio ..."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters containing smaller quantities that do not depend on s ..."
              },
              {
                "name": "relax",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density CHGCAR file."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The output k-points."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization"
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The output structure."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output plane wave coefficients file."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "the called workchain does not contain the necessary relaxed output structure"
              },
              {
                "status": 420,
                "message": "no called workchain detected"
              },
              {
                "status": 500,
                "message": "unknown error detected in the relax workchain"
              },
              {
                "status": 502,
                "message": "there was an error overriding the parameters"
              }
            ]
          }
        },
        "vasp.vasp": {
          "description": [
            "The VASP workchain.",
            "",
            "    -------------------",
            "    Error handling enriched wrapper around VaspCalculation.",
            "",
            "    Deliberately conserves most of the interface (required inputs) of the VaspCalculation class, but",
            "    makes it possible for a user to interact with a workchain and not a calculation.",
            "",
            "    This is intended to be used instead of directly submitting a VaspCalculation,",
            "    so that future features like",
            "    automatic restarting, error checking etc. can be propagated to higher level workchains",
            "    automatically by implementing them here.",
            "",
            "    Handlers are implemented to try fix common problems and improves the robustness.",
            "    Individual handlers can be enabled/disabled by setting the ``handler_overrides`` input port.",
            "    Additional settings may be passed under the \"settings\" input, which is also forwarded to the",
            "    calculations. The avaliable options are:",
            "",
            "    - ``USE_WAVECAR_FOR_RESTART`` wether calculation restarts should use the WAVECAR. The default is ``True``.",
            "",
            "    Usage::",
            "",
            "        from aiida.common.extendeddicts import AttributeDict",
            "        from aiida.work import submit",
            "        basevasp = WorkflowFactory('vasp.vasp')",
            "        inputs = basevasp.get_builder()",
            "        inputs = AttributeDict()",
            "        ## ... set inputs",
            "        submit(basevasp, **inputs)",
            "",
            "    To see a working example, including generation of input nodes from scratch, please",
            "    refer to ``examples/run_vasp_lean.py``."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "dynamics",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "potential_family",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "potential_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": ""
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "\n            The maximum number of iterations to perform.\n            "
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "\n            The restart folder from a previous workchain run that is going ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "Site magnetization to be used as MAGMOM"
              },
              {
                "name": "verbose",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, enable more detailed output during workchain executio ..."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters containing smaller quantities that do not depend on s ..."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density CHGCAR file."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The output k-points."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization"
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The output structure."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output plane wave coefficients file."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "the calculation is missing at least one required output in the restart workchain"
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 400,
                "message": "the run_calculation step did not successfully add a calculation node to the context"
              },
              {
                "status": 401,
                "message": "the maximum number of iterations was exceeded"
              },
              {
                "status": 402,
                "message": "the calculation finished with an unexpected calculation state"
              },
              {
                "status": 403,
                "message": "the calculation experienced and unexpected failure"
              },
              {
                "status": 404,
                "message": "the calculation failed to submit, twice in a row"
              },
              {
                "status": 405,
                "message": "the calculation failed for an unknown reason, twice in a row"
              },
              {
                "status": 500,
                "message": "Missing critical output for inspecting the status of the calculation."
              },
              {
                "status": 501,
                "message": "Cannot handle the error - inputs are likely need to be revised manually. Message: {message}"
              },
              {
                "status": 502,
                "message": "Cannot handle the error - the last calculation did not reach the end of execution."
              },
              {
                "status": 503,
                "message": "Cannot handle the error - the last calculation did not reach electronic convergence."
              },
              {
                "status": 504,
                "message": "The ionic relaxation is not converged."
              },
              {
                "status": 505,
                "message": "At least one of the ionic steps during the relaxation has did not have converged electronic structure."
              },
              {
                "status": 700,
                "message": "the user did not supply a potential family name"
              },
              {
                "status": 701,
                "message": "ValueError was returned from get_potcars_from_structure"
              },
              {
                "status": 702,
                "message": "the potential does not exist"
              },
              {
                "status": 703,
                "message": "the exception: {exception} was thrown while massaging the parameters"
              }
            ]
          }
        },
        "vasp.verify": {
          "description": [
            "Verify the calculations based on basic principles from physics, chemistry and material science."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "dynamics",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "potential_family",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "potential_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, CifData",
                "info": ""
              },
              {
                "name": "verify",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "\n            The maximum number of iterations to perform.\n            "
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "\n            The restart folder from a previous workchain run that is going ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "Site magnetization to be used as MAGMOM"
              },
              {
                "name": "verbose",
                "required": false,
                "valid_types": "Bool",
                "info": "\n            If True, enable more detailed output during workchain executio ..."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "custom_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "misc",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters containing smaller quantities that do not depend on s ..."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The output band structure."
              },
              {
                "name": "born_charges",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Born effective charges."
              },
              {
                "name": "charge_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output charge density."
              },
              {
                "name": "chgcar",
                "required": false,
                "valid_types": "ChargedensityData",
                "info": "The output charge density CHGCAR file."
              },
              {
                "name": "dielectrics",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dielectric functions."
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dos."
              },
              {
                "name": "dynmat",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output dynamical matrix."
              },
              {
                "name": "energies",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output total energies."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output forces."
              },
              {
                "name": "hessian",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output Hessian matrix."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "The output k-points."
              },
              {
                "name": "magnetization_density",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output magnetization density."
              },
              {
                "name": "projectors",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output projectors of decomposition."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "site_magnetization",
                "required": false,
                "valid_types": "Dict",
                "info": "The output of the site magnetization"
              },
              {
                "name": "stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "The output stress."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The output structure."
              },
              {
                "name": "trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "The output trajectory data."
              },
              {
                "name": "wavecar",
                "required": false,
                "valid_types": "WavefunData",
                "info": "The output plane wave coefficients file."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "the sun is shining"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 420,
                "message": "no called workchain detected"
              },
              {
                "status": 500,
                "message": "unknown error detected in the verify workchain"
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": false,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.cp": {
          "description": [
            "`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\n"
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 304,
                "message": "The retrieved folder contains multiple XML files."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The required XML file could not be read."
              },
              {
                "status": 330,
                "message": "The required POS file could not be read."
              },
              {
                "status": 340,
                "message": "The required trajectory data could not be read."
              }
            ]
          }
        },
        "quantumespresso.create_kpoints_from_distance": {
          "description": [
            "Generate a uniformly spaced kpoint mesh for a given structure.",
            "",
            "    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.",
            "",
            "    :param structure: the StructureData to which the mesh should apply",
            "    :param distance: a Float with the desired distance between kpoints in reciprocal space",
            "    :param force_parity: a Bool to specify whether the generated mesh should maintain parity",
            "    :returns: a KpointsData with the generated mesh"
          ],
          "spec": {
            "inputs": [
              {
                "name": "distance",
                "required": true,
                "valid_types": "Data",
                "info": "a Float with the desired distance between kpoints in reciprocal space"
              },
              {
                "name": "force_parity",
                "required": true,
                "valid_types": "Data",
                "info": "a Bool to specify whether the generated mesh should maintain parity"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": "the StructureData to which the mesh should apply"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.dos": {
          "description": [
            "`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The dos file could not be read from the retrieved folder."
              }
            ]
          }
        },
        "quantumespresso.epw": {
          "description": [
            "`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine kpoint mesh"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse kpoint mesh"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder_nscf",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed nscf `PwCalculation`"
              },
              {
                "name": "parent_folder_ph",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PhCalculation`"
              },
              {
                "name": "qfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine qpoint mesh"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse qpoint mesh"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.matdyn": {
          "description": [
            "`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "Kpoints on which to calculate the phonon frequencies."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The output frequencies file could not be read from the retrieved folder."
              },
              {
                "status": 410,
                "message": "Number of kpoints not found in the output data"
              },
              {
                "status": 411,
                "message": "Number of kpoints in the inputs is not commensurate with those in the output"
              }
            ]
          }
        },
        "quantumespresso.merge_ph_outputs": {
          "description": [
            "Calcfunction to merge outputs from multiple `ph.x` calculations with different q-points."
          ],
          "spec": {
            "inputs": [
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.namelists": {
          "description": [
            "`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "quantumespresso.neb": {
          "description": [
            "Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."
          ],
          "spec": {
            "inputs": [
              {
                "name": "first_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Initial structure"
              },
              {
                "name": "last_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Final structure"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "NEB-specific input parameters"
              },
              {
                "name": "pw",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              }
            ],
            "outputs": [
              {
                "name": "output_mep",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The original and interpolated energy profiles along the minimum-energy path ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters dictionary of the NEB calculation"
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "iteration_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.open_grid": {
          "description": [
            "``CalcJob`` implementation for the ``open_grid.x`` code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a completed `PwCalculation` on an irreducible Brilloui ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The explicit list of kpoints of the unfolded kmesh"
              },
              {
                "name": "kpoints_mesh",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The dimensions of the unfolded kmesh"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 312,
                "message": "Found rotation or fractional translation not compatible with FFT grid."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message."
              },
              {
                "status": 350,
                "message": "Mismatch between kmesh dimensions and number of kpoints."
              }
            ]
          }
        },
        "quantumespresso.ph": {
          "description": [
            "`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PwCalculation`"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "qpoint mesh"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The minimization cycle did not reach self-consistency."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              }
            ]
          }
        },
        "quantumespresso.pp": {
          "description": [
            "`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job is performed."
              }
            ],
            "outputs": [
              {
                "name": "output_data",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_data_multiple",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The parent folder did not contain the required XML output file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete."
              },
              {
                "status": 330,
                "message": "The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."
              },
              {
                "status": 331,
                "message": "The formatted data output file `{filename}` could not be read."
              },
              {
                "status": 332,
                "message": "The data file format is not supported by the parser"
              },
              {
                "status": 333,
                "message": "The formatted data output file `{filename}` could not be parsed"
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.projwfc": {
          "description": [
            "`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.",
            "",
            "    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch",
            "    wavefunctions onto atomic orbitals.",
            "",
            "    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "Dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_down",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_up",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "projections",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_down",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_up",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 330,
                "message": "The pdos_tot file could not be read from the retrieved folder."
              },
              {
                "status": 340,
                "message": "An exception was raised parsing bands and projections."
              }
            ]
          }
        },
        "quantumespresso.pw": {
          "description": [
            "`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 360,
                "message": "The code failed in finding a valid reciprocal lattice vector."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 464,
                "message": "The S matrix was found to be not positive definite."
              },
              {
                "status": 465,
                "message": "The `zhegvd` failed in the PPCG diagonalization."
              },
              {
                "status": 466,
                "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
              },
              {
                "status": 467,
                "message": "The eigenvector failed to converge."
              },
              {
                "status": 468,
                "message": "The factorization in the Broyden routine failed."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 503,
                "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 542,
                "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw2gw": {
          "description": [
            "`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "eps",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation.`"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "The eps*.dat output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The eps*.dat output files do not have the expected shape (N, 2)."
              },
              {
                "status": 331,
                "message": "The eps*.dat output files contains different values of energies."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.pw2wannier90": {
          "description": [
            "`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.",
            "",
            "    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "nnkp_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "A SinglefileData containing the .nnkp file generated by wannier90.x -pp"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message"
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              }
            ]
          }
        },
        "quantumespresso.pwimmigrant": {
          "description": [
            "Create a PwCalculation object that can be used to import old jobs.",
            "",
            "    This is a sublass of aiida_quantumespresso.calculations.PwCalculation",
            "    with slight modifications to some of the class variables and additional",
            "    methods that",
            "",
            "        a. parse the job's input file to create the calculation's input",
            "           nodes that would exist if the calculation were submitted using AiiDa,",
            "        b. bypass the functions of the daemon, and prepare the node's attributes",
            "           such that all the processes (copying of the files to the repository,",
            "           results parsing, ect.) can be performed",
            "",
            "    .. note:: The keyword arguments of PwCalculation are also available.",
            "",
            "    :param remote_workdir: Absolute path to the directory where the job was run.",
            "        The transport of the computer you link ask input to the calculation is",
            "        the transport that will be used to retrieve the calculation's files.",
            "        Therefore, ``remote_workdir`` should be the absolute path to the job's",
            "        directory on that computer.",
            "    :type remote_workdir: str",
            "",
            "    :param input_file_name: The file name of the job's input file.",
            "    :type input_file_name: str",
            "",
            "    :param output_file_name: The file name of the job's output file (i.e. the",
            "        file containing the stdout of QE).",
            "    :type output_file_name: str"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception: {exception}"
              },
              {
                "status": 360,
                "message": "The code failed in finding a valid reciprocal lattice vector."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 464,
                "message": "The S matrix was found to be not positive definite."
              },
              {
                "status": 465,
                "message": "The `zhegvd` failed in the PPCG diagonalization."
              },
              {
                "status": 466,
                "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
              },
              {
                "status": 467,
                "message": "The eigenvector failed to converge."
              },
              {
                "status": 468,
                "message": "The factorization in the Broyden routine failed."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 503,
                "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 542,
                "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.q2r": {
          "description": [
            "`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The force constants file could not be read."
              }
            ]
          }
        },
        "quantumespresso.seekpath_structure_analysis": {
          "description": [
            "Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.",
            "",
            "    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the",
            "    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the",
            "    original structure in which case the k-points are only congruent with the primitive cell.",
            "",
            "    The keyword arguments can be used to specify various Seekpath parameters, such as:",
            "",
            "        with_time_reversal: True",
            "        reference_distance: 0.025",
            "        recipe: 'hpkot'",
            "        threshold: 1e-07",
            "        symprec: 1e-05",
            "        angle_tolerance: -1.0",
            "",
            "    Note that exact parameters that are available and their defaults will depend on your Seekpath version."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.xspectra": {
          "description": [
            "CalcJob implementation for the xspectra.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "core_wfc_data",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Core wavefunction data, generated by the upf2plotcore.sh utility"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The K-point sampling to be used for the XSpectra calculation"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "gamma_file",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "An optional file containing the data for the broadening function used when  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the namelists in the input file."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 313,
                "message": "xiabs was set incorrectly, check and ensure that the index value correctly refers to the atomic species containing the core-hole (where the index starts from 1)."
              },
              {
                "status": 314,
                "message": "xiabs was either set to 0 or less, or was greater than ntyp."
              },
              {
                "status": 330,
                "message": "The xspectra output file could not be read from the retrieved folder."
              },
              {
                "status": 331,
                "message": "The spectrum data file could not be read using NumPy genfromtxt"
              },
              {
                "status": 400,
                "message": "The time limit set for the calculation was exceeded, and the job wrote a save file before exiting."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "qecpworkchain.cp": {
          "description": [
            "No description available"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp_code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "cp_resources_cg_list",
                "required": true,
                "valid_types": "List",
                "info": "Same as cp_resources_cp_list but when doing a CG. The CG uses a different a ..."
              },
              {
                "name": "cp_resources_cp_list",
                "required": true,
                "valid_types": "List",
                "info": "List of dictionary like the following:\n{\n 'resources' : {\n   'num_machines' ..."
              },
              {
                "name": "ecutwfc",
                "required": true,
                "valid_types": "Float",
                "info": "wavefunction cutoff (Ry), like in the QE input"
              },
              {
                "name": "pseudo_family",
                "required": true,
                "valid_types": "Str",
                "info": "pseudopotential family to use, as in usual aiida operations"
              },
              {
                "name": "pw_code",
                "required": true,
                "valid_types": "Code",
                "info": "input pw code (used to calculate force ratio)"
              },
              {
                "name": "pw_resources_list",
                "required": true,
                "valid_types": "List",
                "info": "Same as cp_resources_cp_list but for pw.x code."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, TrajectoryData",
                "info": "Input structure. If a trajectory is given, the workchain will use its last  ..."
              },
              {
                "name": "thermobarostat_points",
                "required": true,
                "valid_types": "List",
                "info": "List of dicts, each with the format [ { \"temperature_K\": 1000, \"pressure_KB ..."
              },
              {
                "name": "additional_parameters_cp",
                "required": false,
                "valid_types": "Dict",
                "info": "parameters that will be included in the settings input of the QE CP plugin. ..."
              },
              {
                "name": "adjust_ionic_mass",
                "required": false,
                "valid_types": "Bool",
                "info": "Multiply the mass of the ions by the corresponding force ration between the ..."
              },
              {
                "name": "benchmark_emass_dt_walltime_s",
                "required": false,
                "valid_types": "Float",
                "info": "same as benchmark_parallel_walltime_s but for dermining the best electronic ..."
              },
              {
                "name": "benchmark_parallel_walltime_s",
                "required": false,
                "valid_types": "Float",
                "info": "time requested to the scheduler during the test for finding the best parall ..."
              },
              {
                "name": "cmdline_cp",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "additional command line parameters of the cp verlet caclulations only (for  ..."
              },
              {
                "name": "default_nose_frequency",
                "required": false,
                "valid_types": "Float",
                "info": "default nose frequency when a frequency cannot be estimated from the vibrat ..."
              },
              {
                "name": "dt",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "timestep in atomic units, if not automatically chosen."
              },
              {
                "name": "dt_start_stop_step",
                "required": false,
                "valid_types": "List",
                "info": "list of timesteps to try. Timesteps are changed to better integrate the equ ..."
              },
              {
                "name": "emass",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "electronic mass, atomic mass units, if not automatically chosen"
              },
              {
                "name": "emass_list",
                "required": false,
                "valid_types": "List",
                "info": "list of electronic masses to try. The emass is selected in order to satisfy ..."
              },
              {
                "name": "initial_atomic_velocities_A_ps",
                "required": false,
                "valid_types": "ArrayData, NoneType",
                "info": "optional input initial velocities in angstrom over picoseconds"
              },
              {
                "name": "max_slope_const",
                "required": false,
                "valid_types": "Float",
                "info": "max slope in K/ps of the constant of motion linear fit."
              },
              {
                "name": "max_slope_ekinc",
                "required": false,
                "valid_types": "Float",
                "info": "max slope in K/ps of the ekinc linear fit. If not satisfied try to change e ..."
              },
              {
                "name": "max_slope_min_emass",
                "required": false,
                "valid_types": "Float",
                "info": "minimum possible value of electronic mass that can be set by the max_slope  ..."
              },
              {
                "name": "max_slope_min_ps",
                "required": false,
                "valid_types": "Float",
                "info": "minimum required lenght in ps of the last trajectory to do the linear fit o ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "min_traj_steps_vdos",
                "required": false,
                "valid_types": "Int",
                "info": "minimum number of steps to consider the calculated vibrational spectrum max ..."
              },
              {
                "name": "minimum_nose_frequency",
                "required": false,
                "valid_types": "Float",
                "info": "minimum nose frequency: if the frequency estimated from the vibrational spe ..."
              },
              {
                "name": "nstep_initial_cg",
                "required": false,
                "valid_types": "Int",
                "info": "At the beginning of the simulation the CP algorithm is not used. This is th ..."
              },
              {
                "name": "nstep_parallel_test",
                "required": false,
                "valid_types": "Int",
                "info": "the benchmark simulations will be that long, if performed"
              },
              {
                "name": "number_of_pw_per_trajectory",
                "required": false,
                "valid_types": "Int",
                "info": "Number of pw submitted for every trajectory during calculation of force rat ..."
              },
              {
                "name": "nve_required_picoseconds",
                "required": false,
                "valid_types": "Float",
                "info": "The equilibrated NVE simulation will last at least this number of picosecon ..."
              },
              {
                "name": "pressure_tolerance",
                "required": false,
                "valid_types": "Float",
                "info": "Pressure tolerance in kBar used to say if the npt is equilibrated. If not s ..."
              },
              {
                "name": "skip_emass_dt_test",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              },
              {
                "name": "skip_parallel_test",
                "required": false,
                "valid_types": "Bool",
                "info": "do not run run benchmarks to discover a good internal Quantum Espresso para ..."
              },
              {
                "name": "skip_thermobarostat",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              },
              {
                "name": "structure_kinds",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "These kinds will be used to override or set the masses of the various atomi ..."
              },
              {
                "name": "target_force_ratio",
                "required": false,
                "valid_types": "Float",
                "info": "The forces calculated by the Car-Parrinello method are affected by two type ..."
              },
              {
                "name": "temperature_tolerance",
                "required": false,
                "valid_types": "Float",
                "info": "Temperature tolerance in K used to say if the npt is equilibrated. If not s ..."
              },
              {
                "name": "tempw_initial_random",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "If provided, sets the initial temperature when randomly initializing the st ..."
              }
            ],
            "outputs": [
              {
                "name": "cmdline_cp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "dt",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "emass",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "full_traj",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "kinds",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nve_prod_traj",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The initial cg steps failed. I cannot start to work."
              },
              {
                "status": 402,
                "message": "Nose-Hoover thermostat failed."
              },
              {
                "status": 403,
                "message": "Final cg after Nose-Hoover failed."
              },
              {
                "status": 404,
                "message": "Error in the NVE simulation"
              },
              {
                "status": 405,
                "message": "The simulations are calculating very expensive random numbers. There is something wrong (cutoff? metal? boo?)"
              },
              {
                "status": 406,
                "message": "Wrong input parameters"
              },
              {
                "status": 407,
                "message": "Parallel test was not succesful, maybe there is something more wrong."
              },
              {
                "status": 408,
                "message": "Multiple errors in the simulation that cannot fix."
              },
              {
                "status": 409,
                "message": "This is a bug in the workchain."
              }
            ]
          }
        },
        "quantumespresso.matdyn.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "matdyn",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pdos": {
          "description": [
            "A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."
          ],
          "spec": {
            "inputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax`  ..."
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` of the `nscf` calculation."
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Em ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "align_to_fermi",
                "required": false,
                "valid_types": "Bool",
                "info": "If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, work directories of all called calculation will be cleaned at  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` of the `scf` calculation."
              },
              {
                "name": "serial_clean",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "If ``True``, calculations will be run in serial, and work directories will  ..."
              }
            ],
            "outputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."
              },
              {
                "status": 401,
                "message": "the SCF sub process failed"
              },
              {
                "status": 402,
                "message": "the NSCF sub process failed"
              },
              {
                "status": 403,
                "message": "the DOS sub process failed"
              },
              {
                "status": 404,
                "message": "the PROJWFC sub process failed"
              },
              {
                "status": 404,
                "message": "both the DOS and PROJWFC sub process failed"
              }
            ]
          }
        },
        "quantumespresso.ph.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ph",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "only_initialization",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 401,
                "message": "The work chain failed to merge the q-points data from multiple `PhCalculation`s because not all q-points were parsed."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pw.bands": {
          "description": [
            "Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
            "",
            "    The logic for the computation of various parameters for the BANDS step is as follows:",
            "",
            "    Number of bands:",
            "        One can specify the number of bands to be used in the BANDS step either directly through the input parameters",
            "        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When",
            "        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being",
            "        used. If the `nbands_factor` is specified the maximum value of the following values will be used:",
            "",
            "        * `nbnd` of the preceding SCF calculation",
            "        * 0.5 * nelectrons * nbands_factor",
            "        * 0.5 * nelectrons + 4",
            "",
            "    Kpoints:",
            "        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the",
            "        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.",
            "        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry",
            "        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that",
            "        of `bands_kpoints_distance` or the SeekPath default if not specified."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the BANDS calculation."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "bands_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Explicit kpoints to use for the BANDS calculation. Specify either this or ` ..."
              },
              {
                "name": "bands_kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Minimum kpoints distance for the BANDS calculation. Specify either this or  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nbands_factor",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The number of bands for the BANDS calculation is that used for the SCF mult ..."
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation  ..."
              }
            ],
            "outputs": [
              {
                "name": "band_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the BANDS `PwBaseWorkChain`."
              },
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "BandsData",
                "info": "The computed band structure."
              },
              {
                "name": "scf_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "primitive_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The normalized and primitivized structure for which the bands are computed."
              },
              {
                "name": "seekpath_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."
              },
              {
                "status": 202,
                "message": "Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."
              },
              {
                "status": 401,
                "message": "The PwRelaxWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "The scf PwBasexWorkChain sub process failed"
              },
              {
                "status": 403,
                "message": "The bands PwBasexWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.pw.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "pw",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "An explicit k-points list or mesh. Either this or `kpoints_distance` has to ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 203,
                "message": "Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 210,
                "message": "Required key for `automatic_parallelization` was not specified.This exit status has been deprecated as the automatic parallellization feature was removed."
              },
              {
                "status": 211,
                "message": "Unrecognized keys were specified for `automatic_parallelization`.This exit status has been deprecated as the automatic parallellization feature was removed."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 310,
                "message": "The calculation failed with a known unrecoverable error."
              },
              {
                "status": 320,
                "message": "The initialization calculation failed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw.relax": {
          "description": [
            "Workchain to relax a structure using Quantum ESPRESSO pw.x."
          ],
          "spec": {
            "inputs": [
              {
                "name": "base",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the main relax loop."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "base_final_scf",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for the `PwBaseWorkChain` for the final scf."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "max_meta_convergence_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of variable cell relax iterations in the meta convergenc ..."
              },
              {
                "name": "meta_convergence",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True` the workchain will perform a meta-convergence on the cell volume."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "volume_convergence",
                "required": false,
                "valid_types": "Float",
                "info": "The volume difference threshold between two consecutive meta convergence it ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The successfully relaxed structure."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "the relax PwBaseWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "the final scf PwBaseWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.q2r.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "q2r",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.xps": {
          "description": [
            "Workchain to compute X-ray photoelectron spectra (XPS) for a given structure.",
            "",
            "    The WorkChain itself firstly calls the PwRelaxWorkChain to relax the input structure if",
            "    required. Then determines the input settings for each XPS calculation automatically using",
            "    ``get_xspectra_structures()``. The input structures are generated from the standardized",
            "    structure by converting each to a supercell with cell dimensions of at least 8.0 angstrom",
            "    in each periodic dimension in order to sufficiently reduce the unphysical interaction",
            "    of the core-hole with neighbouring images. The size of the minimum size requirement can be",
            "    overriden by the user if required. Then the standard Delta-Self-Consistent-Field (\u0394SCF)",
            "    method is used to get the XPS binding energy. Finally, the XPS spectrum is calculated",
            "    using the Voigt profile."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ch_scf",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the basic xps workflow (core-hole SCF)."
              },
              {
                "name": "core_hole_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
              },
              {
                "name": "gipaw_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str",
                "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
              },
              {
                "name": "calc_binding_energy",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, run scf calculation for the supercell."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
              },
              {
                "name": "core_hole_treatments",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set core-hole treatment to all elements present. The ..."
              },
              {
                "name": "correction_energies",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set the correction energy to all elements present. "
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "elements_list",
                "required": false,
                "valid_types": "List, NoneType",
                "info": "The list of elements to be considered for analysis, each must be valid elem ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
              },
              {
                "name": "spglib_settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
              },
              {
                "name": "structure_preparation_settings",
                "required": false,
                "valid_types": "Dict, Float, Int, Bool, Str",
                "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
              },
              {
                "name": "voight_gamma",
                "required": false,
                "valid_types": "Float",
                "info": "The gamma parameter for the Lorenzian broadening in the Voight method."
              },
              {
                "name": "voight_sigma",
                "required": false,
                "valid_types": "Float",
                "info": "The sigma parameter for the gaussian broadening in the Voight method."
              }
            ],
            "outputs": [
              {
                "name": "binding_energies",
                "required": true,
                "valid_types": "Dict",
                "info": "All the binding energy values for each element calculated by the WorkChain."
              },
              {
                "name": "chemical_shifts",
                "required": true,
                "valid_types": "Dict",
                "info": "All the chemical shift values for each element calculated by the WorkChain."
              },
              {
                "name": "final_spectra_be",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element based on binding energy."
              },
              {
                "name": "final_spectra_cls",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element based on chemical shift."
              },
              {
                "name": "output_parameters_ch_scf",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of each ``PwBaseWorkChain`` performed``."
              },
              {
                "name": "supercell_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
              },
              {
                "name": "symmetry_analysis_data",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters from ``get_xspectra_structures()``."
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure from the ``relax`` process."
              },
              {
                "name": "output_parameters_relax",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the relax step."
              },
              {
                "name": "output_parameters_scf",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the scf step."
              },
              {
                "name": "standardized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The standardized crystal structure used to generate structures for XPS sub- ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The Relax sub process failed"
              },
              {
                "status": 402,
                "message": "The SCF Pw sub processes failed"
              },
              {
                "status": 402,
                "message": "One or more CH_SCF Pw sub processes failed"
              }
            ]
          }
        },
        "quantumespresso.xspectra.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO xspectra.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "xspectra",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "An explicit k-points mesh. Either this or `kpoints_distance` has to be prov ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.xspectra.core": {
          "description": [
            "Workchain to compute X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
            "",
            "    The workflow follows the process required to compute the XAS of an input structure: an SCF calculation is performed",
            "    using the provided structure, which is then followed by the calculation of the XAS itself by XSpectra. The",
            "    calculations performed by the WorkChain in a typical run will be:",
            "",
            "    - PwSCF calculation with pw.x of the input structure with a core-hole present.",
            "    - Generation of core-wavefunction data with upf2plotcore.sh (if requested).",
            "    - XAS calculation with xspectra.x to compute the Lanczos coefficients and print the XANES spectra for the",
            "      polarisation vectors requested in the input.",
            "    - Collation of output data from pw.x and xspectra.x calculations, including a combination of XANES dipole spectra",
            "      based on polarisation vectors to represent the powder spectrum of the structure (if requested).",
            "",
            "    If ``run_replot = True`` is set in the inputs (defaults to False), the WorkChain will run a second xspectra.x",
            "    calculation which replots the spectra produced from the ``xs_prod`` step. This option can be very useful for",
            "    obtaining a final spectrum at low levels of broadening (relative to the default of 0.5 eV), particularly as higher",
            "    levels of broadening significantly speed up the convergence of the Lanczos procedure. Inputs for the replot",
            "    calculation are found in the ``xs_plot`` namespace.",
            "",
            "    The core-wavefunction plot derived from the ground-state of the absorbing element can be provided as a top-level",
            "    input or produced by the WorkChain. If left to the WorkChain, the ground-state pseudopotential assigned to the",
            "    absorbing element will be used to generate this data using the upf2plotcore.sh utility script (via the",
            "    ``aiida-shell`` plugin).",
            "",
            "    In its current stage of development, the workflow requires the following:",
            "",
            "    - An input structure where the desired absorbing atom in the system is marked as a separate Kind. The default",
            "      behaviour for the WorkChain is to set the Kind name as 'X', however this can be changed via the `overrides`",
            "      dictionary.",
            "    - A code node for ``upf2plotcore``, configured for the ``aiida-shell`` plugin",
            "      (https://github.com/sphuber/aiida-shell). Alternatively, a ``SinglefileData`` node from a previous ``ShellJob``",
            "      run can be supplied under ``inputs.core_wfc_data``.",
            "    - A suitable pair of pseudopotentials for the element type of the absorbing atom, one for the ground-state occupancy",
            "      which contains GIPAW informtation for the core level of interest for the XAS (e.g. 1s in the case of a K-edge",
            "      calculation) and the other containing a core hole. (For the moment this can be passed either via the",
            "      ``core_hole_pseudos`` field in ``get_builder_from_protocol`` or via the overrides, but will be changed later once",
            "      full families of core-hole pseudopotentials become available)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "eps_vectors",
                "required": true,
                "valid_types": "List",
                "info": "The list of 3-vectors to use in XSpectra sub-processes. The number of sub-l ..."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `pw.x` calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation, with at least one site containing the ..."
              },
              {
                "name": "xs_prod",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the `xspectra.x` calculation to compute the Lanczos."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "The name for the Kind representing the absorbing atom in the structure. Mus ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "core_wfc_data",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "The core wavefunction data file extracted from the ground-state pseudo for  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "get_powder_spectrum",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, the WorkChain will combine XANES dipole spectra computed using t ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "run_replot",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              },
              {
                "name": "upf2plotcore_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "The code node required for upf2plotcore.sh configured for ``aiida-shell``.  ..."
              },
              {
                "name": "xs_plot",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the re-plot `xspectra.x` calculation of the Lanczos."
              }
            ],
            "outputs": [
              {
                "name": "parameters_scf",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "parameters_xspectra",
                "required": true,
                "valid_types": "Dict",
                "info": "The output dictionaries of each `XspectraBaseWorkChain` performed"
              },
              {
                "name": "spectra",
                "required": true,
                "valid_types": "XyData",
                "info": "An XyData node containing all the final spectra produced by the WorkChain."
              },
              {
                "name": "powder_spectrum",
                "required": false,
                "valid_types": "XyData",
                "info": "The simulated powder spectrum"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The SCF sub process failed"
              },
              {
                "status": 402,
                "message": "One or more XSpectra sub processes failed"
              },
              {
                "status": 403,
                "message": "The pseudo for the absorbing element contains no GIPAW information."
              }
            ]
          }
        },
        "quantumespresso.xspectra.crystal": {
          "description": [
            "Workchain to compute all X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
            "",
            "    The WorkChain follows the process required to compute all the K-edge XAS spectra for each",
            "    element in a given structure. The WorkChain itself firstly calls the PwRelaxWorkChain to",
            "    relax the input structure, then determines the input settings for each XAS",
            "    calculation automatically using ``get_xspectra_structures()``:",
            "",
            "        - Firstly the input structure is converted to its conventional standard cell using",
            "          ``spglib`` and detects the space group number for the conventional cell.",
            "        - Symmetry analysis of the standardized structure using ``spglib`` is then used to",
            "          determine the number of non-equivalent atomic sites in the structure for each",
            "          element considered for analysis.",
            "",
            "    Using the symmetry data returned from ``get_xspectra_structures``, input structures for",
            "    the XspectraCoreWorkChain are generated from the standardized structure by converting each",
            "    to a supercell with cell dimensions of at least 8.0 angstroms in each periodic dimension -",
            "    required in order to sufficiently reduce the unphysical interaction of the core-hole with",
            "    neighbouring images. The size of the minimum size requirement can be overriden by the",
            "    user if required. The WorkChain then uses the space group number to set the list of",
            "    polarisation vectors for the ``XspectraCoreWorkChain`` to compute for all subsequent",
            "    calculations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "core",
                "required": true,
                "valid_types": "Data",
                "info": "Input parameters for the basic xspectra workflow (core-hole SCF + XAS."
              },
              {
                "name": "core_hole_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
              },
              {
                "name": "elements_list",
                "required": true,
                "valid_types": "List",
                "info": "The list of elements to be considered for analysis, each must be a valid el ..."
              },
              {
                "name": "gipaw_pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for calculation."
              },
              {
                "name": "abs_atom_marker",
                "required": false,
                "valid_types": "Str",
                "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
              },
              {
                "name": "core_hole_treatments",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional dictionary to set core-hole treatment to given elements present. T ..."
              },
              {
                "name": "core_wfc_data",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input namespace to provide core wavefunction inputs for each element. Must  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
              },
              {
                "name": "return_all_powder_spectra",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, the WorkChain will return all ``powder_spectrum`` nodes from e ..."
              },
              {
                "name": "spglib_settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
              },
              {
                "name": "structure_preparation_settings",
                "required": false,
                "valid_types": "Dict, Float, Int, Bool, Str",
                "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
              },
              {
                "name": "upf2plotcore_code",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "Code node for the upf2plotcore.sh ShellJob code."
              }
            ],
            "outputs": [
              {
                "name": "final_spectra",
                "required": true,
                "valid_types": "XyData",
                "info": "The fully-resolved spectra for each element"
              },
              {
                "name": "supercell_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
              },
              {
                "name": "symmetry_analysis_data",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters from ``get_xspectra_structures()``."
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The optimized structure from the ``relax`` process."
              },
              {
                "name": "parameters_relax",
                "required": false,
                "valid_types": "Dict",
                "info": "The output_parameters of the relax step."
              },
              {
                "name": "parameters_scf",
                "required": false,
                "valid_types": "Dict",
                "info": "The output parameters of each ``PwBaseWorkChain`` performed in each ``Xspec ..."
              },
              {
                "name": "parameters_xspectra",
                "required": false,
                "valid_types": "Dict",
                "info": "The output dictionaries of each `XspectraCalculation` performed"
              },
              {
                "name": "powder_spectra",
                "required": false,
                "valid_types": "XyData",
                "info": "All the spectra generated by the WorkChain."
              },
              {
                "name": "standardized_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The standardized crystal structure used to generate structures for XSpectra ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The Relax sub process failed"
              },
              {
                "status": 402,
                "message": "One or more XSpectra workflows failed"
              },
              {
                "status": 403,
                "message": "The pseudos for one or more absorbing elements contain no GIPAW information."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "abinit": {
          "description": [
            "AiiDA calculation plugin wrapping the abinit executable."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The k-point mesh or path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The ABINIT input parameters."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "Psp8Data, JthXmlData",
                "info": "The pseudopotentials."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "A remote folder used for restarts."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Various special settings."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Various output quantities."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Final electronic bands if present."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Final structure of the calculation if present."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "Trajectory of various output quantities over the calculation if present."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "Calculation did not produce all expected output files."
              },
              {
                "status": 101,
                "message": "Calculation did not produce the expected `[prefix]o_GSR.nc` output file."
              },
              {
                "status": 102,
                "message": "Calculation did not produce the expected `[prefix]o_HIST.nc` output file."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "The retrieved folder did not contain the `stdout` output file."
              },
              {
                "status": 301,
                "message": "The `stdout` output file could not be read."
              },
              {
                "status": 302,
                "message": "The `stdout` output file could not be parsed."
              },
              {
                "status": 303,
                "message": "The `abipy` `EventsParser` reports that the runw as not completed."
              },
              {
                "status": 304,
                "message": "The output file contains one or more error messages."
              },
              {
                "status": 305,
                "message": "The output file contains one or more warning messages."
              },
              {
                "status": 312,
                "message": "The output structure could not be parsed."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 500,
                "message": "The SCF minimization cycle did not converge."
              },
              {
                "status": 501,
                "message": "The ionic minimization cycle did not converge."
              }
            ]
          }
        },
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "abinit.base": {
          "description": [
            "Base Abinit Workchain to perform a DFT calculation. Validates parameters and restart."
          ],
          "spec": {
            "inputs": [
              {
                "name": "abinit",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "An explicit k-points mesh or list. Either this or `kpoints_distance` must b ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Various output quantities."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Final electronic bands if present."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Final structure of the calculation if present."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "Trajectory of various output quantities over the calculation if present."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "`pseudos` could not be used to get the necessary pseudos."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 203,
                "message": "Neither the `options` nor `automatic_parallelization` input was specified."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "crystal_dft.parallel": {
          "description": [
            "No description available"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "CrystalBasisData",
                "info": ""
              },
              {
                "name": "basis_family",
                "required": false,
                "valid_types": "CrystalBasisFamilyData, NoneType",
                "info": ""
              },
              {
                "name": "guess_oxistates",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": ""
              },
              {
                "name": "high_spin_preferred",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": ""
              },
              {
                "name": "is_magnetic",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "spinlock_steps",
                "required": false,
                "valid_types": "Int, NoneType",
                "info": ""
              },
              {
                "name": "use_oxistates",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "oxidation_states",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "output_wavefunction",
                "required": false,
                "valid_types": "SinglefileData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "SCF calculation not converged"
              },
              {
                "status": 301,
                "message": "Geometry optimization failed"
              },
              {
                "status": 302,
                "message": "Unit cell not neutral"
              },
              {
                "status": 303,
                "message": "Basis set linearly dependent"
              },
              {
                "status": 304,
                "message": "Neighbour list too large"
              },
              {
                "status": 305,
                "message": "No G-vectors left"
              },
              {
                "status": 306,
                "message": "Collapsed geometry"
              },
              {
                "status": 307,
                "message": "Closed shell run - spin polarization not allowed"
              },
              {
                "status": 308,
                "message": "Parameters for model hessian not defined"
              },
              {
                "status": 309,
                "message": "Fermi energy not in interval"
              },
              {
                "status": 310,
                "message": "Insufficient indices for Madelung sums"
              },
              {
                "status": 350,
                "message": "Internal memory error"
              },
              {
                "status": 360,
                "message": "Inadequate elastic calculation: additional optimization needed"
              },
              {
                "status": 400,
                "message": "Unknown error"
              },
              {
                "status": 401,
                "message": "The retrieved folder data node could not be accessed"
              }
            ]
          }
        },
        "crystal_dft.properties": {
          "description": [
            "AiiDA calculation plugin wrapping the properties executable."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "wavefunction",
                "required": true,
                "valid_types": "SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "output_bands_down",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "output_dos",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed"
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "crystal_dft.serial": {
          "description": [
            "No description available"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "CrystalBasisData",
                "info": ""
              },
              {
                "name": "basis_family",
                "required": false,
                "valid_types": "CrystalBasisFamilyData, NoneType",
                "info": ""
              },
              {
                "name": "guess_oxistates",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": ""
              },
              {
                "name": "high_spin_preferred",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": ""
              },
              {
                "name": "is_magnetic",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "spinlock_steps",
                "required": false,
                "valid_types": "Int, NoneType",
                "info": ""
              },
              {
                "name": "use_oxistates",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "oxidation_states",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "output_wavefunction",
                "required": false,
                "valid_types": "SinglefileData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "SCF calculation not converged"
              },
              {
                "status": 301,
                "message": "Geometry optimization failed"
              },
              {
                "status": 302,
                "message": "Unit cell not neutral"
              },
              {
                "status": 303,
                "message": "Basis set linearly dependent"
              },
              {
                "status": 304,
                "message": "Neighbour list too large"
              },
              {
                "status": 305,
                "message": "No G-vectors left"
              },
              {
                "status": 306,
                "message": "Collapsed geometry"
              },
              {
                "status": 307,
                "message": "Closed shell run - spin polarization not allowed"
              },
              {
                "status": 308,
                "message": "Parameters for model hessian not defined"
              },
              {
                "status": 309,
                "message": "Fermi energy not in interval"
              },
              {
                "status": 310,
                "message": "Insufficient indices for Madelung sums"
              },
              {
                "status": 350,
                "message": "Internal memory error"
              },
              {
                "status": 360,
                "message": "Inadequate elastic calculation: additional optimization needed"
              },
              {
                "status": 400,
                "message": "Unknown error"
              },
              {
                "status": 401,
                "message": "The retrieved folder data node could not be accessed"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "crystal_dft.base": {
          "description": [
            "Run CRYSTAL calculation"
          ],
          "spec": {
            "inputs": [
              {
                "name": "basis_family",
                "required": true,
                "valid_types": "CrystalBasisFamilyData",
                "info": ""
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": "Calculation options"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "restart_params",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "output_wavefunction",
                "required": false,
                "valid_types": "SinglefileData",
                "info": ""
              },
              {
                "name": "oxidation_states",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "primitive_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "CRYSTAL error"
              },
              {
                "status": 400,
                "message": "Unknown error"
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "fleur.fleur": {
          "description": [
            "A CalcJob class that represents FLEUR DFT calculation.",
            "    For more information about the FLEUR-code family go to http://www.flapw.de/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": "Use a FleurinpData node that specifies the input parametersusually copy fro ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a remote or local repository folder as parent folder (also for restarts ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "This parameter data node is used to specify for some advanced features how  ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "error_params",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_params_complex",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "relax_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "No retrieved folder found."
              },
              {
                "status": 301,
                "message": "One of the output files can not be opened."
              },
              {
                "status": 302,
                "message": "FLEUR calculation failed for unknown reason."
              },
              {
                "status": 303,
                "message": "XML output file was not found."
              },
              {
                "status": 304,
                "message": "Parsing of XML output file failed."
              },
              {
                "status": 305,
                "message": "Parsing of relax XML output file failed."
              },
              {
                "status": 310,
                "message": "FLEUR calculation failed due to lack of memory."
              },
              {
                "status": 311,
                "message": "FLEUR calculation failed because an atom spilled to thevacuum during relaxation"
              },
              {
                "status": 312,
                "message": "FLEUR calculation failed due to MT overlap."
              },
              {
                "status": 313,
                "message": "Overlapping MT-spheres during relaxation."
              },
              {
                "status": 314,
                "message": "Problem with cdn is suspected. Consider removing cdn"
              },
              {
                "status": 315,
                "message": "The LDA+U density matrix contains invalid elements."
              },
              {
                "status": 316,
                "message": "Calculation failed due to time limits."
              },
              {
                "status": 318,
                "message": "Calculation failed due to missing dependency ({name}) for given calculation."
              }
            ]
          }
        },
        "fleur.inpgen": {
          "description": [
            "JobCalculationClass for the inpgen, which is a preprocessor for a FLEUR calculation.",
            "    For more information about produced files and the FLEUR-code family, go to http://www.flapw.de/."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Choose the input structure to use"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "This parameter data node is used to specify for some advanced features how  ..."
              }
            ],
            "outputs": [
              {
                "name": "fleurinp",
                "required": true,
                "valid_types": "FleurinpData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "No retrieved folder found."
              },
              {
                "status": 301,
                "message": "One of the output files can not be opened."
              },
              {
                "status": 306,
                "message": "XML input file was not found."
              },
              {
                "status": 307,
                "message": "Some required files were not retrieved."
              },
              {
                "status": 308,
                "message": "During parsing: FleurinpData could not be initialized, see log. "
              },
              {
                "status": 309,
                "message": "During parsing: FleurinpData failed validation."
              },
              {
                "status": 310,
                "message": "The profile {profile} is not known to the used inpgen code"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "fleur.banddos": {
          "description": [
            "This workflow calculated a bandstructure from a Fleur calculation",
            "",
            "    :Params: a Fleurcalculation node",
            "    :returns: Success, last result node, list with convergence behavior"
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "banddos_calc",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "output_banddos_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_banddos_wc_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "output_banddos_wc_dos",
                "required": false,
                "valid_types": "XyData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "Invalid input configuration."
              },
              {
                "status": 233,
                "message": "Invalid code node specified, check inpgen and fleur code nodes."
              },
              {
                "status": 235,
                "message": "Input file modification failed."
              },
              {
                "status": 236,
                "message": "Input file was corrupted after user's modifications."
              },
              {
                "status": 334,
                "message": "SCF calculation failed."
              },
              {
                "status": 335,
                "message": "Found no SCF calculation remote repository."
              }
            ]
          }
        },
        "fleur.base": {
          "description": [
            "Workchain to run a FLEUR calculation with automated error handling and restarts"
          ],
          "spec": {
            "inputs": [
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": "Optional parameters to set up computational details."
              },
              {
                "name": "add_comp_para",
                "required": false,
                "valid_types": "Dict",
                "info": "Gives additional control over computational parametersonly_even_MPI: set to ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "description",
                "required": false,
                "valid_types": "str, NoneType",
                "info": "Calculation description."
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": "Use a FleurinpData node that specifies the input parametersusually copy fro ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "label",
                "required": false,
                "valid_types": "str, NoneType",
                "info": "Calculation label."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a remote or local repository folder as parent folder (also for restarts ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "This parameter data node is used to specify for some advanced features how  ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "error_params",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_params_complex",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "relax_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 311,
                "message": "FLEUR calculation failed because an atom spilled to thevacuum during relaxation"
              },
              {
                "status": 313,
                "message": "Overlapping MT-spheres during relaxation."
              },
              {
                "status": 388,
                "message": "Computational resources are not optimal."
              },
              {
                "status": 389,
                "message": "Computational resources are not optimal."
              },
              {
                "status": 390,
                "message": "Computational resources are not optimal."
              },
              {
                "status": 399,
                "message": "FleurCalculation failed and FleurBaseWorkChain has no strategy to resolve this"
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "fleur.base_relax": {
          "description": [
            "Workchain to run Relax WorkChain with automated error handling and restarts"
          ],
          "spec": {
            "inputs": [
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "description",
                "required": false,
                "valid_types": "str, NoneType",
                "info": "Calculation description."
              },
              {
                "name": "final_scf",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "label",
                "required": false,
                "valid_types": "str, NoneType",
                "info": "Calculation label."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "last_scf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "optimized_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "output_relax_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 399,
                "message": "FleurRelaxWorkChain failed and FleurBaseRelaxWorkChain has no strategy to resolve this"
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "fleur.cfcoeff": {
          "description": [
            "Workflow for calculating rare-earth crystal field coefficients"
          ],
          "spec": {
            "inputs": [
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "orbcontrol",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "scf_rare_earth_analogue",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_cfcoeff_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_cfcoeff_wc_charge_densities",
                "required": false,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_cfcoeff_wc_potentials",
                "required": false,
                "valid_types": "XyData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "Invalid input configuration."
              },
              {
                "status": 235,
                "message": "Input file modification failed."
              },
              {
                "status": 236,
                "message": "Input file was corrupted after user's modifications."
              },
              {
                "status": 345,
                "message": "Convergence scf workflow failed."
              },
              {
                "status": 451,
                "message": "Convergence orbcontrol workflow failed."
              },
              {
                "status": 452,
                "message": "CF calculation failed."
              }
            ]
          }
        },
        "fleur.corehole": {
          "description": [
            "Turn key solution for a corehole calculation with the FLEUR code.",
            "    Has different protocols for different core-hole types (valence, charge).",
            "",
            "    Calculates supercells. Extracts binding energies",
            "    for certain corelevels from the total energy differences a the calculation with",
            "    corehole and without.",
            "",
            "    Documentation:",
            "    See help for details.",
            "",
            "    Two paths are possible:",
            "",
            "    (1) Start from a structure -> workchains run inpgen first (recommended)",
            "    (2) Start from a Fleurinp data object",
            "",
            "    Also it is recommended to provide a calc parameter node for the structure",
            "",
            "    :param wf_parameters: Dict node, specify, resources and what should be calculated",
            "    :param structure: structureData node, crystal structure",
            "    :param calc_parameters: Dict node, inpgen parameters for the crystal structure",
            "    :param fleurinp:  fleurinpData node,",
            "    :param inpgen: Code node,",
            "    :param fleur: Code node,",
            "",
            "    :return: output_corehole_wc_para Dict node,  successful=True if no error",
            "",
            "    :uses workchains: fleur_scf_wc, fleur_relax_wc",
            "    :uses calcfunctions: supercell, create_corehole_result_node, prepare_struc_corehole_wf"
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "inpgen",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_corehole_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 1,
                "message": "The input resources are invalid."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 2,
                "message": "Input resources are missing."
              },
              {
                "status": 3,
                "message": "The code provided is invalid, or not of the right kind."
              },
              {
                "status": 4,
                "message": "Inpgen calculation FAILED, check output"
              },
              {
                "status": 5,
                "message": "Changing of the FLEURINP data went wrong, check log."
              },
              {
                "status": 6,
                "message": "The FLEUR input file for the calculation did not validate."
              },
              {
                "status": 7,
                "message": "At least one FLEUR calculation FAILED, check the output and log."
              },
              {
                "status": 8,
                "message": "At least one FLEUR calculation did not/could not reach thedesired convergece Criteria, with the current parameters."
              },
              {
                "status": 9,
                "message": "Something went wrong in the determiation what coreholes to calculate, probably the input format was not correct. Check log."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "fleur.create_magnetic": {
          "description": [
            "This workflow creates relaxed magnetic film on a substrate."
          ],
          "spec": {
            "inputs": [
              {
                "name": "distance_suggestion",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "eos",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "eos_output",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "interlayer_dist",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "optimized_structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": ""
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "magnetic_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "Invalid input configuration."
              },
              {
                "status": 380,
                "message": "Specified substrate has to be bcc or fcc."
              },
              {
                "status": 382,
                "message": "Relaxation calculation failed."
              },
              {
                "status": 383,
                "message": "EOS WorkChain failed."
              }
            ]
          }
        },
        "fleur.dmi": {
          "description": [
            "This workflow calculates DMI energy dispersion of a structure."
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_dmi_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "Invalid input configuration."
              },
              {
                "status": 233,
                "message": "Invalid code node specified, check inpgen and fleur code nodes."
              },
              {
                "status": 235,
                "message": "Input file modification failed."
              },
              {
                "status": 236,
                "message": "Input file was corrupted after user's modifications."
              },
              {
                "status": 334,
                "message": "Reference calculation failed."
              },
              {
                "status": 335,
                "message": "Found no reference calculation remote repository."
              },
              {
                "status": 336,
                "message": "Force theorem calculation failed."
              }
            ]
          }
        },
        "fleur.dos": {
          "description": [
            "DEPRECATED: Use FleurBandDosWorkChain instead (entrypoint fleur.banddos)",
            "    This workflow calculated a DOS from a Fleur calculation",
            "",
            "    :Params: a Fleurcalculation node",
            "    :returns: Success, last result node, list with convergence behavior",
            "",
            "    wf_parameters: {  'tria', 'nkpts', 'sigma', 'emin', 'emax'}",
            "    defaults : tria = True, nkpts = 800, sigma=0.005, emin= -0.3, emax = 0.8"
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "remote_data",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "fleur.eos": {
          "description": [
            "This workflow calculates the equation of states of a structure.",
            "    Calculates several unit cells with different volumes.",
            "    A Birch_Murnaghan  equation of states fit determines the Bulk modulus and the",
            "    groundstate volume of the cell.",
            "",
            "    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict",
            "    :params structure: StructureData node, 'structure' crystal structure",
            "    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen",
            "    :params inpgen: Code node,",
            "    :params fleur: Code node,",
            "",
            "",
            "    :return output_eos_wc_para: Dict node, contains relevant output information.",
            "                                about general succeed, fit results and so on."
          ],
          "spec": {
            "inputs": [
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_eos_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_eos_wc_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 400,
                "message": "At least one of the SCF sub processes did not finish successfully."
              }
            ]
          }
        },
        "fleur.init_cls": {
          "description": [
            "Turn key solution for the calculation of core level shift"
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "inpgen",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_initial_cls_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "fleur.mae": {
          "description": [
            "This workflow calculates the Magnetic Anisotropy Energy of a structure."
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_mae_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "Invalid input configuration."
              },
              {
                "status": 233,
                "message": "Invalid code node specified, check inpgen and fleur code nodes."
              },
              {
                "status": 235,
                "message": "Input file modification failed."
              },
              {
                "status": 236,
                "message": "Input file was corrupted after user's modifications."
              },
              {
                "status": 334,
                "message": "Reference calculation failed."
              },
              {
                "status": 335,
                "message": "Found no reference calculation remote repository."
              },
              {
                "status": 336,
                "message": "Force theorem calculation failed."
              }
            ]
          }
        },
        "fleur.mae_conv": {
          "description": [
            "This workflow calculates the Magnetic Anisotropy Energy of a structure."
          ],
          "spec": {
            "inputs": [
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_mae_conv_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 343,
                "message": "Convergence MAE calculation failed for all SQAs."
              },
              {
                "status": 344,
                "message": "Convergence MAE calculation failed for some SQAs."
              }
            ]
          }
        },
        "fleur.orbcontrol": {
          "description": [
            "Workchain for determining the groundstate density matrix in an DFT+U",
            "    calculation. This is done in 2 or 3 steps:",
            "",
            "        1. Converge the system without DFT+U (a converged calculation can be",
            "           provided to skip this step)",
            "        2. A fixed number of iterations is run with fixed density matrices",
            "           either generated as all distinct permutations for the given occupations",
            "           or the explicitly given configurations",
            "        3. The system and density matrix is relaxed",
            "",
            "    :param wf_parameters: (Dict), Workchain Specifications",
            "    :param scf_no_ldau: (Dict), Inputs to a FleurScfWorkChain providing the initial system",
            "                                either converged or staring from a structure",
            "    :param scf_with_ldau: (Dict), Inputs to a FleurScfWorkChain. Only the wf_parameters are valid",
            "    :param fleurinp: (FleurinpData) FleurinpData to start from if no SCF should be done",
            "    :param remote: (RemoteData) RemoteData to start from if no SCF should be done",
            "    :param structure: (StructureData) Structure to start from if no SCF should be done",
            "    :param calc_parameters: (Dict), Inpgen Parameters",
            "    :param settings: (Dict), additional settings for e.g retrieving files",
            "    :param options: (Dict), Options for the submission of the jobs",
            "    :param inpgen: (Code)",
            "    :param fleur: (Code)"
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "fixed_remotes",
                "required": false,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "inpgen",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "options_inpgen",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "relaxed_remotes",
                "required": false,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "scf_no_ldau",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for SCF Workchain before adding LDA+U"
              },
              {
                "name": "scf_with_ldau",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for SCF Workchain after the LDA+U matrix was fixed"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "settings_inpgen",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "groundstate_scf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "output_orbcontrol_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "groundstate_denmat",
                "required": false,
                "valid_types": "SinglefileData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "Invalid input configuration."
              },
              {
                "status": 233,
                "message": "Input codes do not correspond to fleur or inpgen respectively."
              },
              {
                "status": 235,
                "message": "Input file modification failed."
              },
              {
                "status": 236,
                "message": "Input file was corrupted after user's modifications."
              },
              {
                "status": 342,
                "message": "Convergence LDA+U calculation failed for some Initial configurations."
              },
              {
                "status": 343,
                "message": "Convergence LDA+U calculation failed for all Initial configurations."
              },
              {
                "status": 360,
                "message": "Inpgen calculation failed."
              },
              {
                "status": 450,
                "message": "Convergence workflow without LDA+U failed."
              }
            ]
          }
        },
        "fleur.relax": {
          "description": [
            "This workflow performs structure optimization."
          ],
          "spec": {
            "inputs": [
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "final_scf",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "last_scf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "optimized_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "output_relax_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "If you want to run a final scf inpgen has to be there."
              },
              {
                "status": 311,
                "message": "FLEUR calculation failed because an atom spilled to thevacuum during relaxation"
              },
              {
                "status": 313,
                "message": "Overlapping MT-spheres during relaxation."
              },
              {
                "status": 350,
                "message": "Optimization cycle did not lead to convergence of forces."
              },
              {
                "status": 351,
                "message": "SCF Workchains failed for some reason."
              },
              {
                "status": 352,
                "message": "Found no relaxed structure info in the output of SCF"
              },
              {
                "status": 353,
                "message": "Found no SCF output"
              },
              {
                "status": 354,
                "message": "Force is small, switch to BFGS"
              }
            ]
          }
        },
        "fleur.relax_torque": {
          "description": [
            "This workflow performs spin structure optimization."
          ],
          "spec": {
            "inputs": [
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "final_scf",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_relax_torque_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "If you want to run a final scf inpgen has to be there."
              },
              {
                "status": 350,
                "message": "Optimization cycle did not lead to convergence."
              },
              {
                "status": 351,
                "message": "An SCF Workchain failed for some reason."
              }
            ]
          }
        },
        "fleur.scf": {
          "description": [
            "Workchain for converging a FLEUR calculation (SCF).",
            "",
            "    It converges the charge density, total energy or the largest force.",
            "    Two paths are possible:",
            "",
            "    (1) Start from a structure and run the inpgen first optional with calc_parameters",
            "    (2) Start from a Fleur calculation, with optional remoteData",
            "",
            "    :param wf_parameters: (Dict), Workchain Specifications",
            "    :param structure: (StructureData), Crystal structure",
            "    :param calc_parameters: (Dict), Inpgen Parameters",
            "    :param fleurinp: (FleurinpData), to start with a Fleur calculation",
            "    :param remote_data: (RemoteData), from a Fleur calculation",
            "    :param inpgen: (Code)",
            "    :param fleur: (Code)",
            "",
            "    :return: output_scf_wc_para (Dict), Information of workflow results",
            "        like Success, last result node, list with convergence behavior"
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "inpgen",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "remote_data",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "settings_inpgen",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "fleurinp",
                "required": true,
                "valid_types": "FleurinpData",
                "info": ""
              },
              {
                "name": "last_calc",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "output_scf_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "Invalid input configuration."
              },
              {
                "status": 233,
                "message": "Input codes do not correspond to fleur or inpgen respectively."
              },
              {
                "status": 235,
                "message": "Input file modification failed."
              },
              {
                "status": 236,
                "message": "Input file was corrupted after user's modifications."
              },
              {
                "status": 360,
                "message": "Inpgen calculation failed."
              },
              {
                "status": 361,
                "message": "Fleur calculation failed."
              },
              {
                "status": 362,
                "message": "SCF cycle did not lead to convergence."
              }
            ]
          }
        },
        "fleur.ssdisp": {
          "description": [
            "This workflow calculates spin spiral dispersion of a structure."
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "fleurinp",
                "required": false,
                "valid_types": "FleurinpData, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_ssdisp_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 231,
                "message": "Invalid input configuration."
              },
              {
                "status": 233,
                "message": "Invalid code node specified, check inpgen and fleur code nodes."
              },
              {
                "status": 235,
                "message": "Input file modification failed."
              },
              {
                "status": 236,
                "message": "Input file was corrupted after user's modifications."
              },
              {
                "status": 334,
                "message": "Reference calculation failed."
              },
              {
                "status": 335,
                "message": "Found no reference calculation remote repository."
              },
              {
                "status": 336,
                "message": "Force theorem calculation failed."
              }
            ]
          }
        },
        "fleur.ssdisp_conv": {
          "description": [
            "This workflow calculates the Spin Spiral Dispersion of a structure."
          ],
          "spec": {
            "inputs": [
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_ssdisp_conv_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 230,
                "message": "Invalid workchain parameters."
              },
              {
                "status": 340,
                "message": "Convergence SSDisp calculation failed for all q-vectors."
              },
              {
                "status": 341,
                "message": "Convergence SSDisp calculation failed for some q-vectors."
              }
            ]
          }
        },
        "fleur.strain": {
          "description": [
            "This workflow calculates the deformation potential a structure = -BdEg/dP = d(Eg)/d(ln(V)).",
            "    Calculates several unit cells with different volumes.",
            "    A Birch_Murnaghan  equation of states fit determines the Bulk modulus(B) and the",
            "    ground-state volume of the cell.",
            "",
            "    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict",
            "    :params structure: StructureData node, 'structure' crystal structure",
            "    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen",
            "    :params inpgen: Code node,",
            "    :params fleur: Code node,",
            "",
            "",
            "    :return output_strain_wc_para: Dict node, contains relevant output information.",
            "                                about general succeed, fit results and so on."
          ],
          "spec": {
            "inputs": [
              {
                "name": "fleur",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "inpgen",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_strain_wc_para",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 331,
                "message": "Invalid code node specified, check inpgen and fleur code nodes."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "kkr.kkr": {
          "description": [
            "AiiDA calculation plugin for a KKR calculation."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Use a remote or local repository folder as parent folder\n            (also  ..."
              },
              {
                "name": "anomalous_density",
                "required": false,
                "valid_types": "FolderData, NoneType",
                "info": "FolderData that contains anomalous density input files for\n            the  ..."
              },
              {
                "name": "bfield",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Non-collinear exteral B-field used for constraint calculations.\n\n           ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "deciout_parent",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "KkrCalculation RemoteData folder from deci-out calculation"
              },
              {
                "name": "impurity_info",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use a Parameter node that specifies properties for a following\n             ..."
              },
              {
                "name": "initial_noco_angles",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Initial non-collinear angles for the magnetic moments of\n            the im ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Use a KpointsData node that specifies the kpoints for which a\n            b ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "retrieve_kkrflex",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "For a GF writeout calculation, determine whether or not\n            the kkr ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "results of the KKR calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "KKR output file not found"
              },
              {
                "status": 302,
                "message": "KKR parser retuned an error"
              },
              {
                "status": 303,
                "message": "Could not find shapefun from voronoi parent"
              }
            ]
          }
        },
        "kkr.kkrimp": {
          "description": [
            "AiiDA calculation plugin for a KKRimp calculation."
          ],
          "spec": {
            "inputs": [
              {
                "name": "host_Greenfunction_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Use a node that specifies the host KKR calculation contaning the host Green ..."
              },
              {
                "name": "cleanup_outfiles",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Cleanup and compress output (works only in aiida-core<2.0 and breaks cachin ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "host_Greenfunction_folder_Efshift",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a node that specifies the host KKR calculation contaning the host Green ..."
              },
              {
                "name": "impurity_info",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use a parameter node that specifies properties for a immpurity calculation."
              },
              {
                "name": "impurity_potential",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Use a node that contains the input potential."
              },
              {
                "name": "initial_noco_angles",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\nInitial non-collinear angles for the magnetic moments of the impurities. T ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use a node that specifies the input parameters (calculation settings)."
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a node that specifies a parent KKRimp calculation."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings_LDAU",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\nSettings for running a LDA+U calculation. The Dict node should be of the f ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "results of the KKRimp calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "Retrieved folder of KKRimp calculation not found."
              },
              {
                "status": 302,
                "message": "KKRimp parser returned an error."
              }
            ]
          }
        },
        "kkr.kkrimporter": {
          "description": [
            "Importer dummy calculation for a previous KKR run",
            "",
            "    :param remote_workdir: Absolute path to the directory where the job was run.",
            "        The transport of the computer you link ask input to the calculation is",
            "        the transport that will be used to retrieve the calculation's files.",
            "        Therefore, ``remote_workdir`` should be the absolute path to the job's",
            "        directory on that computer.",
            "    :type remote_workdir: str",
            "    :param input_file_names: The file names of the job's input file.",
            "    :type input_file_name: dict with str entries",
            "    :param output_file_name: The file names of the job's output file (i.e. the",
            "        file containing the stdout of kkr.x).",
            "    :type output_file_name: dict with str entries"
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Use a remote or local repository folder as parent folder\n            (also  ..."
              },
              {
                "name": "anomalous_density",
                "required": false,
                "valid_types": "FolderData, NoneType",
                "info": "FolderData that contains anomalous density input files for\n            the  ..."
              },
              {
                "name": "bfield",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Non-collinear exteral B-field used for constraint calculations.\n\n           ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "deciout_parent",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "KkrCalculation RemoteData folder from deci-out calculation"
              },
              {
                "name": "impurity_info",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Use a Parameter node that specifies properties for a following\n             ..."
              },
              {
                "name": "initial_noco_angles",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Initial non-collinear angles for the magnetic moments of\n            the im ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Use a KpointsData node that specifies the kpoints for which a\n            b ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "retrieve_kkrflex",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "For a GF writeout calculation, determine whether or not\n            the kkr ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "results of the KKR calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "KKR output file not found"
              },
              {
                "status": 302,
                "message": "KKR parser retuned an error"
              },
              {
                "status": 303,
                "message": "Could not find shapefun from voronoi parent"
              }
            ]
          }
        },
        "kkr.kkrnano": {
          "description": [
            "AiiDA calculation plugin for a KKRnano calculation"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "convert",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Activate to use together with set up convert code in order to retrieve pote ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "nocoangles",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Dict node that specifies the starting angles for non-colinear calculations  ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Dict node that specifies the input parameters for KKRnano (k-point density  ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a node that specifies a parent KKRnano or voronoi calculation"
              },
              {
                "name": "passed_lattice_param_angs",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Use a prespecified lattice constant in Angstrom as input for KKRnano, i. e. ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "strucwithpot",
                "required": false,
                "valid_types": "StrucWithPotData, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "results of the calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "KKRnano output file not found"
              },
              {
                "status": 302,
                "message": "KKRnano parser retuned an error"
              }
            ]
          }
        },
        "kkr.voro": {
          "description": [
            "AiiDA calculation plugin for a voronoi calculation (creation of starting potential and shapefun)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_KKR",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a node that specifies a parent KKR calculation"
              },
              {
                "name": "potential_overwrite",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Use a node that specifies the potential which is used instead of the vorono ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": "Use a node that specifies the input crystal structure"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "results of the calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "Voronoi output file not found"
              },
              {
                "status": 302,
                "message": "Voronoi parser retuned an error"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "kkr.bs": {
          "description": [
            "Workchain for BandStructure calculation, starting from RemoteFolderData of the previous converged KKR calculation remote folder data",
            "",
            "    inputs:",
            "    :param wf_parameters: (Dict), (optional); Workchain Specifications, contains nepts, tempr, emin (in eV relative to EF), emax (in eV),",
            "                          and RCLUSTZ (can be used to increase the screening cluster radius) keys.",
            "",
            "    :param options: (Dict), (optional); Computer Specifications, scheduler command, parallel or serial",
            "    :param kpoints: (KpointsData),(optional); Kpoints data type from the structure,",
            "                                   but not mendatory as it can be extracted from structure internaly from the remote data",
            "    :param remote_data: (RemoteData)(mendaory); From the previous kkr-converged calculation.",
            "    :param kkr: (Code)(mendaory); KKR code specifiaction",
            "    :param label: (Str) (optional) ; label for WC but will be found in the 'result_wf' output",
            "                                     Dict as 'BS_wf_label' key",
            "    :param description: (Str) (optional) : description for WC but will be found in the 'result_wf' output",
            "                                     Dict as 'BS_wf_description' key",
            "",
            "",
            "    returns:",
            "    :out BS_Data : (ArrayData) ; Consist of BlochSpectralFunction, k_points (list), energy_points (list), special_kpoints(dict)",
            "    :out result_wf: (Dict); work_chain_specifications node, BS_data node, remote_folder node"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kkr",
                "required": true,
                "valid_types": "Code",
                "info": "KKRhost code, needed to run the qdos KkrCalculation"
              },
              {
                "name": "remote_data",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Parent folder of previoously converged KkrCalculation"
              },
              {
                "name": "description",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "description for the workflow"
              },
              {
                "name": "initial_noco_angles",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Initial non-collinear angles for the magnetic moments. See KkrCalculation f ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "K-points data for the calculation. If not given the seekpath library is use ..."
              },
              {
                "name": "label",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "label for the workflow"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Computer options (walltime etc.) passed onto KkrCalculation"
              },
              {
                "name": "params_kkr_overwrite",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Overwrite some input parameters of the parent KKR calculation."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters of the bandstructure workflow (see output of kkr_bs_wc.get_wf_de ..."
              }
            ],
            "outputs": [
              {
                "name": "BS_Data",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "results_wf",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 161,
                "message": "No remote_data was provided as Input"
              },
              {
                "status": 162,
                "message": "The code you provided for kkr does not use the plugin kkr.kkr"
              },
              {
                "status": 163,
                "message": "calc_parameters given are not consistent! Hint: did you give an unknown keyword?"
              },
              {
                "status": 164,
                "message": "calc_parameters not complete"
              },
              {
                "status": 165,
                "message": "KKR Band Structure calculation failed"
              },
              {
                "status": 166,
                "message": "No K-POINTS can be extracted from the structure data"
              },
              {
                "status": 167,
                "message": "No K-POINTS can be extracted from the primtive structure data rather conventional structure data"
              },
              {
                "status": 168,
                "message": "Input remote_data node neither output of a KKR/voronoi calculation nor of kkr_scf_wc workflow"
              }
            ]
          }
        },
        "kkr.decimation": {
          "description": [
            "Workchain a decimation calculation with KKR starting from a thick slab (center potential should be bulk-like).",
            "",
            "    The workchain",
            "     - creates the structure nodes of the substrate and decimation region from thick slab structure",
            "     - creates starting potentials of the slab structure",
            "     - runs auxiliary voronoi steps to get starting setup correctly for the KKR calculations",
            "     - runs the deci-out step in serial",
            "     - runs the decimation step",
            "",
            "     The workflow starts either from a converged thick film of from a previous decimation calculation (skips the structure and starting potential setup and the voronoi steps).",
            "",
            "     The workflow parameters input can be:",
            "          {'nkz' : 30,   # number of k-points in z-direction for substrate",
            "           'nprinc': 4,  # number of layer in principle layer",
            "           'nplayer': 4, # number of principle layers (naez deci: nprinc*nplayer)",
            "           'dosmode': False, # run DOS calculation",
            "           'dos_params': {'emin_EF': -5.0, # EMIN-EF in eV",
            "                          'emax_EF':  3.0, # EMAX-EF in eV",
            "                          'nepts': 96,     # number of points in contour",
            "                          'tempr': 100,    # smearing temperature",
            "                          'kmesh': [50, 50, 50]}, # k-mesh used in dos calculation",
            "           }",
            "",
            "    :param wf_parameters: Dict node with workchain parameters (see kkr_decimation_wc.get_wf_defaults())",
            "    :param options: Dict node with specifications for the computer (used in decimation step only)",
            "    :param remote_data: mandatory RemoteData node of either a parent slab or previous decimation calculation",
            "    :param kkr: mandatory Code node with KKR code for running deci-out and decimation steps",
            "    :param voronoi: Code node that is mandatory if starting from slab calculation. Is the voronoi code for auxiliary calculations",
            "    :param kpoints: KpointsData node that triggers a band structure calculation. The kpoints specify the k-point path along which the bandstructure is computed with the qdos mode of KKRhost.",
            "    :param calc_parameters: Dict node that contains KKR parameters which overwrites settings from the slab parent.",
            "",
            "    :returns structure_decimate: StructureData node of the structure of the decimation region.",
            "    :returns structure_substrate: StructureData node of the structure of thesubstrate lattice continuation.",
            "    :returns out_params_calc_deci_out: Dict node of the output parameters of the deci-out calculation.",
            "    :returns out_params_calc_decimate: Dict node of the output parameters of the decimation calculation.",
            "    :returns out_remote_calc_decimate: RemoteData node of the decimation calculation.",
            "    :returns out_retrieved_calc_decimate: retrieved FolderData node of the decimation calculation.",
            "    :returns dos_data: XyData node with the DOS data at finite imaginary part in the energy contour. Only present in DOS mode.",
            "    :returns dos_data_interpol: XyData node with the interpolated DOS data onto the real axis. Only present in DOS mode."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kkr",
                "required": true,
                "valid_types": "Code",
                "info": "KKRhost code."
              },
              {
                "name": "remote_data",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Parent calculation (either previous decimation calculation, then voronoi st ..."
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "If given overwrites KKR parameters starting from slab params (can be used t ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "If given this triggers a bandstructure (i.e. qdos) calculation."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Computer options used in the deicmation step (voronoi and deci-out steps ru ..."
              },
              {
                "name": "voronoi",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "Voronoi code. Only needed if remote_data is slab claculation and not a prev ..."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "parameters for decimation setup (used only if not started from previous dec ..."
              }
            ],
            "outputs": [
              {
                "name": "out_params_calc_deci_out",
                "required": true,
                "valid_types": "Dict",
                "info": "Output parameter node of deci-out calculation."
              },
              {
                "name": "out_params_calc_decimate",
                "required": true,
                "valid_types": "Dict",
                "info": "Output parameter node of decimation calculation."
              },
              {
                "name": "out_remote_calc_decimate",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Remote folder of decimation calculation."
              },
              {
                "name": "out_retrieved_calc_decimate",
                "required": true,
                "valid_types": "FolderData",
                "info": "Retrieved folder of decimation calculation."
              },
              {
                "name": "structure_decimate",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure of decimation region."
              },
              {
                "name": "structure_substrate",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure of substrate lattice continuation."
              },
              {
                "name": "dos_data",
                "required": false,
                "valid_types": "XyData",
                "info": "DOS data with finite imaginary part in the energy contour."
              },
              {
                "name": "dos_data_interpol",
                "required": false,
                "valid_types": "XyData",
                "info": "interpolated DOS data onto the real axis."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "Given remote_data is not correct (needs to be a slab or decimation KKR calculation)"
              },
              {
                "status": 301,
                "message": "The code you provided for kkr does not use the plugin kkr.kkr"
              },
              {
                "status": 302,
                "message": "The code you provided for voronoi does not use the plugin kkr.voro"
              },
              {
                "status": 303,
                "message": "The voronoi step for the starting potential of the substrate failed."
              },
              {
                "status": 304,
                "message": "The voronoi step for the starting potential of the decimation region failed."
              },
              {
                "status": 305,
                "message": "The deci-out step (writeout of continuation GF) failed."
              }
            ]
          }
        },
        "kkr.dos": {
          "description": [
            "Workchain a DOS calculation with KKR starting from the remoteData node",
            "    of a previous calculation (either Voronoi or KKR).",
            "",
            "    :param wf_parameters: (Dict); Workchain specifications",
            "    :param options: (Dict); specifications for the computer",
            "    :param remote_data: (RemoteData), mandatory; from a KKR or Vornoi calculation",
            "    :param kkr: (Code), mandatory; KKR code running the dos calculation",
            "",
            "    :return result_kkr_dos_wc: (Dict), Information of workflow results",
            "        like Success, last result node, list with convergence behavior"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kkr",
                "required": true,
                "valid_types": "Code",
                "info": "KKRhost Code node used to run the DOS calculation."
              },
              {
                "name": "remote_data",
                "required": true,
                "valid_types": "RemoteData",
                "info": "RemoteData node of the parent calculation."
              },
              {
                "name": "initial_noco_angles",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Initial non-collinear angles for the magnetic moments. See KkrCalculation f ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Computer options used by the workflow."
              },
              {
                "name": "params_kkr_overwrite",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Overwrite some input parameters of the parent KKR calculation."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Workflow parameter (see `kkr_dos_wc.get_wf_defaults()`)."
              }
            ],
            "outputs": [
              {
                "name": "results_wf",
                "required": true,
                "valid_types": "Dict",
                "info": "Results collected by the workflow."
              },
              {
                "name": "dos_data",
                "required": false,
                "valid_types": "XyData",
                "info": "XyData node of the parsed DOS output."
              },
              {
                "name": "dos_data_interpol",
                "required": false,
                "valid_types": "XyData",
                "info": "XyData node of the parsed DOS output, interpolated onto the real axis."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 161,
                "message": "No remote_data was provided as Input"
              },
              {
                "status": 162,
                "message": "The code you provided for kkr does not use the plugin kkr.kkr"
              },
              {
                "status": 163,
                "message": "calc_parameters given are not consistent! Hint: did you give an unknown keyword?"
              },
              {
                "status": 164,
                "message": "calc_parameters not complete"
              },
              {
                "status": 165,
                "message": "dos_params given in wf_params are not valid"
              },
              {
                "status": 166,
                "message": "KKR dos calculation failed"
              }
            ]
          }
        },
        "kkr.eos": {
          "description": [
            "Workchain of an equation of states calculation with KKR.",
            "",
            "    Layout of the workflow:",
            "      1. determine V0, scale_range, etc. from input",
            "      2. run voro_start for V0 and smallest volume",
            "          2.1 get minimum for RMTCORE (needs to be fixed for all calculations to be able to compare total energies",
            "      3. submit kkr_scf calculations for all volumes using RMTCORE setting determined in step 2",
            "      4. collect results"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kkr",
                "required": true,
                "valid_types": "Code",
                "info": "\n            Code entry for the KKRhost calculations.\n            "
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "\n            Initial structure for which the EOS will be calculated.\n       ..."
              },
              {
                "name": "voronoi",
                "required": true,
                "valid_types": "Code",
                "info": "\n            Code entry for the Voronoi calculations.\n            "
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\n            KKR input parameters. Everything (except structural factors) w ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\n            Workfunction specific parameters, controlling the behavior of  ..."
              }
            ],
            "outputs": [
              {
                "name": "eos_results",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "explicit_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "get_explicit_kpoints_path_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "gs_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 221,
                "message": "ERROR: inputs invalid"
              },
              {
                "status": 222,
                "message": "ERROR: need at least 3 successful calculations"
              },
              {
                "status": 223,
                "message": "ERROR: nsteps is smaller than 3, need at least three data points to do fitting"
              },
              {
                "status": 224,
                "message": "given fitfunction name not valid"
              },
              {
                "status": 225,
                "message": "ERROR: kkr_startpot was not successful. Check you inputs."
              }
            ]
          }
        },
        "kkr.gf_writeout": {
          "description": [
            "Workchain of a kkr_flex calculation to calculate the Green function with",
            "    KKR starting from the RemoteData node of a previous calculation (either Voronoi or KKR).",
            "",
            "    :param options: (Dict), Workchain specifications",
            "    :param wf_parameters: (Dict), Workflow parameters that deviate from previous KKR RemoteData",
            "    :param remote_data: (RemoteData), mandatory; from a converged KKR calculation",
            "    :param kkr: (Code), mandatory; KKR code running the flexfile writeout",
            "    :param impurity_info: Dict, mandatory: node specifying information",
            "                          of the impurities in the system",
            "",
            "    :return workflow_info: (Dict), Information of workflow results",
            "                            like success, last result node, list with convergence behavior",
            "    :return GF_host_remote: (RemoteData), host GF of the system"
          ],
          "spec": {
            "inputs": [
              {
                "name": "impurity_info",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "kkr",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "remote_data",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "params_kkr_overwrite",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Set some input parameters of the KKR calculation."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "GF_host_remote",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "workflow_info",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 101,
                "message": "ERROR: the 'impurity_info' input Dict node could not be used"
              },
              {
                "status": 102,
                "message": "ERROR: the code you provided for kkr does not use the plugin kkr.kkr"
              },
              {
                "status": 103,
                "message": "ERROR: No remote_data was provided as Input"
              },
              {
                "status": 104,
                "message": "ERROR: calc_parameters given are not consistent! Hint: did you give an unknown keyword?"
              },
              {
                "status": 105,
                "message": "ERROR: calc_parameters misses keys"
              },
              {
                "status": 106,
                "message": "ERROR: KKR calculation to write out kkrflex files unsuccessful"
              }
            ]
          }
        },
        "kkr.imp": {
          "description": [
            "Workchain of a kkrimp calculation starting either from scratch (with a structure",
            "    and impurity_info node), or with a converged host potential and impurity",
            "    startpotentials, ... to calculate the converged host-impurity potential of the system.",
            "",
            "    :param options: (Dict), Workchain specifications",
            "    :param wf_parameters: (Dict), specifications for the kkr impurity workflow",
            "    :param voro_aux_parameters: (Dict), specification for the auxiliary voronoi calculation for the impurity",
            "    :param kkrimp: (Code), mandatory: KKRimp code converging the host-imp-potential",
            "    :param kkr: (Code), mandatory: KKR code for calculation the host potential",
            "    :param voronoi: (Code), mandatory: Voronoi code to generate the impurity startpot",
            "    :param remote_data_gf: (RemoteData): remote folder of a previous kkrflex",
            "                                         calculation containing the flexfiles ...",
            "    :param remote_data_host: (RemoteData): remote folder of a converged KKR",
            "                                           host calculation",
            "",
            "    :return workflow_info: (Dict), Information of workflow results",
            "    :return last_calc_output_parameters: (Dict), output parameters of",
            "                                         the last called calculation",
            "    :return last_calc_info: (Dict), information of the last called calculation"
          ],
          "spec": {
            "inputs": [
              {
                "name": "impurity_info",
                "required": true,
                "valid_types": "Dict",
                "info": "Information of the impurity like position in the unit cell, screening clust ..."
              },
              {
                "name": "kkr",
                "required": true,
                "valid_types": "Code",
                "info": "KKRhost code used to run GF writeout step."
              },
              {
                "name": "kkrimp",
                "required": true,
                "valid_types": "Code",
                "info": "KKRimp code used to converge the impurity calculation"
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "voronoi",
                "required": true,
                "valid_types": "Code",
                "info": "Voronoi code used to create the impurity starting potential."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Options for running the codes (walltime etc.)."
              },
              {
                "name": "options_voronoi",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Options for running the Voronoi code (if differing from general `options` n ..."
              },
              {
                "name": "params_kkr_overwrite",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Set some input parameters of the KKR calculation for the GF writeout step."
              },
              {
                "name": "remote_data_gf",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "RemoteData node of precomputed host Green function."
              },
              {
                "name": "remote_data_gf_Efshift",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "RemoteData node of precomputed host Green function with Fermi level shift ( ..."
              },
              {
                "name": "remote_data_host",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "RemoteData node of the converged host calculation. Used to write out the ho ..."
              },
              {
                "name": "startpot",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "Set starting potential (e.g. from preconverged calculation"
              },
              {
                "name": "voro_aux_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the auxiliary voronoi starting potential workflow."
              },
              {
                "name": "voro_params_overwrite",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "If given, overwrite the some parameters used as input for auxiliary voronoi ..."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters for the KKRimp selfconsistency workflow."
              }
            ],
            "outputs": [
              {
                "name": "last_calc_info",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "last_calc_output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_data_gf",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "workflow_info",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "converged_potential",
                "required": false,
                "valid_types": "SinglefileData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 141,
                "message": "ERROR: one or more of the codes you provided do not use the necessary plugins: kkr.voro, kkr.kkr, kkr.kkrimp"
              },
              {
                "status": 142,
                "message": "ERROR: since GF writeout step has to be conducted, 'kkrcode' is needed as an input"
              },
              {
                "status": 143,
                "message": "ERROR: neither converged host remote nor GF writeout remote is given as an input. One of them is needed to proceed with this workflow!"
              },
              {
                "status": 144,
                "message": "ERROR: sub-workflow for KKRimp convergence failed"
              },
              {
                "status": 145,
                "message": "ERROR: sub-workflow Kkr_startpot failed (look for failure of voronoi calculation)."
              }
            ]
          }
        },
        "kkr.imp_dos": {
          "description": [
            "Workchain of a DOS calculation for an impurity system starting from a",
            "    converged impurity calculation or workflow",
            "",
            "    :param options: (Dict), computer options",
            "    :param wf_parameters: (Dict), specifications for the DOS",
            "    :param kkr: (Code), mandatory: KKR code for gf_writeout step",
            "    :param kkrimp: (Code), mandatory: KKRimp code for DOS calculation",
            "    :param imp_host_pot: (SinglefileData), mandatory: impurity startpotential",
            "",
            "    :return workflow_info: (Dict), Information on workflow results",
            "    :return last_calc_output_parameters: (Dict), output parameters of",
            "                                         the last called calculation",
            "    :return last_calc_info: (Dict), information of the last called calculation"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kkrimp",
                "required": true,
                "valid_types": "Code",
                "info": "KKRimp code, always needed."
              },
              {
                "name": "gf_dos_remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "RemoteData node of precomputed host GF for DOS energy contour."
              },
              {
                "name": "host_remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "RemoteData node of the (converged) host calculation."
              },
              {
                "name": "imp_pot_sfd",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "impurity potential single file data. Needs also impurity_info node."
              },
              {
                "name": "impurity_info",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "impurity info node that specifies the relation between imp_pot_sfd to the h ..."
              },
              {
                "name": "kkr",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "KKRhost code, needed if gf_dos_remote is not given."
              },
              {
                "name": "kkrimp_remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "RemoteData node of previous (converged) KKRimp calculation."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Computer options (resources, quene name, etc.)."
              },
              {
                "name": "params_kkr_overwrite",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Set some input parameters of the KKR calculation."
              },
              {
                "name": "settings_LDAU",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Settings for LDA+U run (see KkrimpCalculation for details)."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "DOS workflow parameters (energy range, etc.)."
              }
            ],
            "outputs": [
              {
                "name": "dos_data",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "dos_data_interpol",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "last_calc_info",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "last_calc_output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "workflow_info",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "gf_dos_remote",
                "required": false,
                "valid_types": "XyData",
                "info": "RemoteData node of the computed host GF."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 220,
                "message": "Unknown problem detected."
              },
              {
                "status": 221,
                "message": "Unable to find the parent remote_data node that led to the input impurity calculation. You need to specify `host_remote` and `impurity_info` nodes."
              },
              {
                "status": 222,
                "message": "The gf_writeout workflow was not succesful, cannot continue."
              },
              {
                "status": 223,
                "message": "The input nodes `imp_pot_sfd` and `kkrimp_remote` are given but are mutually exclusive"
              },
              {
                "status": 224,
                "message": "KKRhost code node (`inputs.kkr`) is missing if gf_dos_remote is not given."
              },
              {
                "status": 225,
                "message": "`host_remote` node is missing if gf_dos_remote is not given."
              },
              {
                "status": 226,
                "message": "KKRimp sub-workflow failed."
              }
            ]
          }
        },
        "kkr.imp_sub": {
          "description": [
            "Workchain of a kkrimp self consistency calculation starting from the",
            "    host-impurity potential of the system. (Not the entire kkr_imp workflow!)",
            "",
            "    :param options: (Dict), Workchain specifications",
            "    :param wf_parameters: (Dict), specifications for the calculation",
            "    :param host_imp_startpot: (RemoteData), mandatory; input host-impurity potential",
            "    :param kkrimp: (Code), mandatory; KKRimp code converging the host-imp-potential",
            "    :param remote_data: (RemoteData), mandatory; remote folder of a previous",
            "                           kkrflex calculation containing the flexfiles ...",
            "    :param kkrimp_remote: (RemoteData), remote folder of a previous kkrimp calculation",
            "    :param impurity_info: (Dict), Parameter node with information",
            "                          about the impurity cluster",
            "",
            "    :return workflow_info: (Dict), Information of workflow results",
            "                                   like success, last result node, list with",
            "                                   convergence behavior",
            "    :return host_imp_pot: (SinglefileData), output potential of the sytem"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kkrimp",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "host_imp_startpot",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": ""
              },
              {
                "name": "impurity_info",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "kkrimp_remote",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "params_overwrite",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Dict of parameters that are given to the KKRimpCalculation. Overwrites auto ..."
              },
              {
                "name": "remote_data",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "remote_data_Efshift",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": ""
              },
              {
                "name": "settings_LDAU",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "LDA+U settings. See KKRimpCalculation for details."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "workflow_info",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "host_imp_pot",
                "required": false,
                "valid_types": "SinglefileData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 121,
                "message": "ERROR: Not both host-impurity potential and GF remote found in the inputs. Provide either both of them or a RemoteData from a previous kkrimp calculation."
              },
              {
                "status": 122,
                "message": "ERROR: The code you provided for KKRimp does not use the plugin kkr.kkrimp"
              },
              {
                "status": 123,
                "message": "ERROR: Unable to extract parent paremeter node of input remote folder"
              },
              {
                "status": 124,
                "message": "ERROR: No calculation parameters provided"
              },
              {
                "status": 125,
                "message": "ERROR: Last KKRcalc in SUBMISSIONFAILED state!\nstopping now"
              },
              {
                "status": 126,
                "message": "ERROR: Maximal number of KKR restarts reached. Exiting now!"
              },
              {
                "status": 127,
                "message": "ERROR: Last_remote could not be set to a previous succesful calculation"
              },
              {
                "status": 128,
                "message": "ERROR: There are still missing calculation parameters"
              },
              {
                "status": 129,
                "message": "ERROR: Parameters could not be updated"
              },
              {
                "status": 130,
                "message": "ERROR: Last calculation is not in finished state"
              },
              {
                "status": 131,
                "message": "The input `remote_data` node has no valid calculation parent."
              },
              {
                "status": 132,
                "message": "The parent calculation of the input `remote_data` node was not succesful."
              },
              {
                "status": 133,
                "message": "ERROR: Last calculation does not have an output potential."
              }
            ]
          }
        },
        "kkr.jij": {
          "description": [
            "Workchain for calculation of exchange coupling constants Jij and Dij if parent calculation used the SOC solver.",
            "",
            "    inputs::",
            "",
            "        :param wf_parameters: optional Dict node of workchain specifications, contains settings like Jij radius cutoff,",
            "                              selection of sites for i and j and numerical cutoffs. None values in the accuracy sub-dict",
            "                              means that values from parent calculation are coptied.",
            "        :param remote_data: mandatory RemoteData node of parent (i.e. converged) KkrCalculation",
            "        :param kkr: optional Code for KKRhost executable (if not given the same as in the parent calculation is used)",
            "        :param options: optional Dict computer options like scheduler command or parallelization",
            "",
            "    returns::",
            "",
            "        :return jij_data: ArrayData with the arrays 'Jij_expanded' (Table of all Jij and Dij pairs) and 'positions_expanded' (positions of all ij pairs)",
            "        :return structure_jij_sites: StructureData"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kkr",
                "required": true,
                "valid_types": "Code",
                "info": "KKRhost code, needed to run the Jij KkrCalculation"
              },
              {
                "name": "remote_data",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Parent folder of previously converged KkrCalculation"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Computer options (walltime etc.) passed onto KkrCalculation, fall back to s ..."
              },
              {
                "name": "params_kkr_overwrite",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Overwrite some input parameters of the parent KKR calculation."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters of the bandstructure workflow (see output of kkr_bs_wc.get_wf_de ..."
              }
            ],
            "outputs": [
              {
                "name": "jij_data",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "results_wf",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "structure_jij_sites",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 160,
                "message": "The code you provided for kkr does not use the plugin kkr.kkr"
              },
              {
                "status": 161,
                "message": "Parent calculation is not valid"
              },
              {
                "status": 162,
                "message": "KKR Band Structure calculation failed"
              },
              {
                "status": 163,
                "message": "Parsing of Jij calculations failed"
              }
            ]
          }
        },
        "kkr.scf": {
          "description": [
            "Workchain for converging a KKR calculation (SCF).",
            "",
            "    It converges the charge potential.",
            "    Two paths are possible:",
            "",
            "    (1) Start from a structure and run a voronoi calculation first,",
            "    optional with calc_parameters",
            "    (2) Start from an existing Voronoi or KKR calculation, with a remoteData",
            "",
            "    :param wf_parameters: (Dict), Workchain Specifications",
            "    :param options: (Dict); specifications for the computer",
            "    :param structure: (StructureData), Crystal structure",
            "    :param calc_parameters: (Dict), Voronoi/Kkr Parameters",
            "    :param remote_data: (RemoteData), from a KKR, or Voronoi calculation",
            "    :param voronoi: (Code)",
            "    :param kkr: (Code)",
            "",
            "    :return output_kkr_scf_wc_para: (Dict), Information of workflow results",
            "        like Success, last result node, list with convergence behavior",
            "",
            "    minimum input example:",
            "    1. Code1, Code2, Structure, (Parameters), (wf_parameters)",
            "    2. Code2, remote_data, (Parameters), (wf_parameters)",
            "",
            "    maximum input example:",
            "    1. Code1, Code2, Structure, Parameters",
            "        wf_parameters: {'queue_name' : String,",
            "                        'resources' : dict({\"num_machines\": int, \"num_mpiprocs_per_machine\" : int})",
            "                        'walltime' : int}",
            "    2. Code2, (remote-data), wf_parameters as in 1.",
            "",
            "    Hints:",
            "    1. This workflow does not work with local codes!"
          ],
          "spec": {
            "inputs": [
              {
                "name": "kkr",
                "required": true,
                "valid_types": "Code",
                "info": "KKRhost code node which will run the KkrCalculations"
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\n            KKR-specific calculation parameters (LMAX etc.),\n            u ..."
              },
              {
                "name": "initial_noco_angles",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\n            Initial non-collinear angles for the magnetic moments of the\n  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\n            Computer settings used by the calculations in the workflow\n    ..."
              },
              {
                "name": "remote_data",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "\n            RemoteFolder node of a preconverged calculation.\n            C ..."
              },
              {
                "name": "startpot_overwrite",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "\n            Potential SinglefileData, can be used to overwrite\n            ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": "\n            Input structure for which a calculation is started with a\n     ..."
              },
              {
                "name": "voronoi",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "\n            Voronoi code node, needed only if `structure` input node is gi ..."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\n            Settings for the workflow. Use `KkrCalculation.get_wf_defaults ..."
              }
            ],
            "outputs": [
              {
                "name": "output_kkr_scf_wc_ParameterResults",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "final_dosdata_interpol",
                "required": false,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "last_InputParameters",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "last_RemoteData",
                "required": false,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "last_calc_out",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "last_noco_angles",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "results_vorostart",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "starting_dosdata_interpol",
                "required": false,
                "valid_types": "XyData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 221,
                "message": "Unable to extract parent paremeter node of input remote folder"
              },
              {
                "status": 222,
                "message": "The code you provided for kkr does not use the plugin kkr.kkr"
              },
              {
                "status": 223,
                "message": "The code you provided for voronoi does not use the plugin kkr.voro"
              },
              {
                "status": 224,
                "message": "ERROR: StructureData was provided, but no voronoi code was provided"
              },
              {
                "status": 225,
                "message": "ERROR: No StructureData nor remote_data was provided as Input"
              },
              {
                "status": 226,
                "message": "ERROR: kkr_startpot_wc step failed!"
              },
              {
                "status": 227,
                "message": "DOS run unsuccessful. Check inputs."
              },
              {
                "status": 228,
                "message": "ERROR: calc_parameters given are not consistent! Missing mandatory keys"
              },
              {
                "status": 229,
                "message": "ERROR: calc_parameters given are not consistent! Hint: did you give an unknown keyword?"
              },
              {
                "status": 230,
                "message": "ERROR: calc_parameters not given as input but are needed!"
              },
              {
                "status": 231,
                "message": "ERROR: parameter update unsuccessful: some key, value pair not valid!"
              },
              {
                "status": 232,
                "message": "ERROR: calc_parameters misses keys"
              },
              {
                "status": 233,
                "message": "ERROR: last_remote could not be set to a previous successful calculation"
              },
              {
                "status": 234,
                "message": "ERROR: maximal number of KKR restarts reached. Exiting now!"
              },
              {
                "status": 235,
                "message": "ERROR: last KKRcalc in SUBMISSIONFAILED state"
              }
            ]
          }
        },
        "kkr.startpot": {
          "description": [
            "Workchain  create starting potential for a KKR calculation by running",
            "    voronoi and getting the starting DOS for first checks on the validity of the input setting.",
            "    Starts from a structure together with a KKR parameter node.",
            "",
            "    :param wf_parameters: (Dict), Workchain specifications",
            "    :param options: (Dict), specifications for the computer",
            "    :param structure: (StructureData), aiida structure node to begin",
            "        calculation from (needs to contain vacancies, if KKR needs empty spheres)",
            "    :param kkr: (Code)",
            "    :param voronoi: (Code)",
            "    :param calc_parameters: (Dict), KKR parameter set, passed on to voronoi run.",
            "",
            "    :return result_kkr_startpot_wc: (Dict), Information of workflow results",
            "        like Success, last result node, dos array data"
          ],
          "spec": {
            "inputs": [
              {
                "name": "voronoi",
                "required": true,
                "valid_types": "Code",
                "info": "Voronoi code"
              },
              {
                "name": "calc_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "\n            KKR-specific parameters passed onto the VoronoiCalculation (lm ..."
              },
              {
                "name": "kkr",
                "required": false,
                "valid_types": "Code, NoneType",
                "info": "Kkr code, only needed only if DOS is calculated."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Computer options passed onto the calculations"
              },
              {
                "name": "parent_KKR",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "\n            RemoteData node of a KKR calculation which is used to overwrit ..."
              },
              {
                "name": "startpot_overwrite",
                "required": false,
                "valid_types": "SinglefileData, NoneType",
                "info": "\n            Potential which can be used instead of the output potential\n   ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": "\n            Structure for which the starting potential should be construct ..."
              },
              {
                "name": "wf_parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters that control the behavior of the workflow"
              }
            ],
            "outputs": [
              {
                "name": "results_vorostart_wc",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "last_doscal_dosdata",
                "required": false,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "last_doscal_dosdata_interpol",
                "required": false,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "last_doscal_results",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "last_params_voronoi",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "last_voronoi_remote",
                "required": false,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "last_voronoi_results",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The code you provided for kkr does not use the plugin kkr.kkr"
              },
              {
                "status": 202,
                "message": "The code you provided for voronoi does not use the plugin kkr.voro"
              },
              {
                "status": 203,
                "message": "Voronoi calculation unsuccessful. Check inputs"
              },
              {
                "status": 204,
                "message": "Voronoi calculation unsuccessful. Check inputs."
              },
              {
                "status": 205,
                "message": "Voronoi calculation unsuccessful. Structure inconsistent. Maybe you need empty spheres?"
              },
              {
                "status": 206,
                "message": "DOS run unsuccessful. Check inputs."
              },
              {
                "status": 207,
                "message": "Can only take either structure or parent_KKR as input."
              },
              {
                "status": 208,
                "message": "Need either structure or parent_KKR as input."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": false,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "optimize.optimize": {
          "description": [
            "Runs an optimization procedure, given an optimization engine that defines the optimization",
            "    algorithm, and a process which evaluates the function to be optimized."
          ],
          "spec": {
            "inputs": [
              {
                "name": "engine",
                "required": true,
                "valid_types": "Str",
                "info": "Engine that runs the optimization."
              },
              {
                "name": "engine_kwargs",
                "required": true,
                "valid_types": "Dict",
                "info": "Keyword arguments passed to the optimization engine."
              },
              {
                "name": "evaluate_process",
                "required": true,
                "valid_types": "Str",
                "info": "Process which produces the result to be optimized."
              },
              {
                "name": "evaluate",
                "required": false,
                "valid_types": "",
                "info": "Inputs that are passed to all evaluation processes."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "optimal_process_output",
                "required": true,
                "valid_types": "",
                "info": "Output value of the optimal evaluation process."
              },
              {
                "name": "optimal_process_uuid",
                "required": true,
                "valid_types": "",
                "info": "UUID of the optimal evaluation process."
              },
              {
                "name": "engine_outputs",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "optimal_process_input",
                "required": false,
                "valid_types": "",
                "info": "Input value of the optimal evaluation process."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Optimization failed because one of the evaluate processes did not finish ok."
              },
              {
                "status": 202,
                "message": "Optimization failed because the engine did not finish ok."
              }
            ]
          }
        },
        "optimize.wrappers.add_inputs": {
          "description": [
            "Wrapper workchain that takes inputs as keys and values and passes it",
            "    on to a sub-process. This enables taking a process which was not",
            "    designed to be used in optimization, and optimize with respect to",
            "    some arbitrary input. Inputs which always remain the same can be",
            "    specified in the ``inputs`` namespace, whereas the inputs to be",
            "    optimized are given through the ``added_input_keys`` and",
            "    ``added_input_values`` inputs.",
            "",
            "    The outputs of the wrapper workchain are the same as those of",
            "    the wrapped process.",
            "",
            "    The \"added\" inputs can only be BaseType sub-classes, or",
            "    attributes of a Dict. For each input, its port location is given",
            "    in the \"added_input_keys\" input. For example, ``x.y`` would set",
            "    the ``y`` input in the ``x`` namespace.",
            "",
            "    For cases where the input is a Dict attribute, the (possibly nested) attribute name is given after a colon. That means ``x:a.b`` would",
            "    set the ``['a']['b']`` attribute of the ``Dict`` given in the ``x``",
            "    input.",
            "",
            "    In cases where only a single input needs to be added, they can be",
            "    specified directly instead of wrapped in a List."
          ],
          "spec": {
            "inputs": [
              {
                "name": "added_input_keys",
                "required": true,
                "valid_types": "List, Str",
                "info": "Specifies the location of each added input."
              },
              {
                "name": "added_input_values",
                "required": true,
                "valid_types": "List, BaseType",
                "info": "Values of the added inputs to be passed into the sub-process."
              },
              {
                "name": "sub_process",
                "required": true,
                "valid_types": "Str",
                "info": "The class of the process that should be wrapped."
              },
              {
                "name": "inputs",
                "required": false,
                "valid_types": "",
                "info": "Inputs to be passed on to the sub-process."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Workchain failed because the sub-process did not finish ok."
              }
            ]
          }
        },
        "optimize.wrappers.concatenate": {
          "description": [
            "Allows concatenating an arbitrary number of sub-processes.",
            "",
            "    A wrapper workchain that allows concatenating an arbitrary number",
            "    of sub-processes. Outputs of one processes can be configured to",
            "    be passed to the next one."
          ],
          "spec": {
            "inputs": [
              {
                "name": "output_input_mappings",
                "required": true,
                "valid_types": "List",
                "info": "Defines how inputs are passed between sub-processes. Each list entry entry  ..."
              },
              {
                "name": "process_inputs",
                "required": true,
                "valid_types": "",
                "info": "Inputs which are passed on to the sub-processes. The inputs should be group ..."
              },
              {
                "name": "process_labels",
                "required": true,
                "valid_types": "List",
                "info": "A list of pairs (label, process_name). The labels can be any string, the pr ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "process_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 200,
                "message": "Workchain failed because a sub-process failed."
              }
            ]
          }
        },
        "optimize.wrappers.create_evaluate": {
          "description": [
            "Wrapper workchain to combine two processes: The first process _creates_",
            "    a result, and the second _evaluates_ that result.",
            "",
            "    The purpose of this workchain is to facilitate optimization of processes",
            "    which don't natively produce an output that can be optimized, by only",
            "    having to add the 'evaluation' part."
          ],
          "spec": {
            "inputs": [
              {
                "name": "create",
                "required": true,
                "valid_types": "",
                "info": "Inputs which are passed on to the create sub-process."
              },
              {
                "name": "create_process",
                "required": true,
                "valid_types": "Str",
                "info": "The sub-process which performs the create step."
              },
              {
                "name": "evaluate_process",
                "required": true,
                "valid_types": "Str",
                "info": "The sub-process which performs the evaluate step."
              },
              {
                "name": "output_input_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": "A mapping from output names of the create process to input names of the eva ..."
              },
              {
                "name": "evaluate",
                "required": false,
                "valid_types": "",
                "info": "Inputs which are passed on to the evaluate sub-process."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "create",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "evaluate",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Workchain failed because the 'create' sub-process failed."
              },
              {
                "status": 202,
                "message": "Workchain failed because the 'evaluate' sub-process failed."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "psi4": {
          "description": [
            "AiiDA calculation plugin wrapping the psi4 executable."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "psiapi",
                "required": false,
                "valid_types": "Str, SinglefileData",
                "info": "Psi4 input in PsiAPI python format"
              },
              {
                "name": "qcschema",
                "required": false,
                "valid_types": "Dict, AtomicInput",
                "info": "Psi4 input in QCSchema JSON format"
              }
            ],
            "outputs": [
              {
                "name": "qcschema",
                "required": true,
                "valid_types": "Dict",
                "info": "Psi4 output in QCSchema JSON format"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "stdout",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Psi4 logfile"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 100,
                "message": "Calculation did not produce all expected output files."
              },
              {
                "status": 101,
                "message": "Psi4 reported calculation as unsuccessful."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "siesta.siesta": {
          "description": [
            "Siesta calculator class for AiiDA."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure"
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "lua",
                "required": false,
                "valid_types": "",
                "info": "Script and files for the Lua engine"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optical",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The calculation results"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Optional band structure"
              },
              {
                "name": "forces_and_stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Optional forces and stress"
              },
              {
                "name": "ion_files",
                "required": false,
                "valid_types": "IonData",
                "info": ""
              },
              {
                "name": "optical_eps2",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Optional eps2 optical data"
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Optional relaxed structure"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 350,
                "message": "Statement \"Job completed\" not detected, unknown error"
              },
              {
                "status": 448,
                "message": "Problems in the polarization of a basis element"
              },
              {
                "status": 449,
                "message": "Split_norm parameter too small"
              },
              {
                "status": 450,
                "message": "Calculation did not reach scf convergence!"
              },
              {
                "status": 451,
                "message": "Calculation did not reach geometry convergence!"
              },
              {
                "status": 452,
                "message": "Bands analysis was requested, but file is not present"
              },
              {
                "status": 453,
                "message": "Failure while parsing the bands file"
              },
              {
                "status": 454,
                "message": "Optical calculation requested, but file is not present"
              }
            ]
          }
        },
        "siesta.stm": {
          "description": [
            "Plugin for the \"plstm\" program in the Siesta distribution.",
            "",
            "    The \"plstm\" program takes the .LDOS file and generates a plot file with a simulated STM image.",
            "    It supports both the old \"plstm\" versions (inputs in a files) and the new ones (inputs in the command",
            "    line). Spin options are supported only in recent \"plstm\" versions, therefore ignored otherwise."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "ldos_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Parent folder"
              },
              {
                "name": "mode",
                "required": true,
                "valid_types": "Str",
                "info": "Allowed values are \"constant-height\" or \"constant-current\""
              },
              {
                "name": "value",
                "required": true,
                "valid_types": "Float",
                "info": "Value of height in Ang or value of current in e/bohr**3"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              },
              {
                "name": "spin_option",
                "required": false,
                "valid_types": "Str",
                "info": "Spin option follows plstm sintax: \"q\" no spin, \"s\" total spin, \"x\",\"y\",\"z\"  ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "For the moment only parser version and name of .STM file"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "stm_array",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The contour data for the STM image"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 101,
                "message": "The retrieved folder does not contain a CH.STM file"
              },
              {
                "status": 102,
                "message": "The .STM file can not be read"
              },
              {
                "status": 102,
                "message": "The array containing the STM data can not be produced"
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "optimize.optimize": {
          "description": [
            "Runs an optimization procedure, given an optimization engine that defines the optimization",
            "    algorithm, and a process which evaluates the function to be optimized."
          ],
          "spec": {
            "inputs": [
              {
                "name": "engine",
                "required": true,
                "valid_types": "Str",
                "info": "Engine that runs the optimization."
              },
              {
                "name": "engine_kwargs",
                "required": true,
                "valid_types": "Dict",
                "info": "Keyword arguments passed to the optimization engine."
              },
              {
                "name": "evaluate_process",
                "required": true,
                "valid_types": "Str",
                "info": "Process which produces the result to be optimized."
              },
              {
                "name": "evaluate",
                "required": false,
                "valid_types": "",
                "info": "Inputs that are passed to all evaluation processes."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "optimal_process_output",
                "required": true,
                "valid_types": "",
                "info": "Output value of the optimal evaluation process."
              },
              {
                "name": "optimal_process_uuid",
                "required": true,
                "valid_types": "",
                "info": "UUID of the optimal evaluation process."
              },
              {
                "name": "engine_outputs",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "optimal_process_input",
                "required": false,
                "valid_types": "",
                "info": "Input value of the optimal evaluation process."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Optimization failed because one of the evaluate processes did not finish ok."
              },
              {
                "status": 202,
                "message": "Optimization failed because the engine did not finish ok."
              }
            ]
          }
        },
        "optimize.wrappers.add_inputs": {
          "description": [
            "Wrapper workchain that takes inputs as keys and values and passes it",
            "    on to a sub-process. This enables taking a process which was not",
            "    designed to be used in optimization, and optimize with respect to",
            "    some arbitrary input. Inputs which always remain the same can be",
            "    specified in the ``inputs`` namespace, whereas the inputs to be",
            "    optimized are given through the ``added_input_keys`` and",
            "    ``added_input_values`` inputs.",
            "",
            "    The outputs of the wrapper workchain are the same as those of",
            "    the wrapped process.",
            "",
            "    The \"added\" inputs can only be BaseType sub-classes, or",
            "    attributes of a Dict. For each input, its port location is given",
            "    in the \"added_input_keys\" input. For example, ``x.y`` would set",
            "    the ``y`` input in the ``x`` namespace.",
            "",
            "    For cases where the input is a Dict attribute, the (possibly nested) attribute name is given after a colon. That means ``x:a.b`` would",
            "    set the ``['a']['b']`` attribute of the ``Dict`` given in the ``x``",
            "    input.",
            "",
            "    In cases where only a single input needs to be added, they can be",
            "    specified directly instead of wrapped in a List."
          ],
          "spec": {
            "inputs": [
              {
                "name": "added_input_keys",
                "required": true,
                "valid_types": "List, Str",
                "info": "Specifies the location of each added input."
              },
              {
                "name": "added_input_values",
                "required": true,
                "valid_types": "List, BaseType",
                "info": "Values of the added inputs to be passed into the sub-process."
              },
              {
                "name": "sub_process",
                "required": true,
                "valid_types": "Str",
                "info": "The class of the process that should be wrapped."
              },
              {
                "name": "inputs",
                "required": false,
                "valid_types": "",
                "info": "Inputs to be passed on to the sub-process."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Workchain failed because the sub-process did not finish ok."
              }
            ]
          }
        },
        "optimize.wrappers.concatenate": {
          "description": [
            "Allows concatenating an arbitrary number of sub-processes.",
            "",
            "    A wrapper workchain that allows concatenating an arbitrary number",
            "    of sub-processes. Outputs of one processes can be configured to",
            "    be passed to the next one."
          ],
          "spec": {
            "inputs": [
              {
                "name": "output_input_mappings",
                "required": true,
                "valid_types": "List",
                "info": "Defines how inputs are passed between sub-processes. Each list entry entry  ..."
              },
              {
                "name": "process_inputs",
                "required": true,
                "valid_types": "",
                "info": "Inputs which are passed on to the sub-processes. The inputs should be group ..."
              },
              {
                "name": "process_labels",
                "required": true,
                "valid_types": "List",
                "info": "A list of pairs (label, process_name). The labels can be any string, the pr ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "process_outputs",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 200,
                "message": "Workchain failed because a sub-process failed."
              }
            ]
          }
        },
        "optimize.wrappers.create_evaluate": {
          "description": [
            "Wrapper workchain to combine two processes: The first process _creates_",
            "    a result, and the second _evaluates_ that result.",
            "",
            "    The purpose of this workchain is to facilitate optimization of processes",
            "    which don't natively produce an output that can be optimized, by only",
            "    having to add the 'evaluation' part."
          ],
          "spec": {
            "inputs": [
              {
                "name": "create",
                "required": true,
                "valid_types": "",
                "info": "Inputs which are passed on to the create sub-process."
              },
              {
                "name": "create_process",
                "required": true,
                "valid_types": "Str",
                "info": "The sub-process which performs the create step."
              },
              {
                "name": "evaluate_process",
                "required": true,
                "valid_types": "Str",
                "info": "The sub-process which performs the evaluate step."
              },
              {
                "name": "output_input_mapping",
                "required": true,
                "valid_types": "Dict",
                "info": "A mapping from output names of the create process to input names of the eva ..."
              },
              {
                "name": "evaluate",
                "required": false,
                "valid_types": "",
                "info": "Inputs which are passed on to the evaluate sub-process."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "create",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "evaluate",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Workchain failed because the 'create' sub-process failed."
              },
              {
                "status": 202,
                "message": "Workchain failed because the 'evaluate' sub-process failed."
              }
            ]
          }
        },
        "siesta.bandgap": {
          "description": [
            "Workchain to obtain the bands and bandgap of a structure through Siesta.",
            "",
            "    If \"bandskpoints\" are set in inputs, it behaves like `SiestaBaseWorkChain`",
            "    adding just the bandgap calculation at the end. If no bandskpoints",
            "    was specified, the bands are computed anyway on a kpoints path automatically",
            "    assigned using seekpath and the input (output) structure",
            "    of the single-point (relaxation/md) calculation."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure"
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "lua",
                "required": false,
                "valid_types": "",
                "info": "Script and files for the Lua engine"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optical",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "seekpath_dict",
                "required": false,
                "valid_types": "Dict",
                "info": "dictionary of seekpath parameters that are pased to `get_explicit_kpoints_p ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The calculation results"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "band_gap_info",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Optional band structure"
              },
              {
                "name": "forces_and_stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Optional forces and stress"
              },
              {
                "name": "ion_files",
                "required": false,
                "valid_types": "IonData",
                "info": ""
              },
              {
                "name": "optical_eps2",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Optional eps2 optical data"
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Optional relaxed structure"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 200,
                "message": "The main SiestaBaseWorkChain failed"
              },
              {
                "status": 201,
                "message": "The SiestaBaseWorkChain to obtain the bands failed"
              }
            ]
          }
        },
        "siesta.base": {
          "description": [
            "Base Workchain to launch a total energy calculation via Siesta."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure"
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "lua",
                "required": false,
                "valid_types": "",
                "info": "Script and files for the Lua engine"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optical",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The calculation results"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Optional band structure"
              },
              {
                "name": "forces_and_stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Optional forces and stress"
              },
              {
                "name": "ion_files",
                "required": false,
                "valid_types": "IonData",
                "info": ""
              },
              {
                "name": "optical_eps2",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Optional eps2 optical data"
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Optional relaxed structure"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 403,
                "message": "Basis polarization problem."
              },
              {
                "status": 404,
                "message": "Error in the parsing of bands"
              }
            ]
          }
        },
        "siesta.baseneb": {
          "description": [
            "Workchain to run a NEB MEP optimization starting from a guessed path.",
            "",
            "    In theory, such task can be accomplished using directly the SiestaCalculation",
            "    and passing the guessed path as xyz files in lua.input_files input (see",
            "    `examples/plugins/siesta/example_neb.py`). Here, instead, the",
            "    guessed path must be specified as a set of structures in a `TrajectoryData` object.",
            "    The structures in `TrajectoryData` are then transformed in xyz files and placed",
            "    in a directory that is the passed to lua.input_files when the SiestaCalculation is called.",
            "    This better preserves the provenance. Moreover allows cleaner use of ghost (often necessaries)",
            "    Finally, we have a dedicated output containing all the NEB quantities.",
            "    This workchain can also become the place where to deal with possible errors due",
            "    to the lua features."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "neb_script",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Lua script for NEB engine"
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": "Options"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "starting_path",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": "Starting Path"
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optical",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              },
              {
                "name": "spring_constant",
                "required": false,
                "valid_types": "Float",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "neb_output_package",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The NEB calculation failed"
              },
              {
                "status": 202,
                "message": "The .xyz files or the NEB.results file could not be retrieved"
              }
            ]
          }
        },
        "siesta.basis_optimization": {
          "description": [
            "WorkChain for basis optimization."
          ],
          "spec": {
            "inputs": [
              {
                "name": "optimization_schema",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "siesta_base",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "simplex",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "add_orbital",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": ""
              },
              {
                "name": "basis_sizes",
                "required": false,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "sizes_monitored_quantity",
                "required": false,
                "valid_types": "Str",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "optimal_basis_block",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 200,
                "message": "The SiestaIterator running pao sizes failed"
              },
              {
                "status": 201,
                "message": "The basis optimization failed, probably not sufficient steps"
              },
              {
                "status": 202,
                "message": "The basis optimization failed, probably not sufficient steps"
              }
            ]
          }
        },
        "siesta.converger": {
          "description": [
            "Only connects the two parent classes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "iterate_over",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary where each key is the name of a parameter we want to iterate\n  ..."
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "batch_size",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of simulations that should run at the same time.\n        ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "iterate_mode",
                "required": false,
                "valid_types": "Str",
                "info": "Indicates the way the parameters should be iterated.\n            Currently  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "lua",
                "required": false,
                "valid_types": "",
                "info": "Script and files for the Lua engine"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optical",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Input structure"
              },
              {
                "name": "target",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "The parameter that you want to track."
              },
              {
                "name": "threshold",
                "required": false,
                "valid_types": "Int, Float",
                "info": "The maximum difference between two consecutive steps to consider that conve ..."
              }
            ],
            "outputs": [
              {
                "name": "converged",
                "required": true,
                "valid_types": "",
                "info": "Whether the target has converged"
              },
              {
                "name": "converged_parameters",
                "required": false,
                "valid_types": "",
                "info": "The values for the parameters that was enough to achieve convergence. If co ..."
              },
              {
                "name": "converged_target_value",
                "required": false,
                "valid_types": "",
                "info": "The value of the target with convergence reached."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "siesta.eos": {
          "description": [
            "WorkChain to calculate the equation of state of a solid.",
            "",
            "    The cell shape is fixed, only the volume is rescaled.",
            "    In particular the volumes considered are 7 equidistant volumes",
            "    around a starting volume. The starting volume is",
            "    an optional input of the WorkChain (called volume_per_atom).",
            "    If not specified, the input structure volume is used with no modifications.",
            "    All the SiestaBaseWorkChain inputs are other inputs of the workchain.",
            "    This WorkChain also tries to perform a Birch_Murnaghan fit",
            "    on the calculatad E(V) data."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure"
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "batch_size",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of simulations that should run at the same time.\n        ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "iterate_mode",
                "required": false,
                "valid_types": "Str",
                "info": "Indicates the way the parameters should be iterated.\n            Currently  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "lua",
                "required": false,
                "valid_types": "",
                "info": "Script and files for the Lua engine"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optical",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "scales",
                "required": false,
                "valid_types": "",
                "info": "\n            Factors by which the structure should be scaled.\n            "
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              },
              {
                "name": "volume_per_atom",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Volume per atom around which to perform the EqOfState"
              }
            ],
            "outputs": [
              {
                "name": "results_dict",
                "required": true,
                "valid_types": "Dict",
                "info": "Containing the calculated E(V) data and, if the fit is sucessfull, the resu ..."
              },
              {
                "name": "equilibrium_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Equilibrium volume structure. Returned only if the fit is succesfull"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "siesta.epsilon": {
          "description": [
            "Workchain to obtain the electronic contribution to the static dielectric constant using Siesta."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "optical",
                "required": true,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure"
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "lua",
                "required": false,
                "valid_types": "",
                "info": "Script and files for the Lua engine"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The calculation results"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Optional band structure"
              },
              {
                "name": "epsilon",
                "required": false,
                "valid_types": "Float",
                "info": "Low-frequency dielectric constant"
              },
              {
                "name": "forces_and_stress",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Optional forces and stress"
              },
              {
                "name": "ion_files",
                "required": false,
                "valid_types": "IonData",
                "info": ""
              },
              {
                "name": "optical_eps2",
                "required": false,
                "valid_types": "ArrayData",
                "info": "Optional eps2 optical data"
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Optional relaxed structure"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 403,
                "message": "Basis polarization problem."
              },
              {
                "status": 404,
                "message": "Error in the parsing of bands"
              }
            ]
          }
        },
        "siesta.forbasisopt": {
          "description": [
            "Wrapper of SiestaBaseWorkChain.",
            "",
            "    Class wrapping the SiestaBaseWorkChain with the scope of",
            "    assigning the variables of the optimization process to the right",
            "    input of the SiestaBaseWorkChain."
          ],
          "spec": {
            "inputs": [
              {
                "name": "lower_bounds",
                "required": true,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "out_name",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "siesta_base",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "the_names",
                "required": true,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "the_values",
                "required": true,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "upper_bounds",
                "required": true,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "ene",
                "required": true,
                "valid_types": "Float",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "siesta.iterator": {
          "description": [
            "Iterator for the SietaBaseWorkChain.",
            "",
            "    The iterator is extended to iterate over any Siesta keyword.",
            "    WARNING: if a keyword not recognized by Siesta is used in `iterate_over`, the iterator will not",
            "    complain. It will just add the keyword to the parameters dict and run the calculation!"
          ],
          "spec": {
            "inputs": [
              {
                "name": "iterate_over",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary where each key is the name of a parameter we want to iterate\n  ..."
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "batch_size",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of simulations that should run at the same time.\n        ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "iterate_mode",
                "required": false,
                "valid_types": "Str",
                "info": "Indicates the way the parameters should be iterated.\n            Currently  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "lua",
                "required": false,
                "valid_types": "",
                "info": "Script and files for the Lua engine"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optical",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Input structure"
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "siesta.sequential_converger": {
          "description": [
            "An iterator of convergers."
          ],
          "spec": {
            "inputs": [
              {
                "name": "converger_inputs",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "iterate_over",
                "required": true,
                "valid_types": "List",
                "info": "A dictionary where each key is the name of a parameter we want to iterate\n  ..."
              },
              {
                "name": "batch_size",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of simulations that should run at the same time.\n        ..."
              },
              {
                "name": "iterate_mode",
                "required": false,
                "valid_types": "Str",
                "info": "Indicates the way the parameters should be iterated.\n            Currently  ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "converged_parameters",
                "required": true,
                "valid_types": "",
                "info": "The values for the parameters that was enough to achieve convergence. If co ..."
              },
              {
                "name": "converged_target_value",
                "required": false,
                "valid_types": "",
                "info": "The value of the target with convergence reached."
              },
              {
                "name": "unconverged_parameters",
                "required": false,
                "valid_types": "",
                "info": "The list of unconverged parameters."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "siesta.simplex_basis": {
          "description": [
            "Workchain running a simple NelderMead optimization (simplex) varing variables defined in the basis dictionaries."
          ],
          "spec": {
            "inputs": [
              {
                "name": "siesta_base",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "simplex",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "last_simplex",
                "required": true,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "optimal_process_output",
                "required": true,
                "valid_types": "",
                "info": "Output value of the optimal evaluation process."
              },
              {
                "name": "optimal_process_uuid",
                "required": true,
                "valid_types": "",
                "info": "UUID of the optimal evaluation process."
              },
              {
                "name": "optimal_process_input",
                "required": false,
                "valid_types": "",
                "info": "Input value of the optimal evaluation process."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 200,
                "message": "The OptimizationWorkChain did not finished"
              }
            ]
          }
        },
        "siesta.stm": {
          "description": [
            "STM Workchain.",
            "",
            "    This workchain runs a DFT calculation with siesta, calculates",
            "    the local density of states in an energy window specified by the user (stored",
            "    in a .LDOS file) and post-process it in order to produce simulated STM images."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Input code"
              },
              {
                "name": "emax",
                "required": true,
                "valid_types": "Float",
                "info": "Higher boundary energy (in eV respect to Ef) for LDOS calculation"
              },
              {
                "name": "emin",
                "required": true,
                "valid_types": "Float",
                "info": "Lower boundary energy (in eV respect to Ef) for LDOS calculation"
              },
              {
                "name": "options",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "stm_code",
                "required": true,
                "valid_types": "Code",
                "info": "STM plstm code"
              },
              {
                "name": "stm_mode",
                "required": true,
                "valid_types": "Str",
                "info": "Allowed values are \"constant-height\" or \"constant-current\""
              },
              {
                "name": "stm_spin",
                "required": true,
                "valid_types": "Str",
                "info": "Allowed values are \"none\", \"collinear\" or \"non-collinear\""
              },
              {
                "name": "stm_value",
                "required": true,
                "valid_types": "Float",
                "info": "Value of height in Ang or value of current in e/bohr**3"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure"
              },
              {
                "name": "bandskpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints for bands"
              },
              {
                "name": "basis",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input basis"
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "ions",
                "required": false,
                "valid_types": "IonData",
                "info": "Input ion file"
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoints"
              },
              {
                "name": "lua",
                "required": false,
                "valid_types": "",
                "info": "Script and files for the Lua engine"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optical",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Specifications for optical properties"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Parent folder"
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "PsfData, PsmlData",
                "info": "Input pseudo potentials"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Input settings"
              },
              {
                "name": "stm_options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "STM plstm code resources and options"
              }
            ],
            "outputs": [
              {
                "name": "stm_array",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 200,
                "message": "The main SiestaBaseWorkChain failed"
              },
              {
                "status": 201,
                "message": "The SiestaBaseWorkChain to obtain the .LDOS file failed"
              },
              {
                "status": 202,
                "message": "The STM post-process failed"
              }
            ]
          }
        },
        "siesta.two_step_basis_opt": {
          "description": [
            "Optimization that is more similar to the simplex code in the siesta utils.",
            "",
            "    The optimization has two levels, a \"marcrostep\" that consists in the restart of",
            "    a simplex with gradual reduction of the dimention of the initial simplex."
          ],
          "spec": {
            "inputs": [
              {
                "name": "macrostep",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "siesta_base",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "simplex",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "last_simplex",
                "required": true,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "optimal_process_output",
                "required": true,
                "valid_types": "",
                "info": "Output value of the optimal evaluation process."
              },
              {
                "name": "optimal_process_uuid",
                "required": true,
                "valid_types": "",
                "info": "UUID of the optimal evaluation process."
              },
              {
                "name": "optimal_process_input",
                "required": false,
                "valid_types": "",
                "info": "Input value of the optimal evaluation process."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "quantumespresso.cp": {
          "description": [
            "`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "Parallelization options. The following flags are allowed:\n"
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 304,
                "message": "The retrieved folder contains multiple XML files."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The required XML file could not be read."
              },
              {
                "status": 330,
                "message": "The required POS file could not be read."
              },
              {
                "status": 340,
                "message": "The required trajectory data could not be read."
              }
            ]
          }
        },
        "quantumespresso.create_kpoints_from_distance": {
          "description": [
            "Generate a uniformly spaced kpoint mesh for a given structure.",
            "",
            "    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.",
            "",
            "    :param structure: the StructureData to which the mesh should apply",
            "    :param distance: a Float with the desired distance between kpoints in reciprocal space",
            "    :param force_parity: a Bool to specify whether the generated mesh should maintain parity",
            "    :returns: a KpointsData with the generated mesh"
          ],
          "spec": {
            "inputs": [
              {
                "name": "distance",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "force_parity",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.dos": {
          "description": [
            "`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The dos file could not be read from the retrieved folder."
              }
            ]
          }
        },
        "quantumespresso.epw": {
          "description": [
            "`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine kpoint mesh"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse kpoint mesh"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder_nscf",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed nscf `PwCalculation`"
              },
              {
                "name": "parent_folder_ph",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PhCalculation`"
              },
              {
                "name": "qfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine qpoint mesh"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse qpoint mesh"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "quantumespresso.matdyn": {
          "description": [
            "`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "Kpoints on which to calculate the phonon frequencies."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The output frequencies file could not be read from the retrieved folder."
              },
              {
                "status": 410,
                "message": "Number of kpoints not found in the output data"
              },
              {
                "status": 411,
                "message": "Number of kpoints in the inputs is not commensurate with those in the output"
              }
            ]
          }
        },
        "quantumespresso.namelists": {
          "description": [
            "`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "quantumespresso.neb": {
          "description": [
            "Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "first_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Initial structure"
              },
              {
                "name": "last_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Final structure"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "NEB-specific input parameters"
              },
              {
                "name": "pw",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              }
            ],
            "outputs": [
              {
                "name": "output_mep",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The original and interpolated energy profiles along the minimum-energy path ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters dictionary of the NEB calculation"
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "iteration_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              }
            ]
          }
        },
        "quantumespresso.ph": {
          "description": [
            "`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PwCalculation`"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "qpoint mesh"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The minimization cycle did not reach self-consistency."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              }
            ]
          }
        },
        "quantumespresso.pp": {
          "description": [
            "`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job is performed."
              }
            ],
            "outputs": [
              {
                "name": "output_data",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_data_multiple",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The parent folder did not contain the required XML output file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete."
              },
              {
                "status": 330,
                "message": "The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."
              },
              {
                "status": 331,
                "message": "The formatted data output file `{filename}` could not be read."
              },
              {
                "status": 332,
                "message": "The data file format is not supported by the parser"
              },
              {
                "status": 333,
                "message": "The formatted data output file `{filename}` could not be parsed"
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              }
            ]
          }
        },
        "quantumespresso.projwfc": {
          "description": [
            "`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.",
            "",
            "    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch",
            "    wavefunctions onto atomic orbitals.",
            "",
            "    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "Dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_down",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_up",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "projections",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_down",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_up",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 330,
                "message": "The pdos_tot file could not be read from the retrieved folder."
              },
              {
                "status": 340,
                "message": "An exception was raised parsing bands and projections."
              }
            ]
          }
        },
        "quantumespresso.pw": {
          "description": [
            "`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw2gw": {
          "description": [
            "`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "eps",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation.`"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "The eps*.dat output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The eps*.dat output files do not have the expected shape (N, 2)."
              },
              {
                "status": 331,
                "message": "The eps*.dat output files contains different values of energies."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              }
            ]
          }
        },
        "quantumespresso.pw2wannier90": {
          "description": [
            "`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.",
            "",
            "    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "nnkp_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "A SinglefileData containing the .nnkp file generated by wannier90.x -pp"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message"
              },
              {
                "status": 350,
                "message": "An error happened while parsing the output file"
              }
            ]
          }
        },
        "quantumespresso.pwimmigrant": {
          "description": [
            "Create a PwCalculation object that can be used to import old jobs.",
            "",
            "    This is a sublass of aiida_quantumespresso.calculations.PwCalculation",
            "    with slight modifications to some of the class variables and additional",
            "    methods that",
            "",
            "        a. parse the job's input file to create the calculation's input",
            "           nodes that would exist if the calculation were submitted using AiiDa,",
            "        b. bypass the functions of the daemon, and prepare the node's attributes",
            "           such that all the processes (copying of the files to the repository,",
            "           results parsing, ect.) can be performed",
            "",
            "    .. note:: The keyword arguments of PwCalculation are also available.",
            "",
            "    :param remote_workdir: Absolute path to the directory where the job was run.",
            "        The transport of the computer you link ask input to the calculation is",
            "        the transport that will be used to retrieve the calculation's files.",
            "        Therefore, ``remote_workdir`` should be the absolute path to the job's",
            "        directory on that computer.",
            "    :type remote_workdir: str",
            "",
            "    :param input_file_name: The file name of the job's input file.",
            "    :type input_file_name: str",
            "",
            "    :param output_file_name: The file name of the job's output file (i.e. the",
            "        file containing the stdout of QE).",
            "    :type output_file_name: str"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.q2r": {
          "description": [
            "`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The force constants file could not be read."
              }
            ]
          }
        },
        "quantumespresso.seekpath_structure_analysis": {
          "description": [
            "Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.",
            "",
            "    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the",
            "    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the",
            "    original structure in which case the k-points are only congruent with the primitive cell.",
            "",
            "    The keyword arguments can be used to specify various Seekpath parameters, such as:",
            "",
            "        with_time_reversal: True",
            "        reference_distance: 0.025",
            "        recipe: 'hpkot'",
            "        threshold: 1e-07",
            "        symprec: 1e-05",
            "        angle_tolerance: -1.0",
            "",
            "    Note that exact parameters that are available and their defaults will depend on your Seekpath version."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "yambo.yambo": {
          "description": [
            "AiiDA plugin for the Yambo code.",
            "    For more information, refer to http://www.yambo-code.org/",
            "    https://github.com/yambo-code/yambo-aiida and http://aiida-yambo.readthedocs.io/en/latest/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "Use a main code for yambo calculation"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Use a remote folder as parent folder (for \"restarts and similar\""
              },
              {
                "name": "settings",
                "required": true,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "precode_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the yambo precode"
              },
              {
                "name": "preprocessing_code",
                "required": false,
                "valid_types": "Code",
                "info": "Use a preprocessing code for starting yambo"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "returns the output parameters"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "array_alpha",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the alpha array"
              },
              {
                "name": "array_alpha_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the alpha array"
              },
              {
                "name": "array_alpha_bands",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the alpha array bands"
              },
              {
                "name": "array_eels",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the eels array"
              },
              {
                "name": "array_eps",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the eps array"
              },
              {
                "name": "array_ndb",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the array for ndb"
              },
              {
                "name": "array_ndb_HFlocXC",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the array ndb for HFlocXC"
              },
              {
                "name": "array_ndb_QP",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the array for ndbQP"
              },
              {
                "name": "array_qp",
                "required": false,
                "valid_types": "ArrayData",
                "info": "returns the quasiparticle array band structure"
              },
              {
                "name": "bands_quasiparticle",
                "required": false,
                "valid_types": "BandsData",
                "info": "returns the quasiparticle band structure"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "system_info",
                "required": false,
                "valid_types": "Dict",
                "info": "returns some system information after a p2y"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 500,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 501,
                "message": "time exceeded the max walltime"
              },
              {
                "status": 502,
                "message": "failed calculation for some reason: could be a low number of conduction bands"
              },
              {
                "status": 503,
                "message": "Unexpected behavior of YamboFolder"
              },
              {
                "status": 504,
                "message": "parallelization error"
              },
              {
                "status": 505,
                "message": "general memory error"
              },
              {
                "status": 506,
                "message": "x_par allocation memory error"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "quantumespresso.matdyn.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "matdyn",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pdos": {
          "description": [
            "A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."
          ],
          "spec": {
            "inputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": "Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax`  ..."
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` of the `nscf` calculation."
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "",
                "info": "Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Em ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "align_to_fermi",
                "required": false,
                "valid_types": "Bool",
                "info": "If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, work directories of all called calculation will be cleaned at  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` of the `scf` calculation."
              },
              {
                "name": "serial_clean",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, calculations will be run in serial, and work directories will  ..."
              }
            ],
            "outputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."
              },
              {
                "status": 401,
                "message": "the SCF sub process failed"
              },
              {
                "status": 402,
                "message": "the NSCF sub process failed"
              },
              {
                "status": 403,
                "message": "the DOS sub process failed"
              },
              {
                "status": 404,
                "message": "the PROJWFC sub process failed"
              },
              {
                "status": 404,
                "message": "both the DOS and PROJWFC sub process failed"
              }
            ]
          }
        },
        "quantumespresso.ph.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ph",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "only_initialization",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pw.band_structure": {
          "description": [
            "Workchain to automatically compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
            "",
            "    .. deprecated:: 4.0.0",
            "        This work chain has been replaced by the ``PwBandsWorkchain``."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `pw.x` code to use for the `PwCalculations`."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional `options` to use for the `PwCalculations`."
              },
              {
                "name": "protocol",
                "required": false,
                "valid_types": "Dict",
                "info": "The protocol to use for the workchain."
              }
            ],
            "outputs": [
              {
                "name": "band_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "primitive_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "scf_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "seekpath_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Input `StructureData` contains an unsupported kind."
              },
              {
                "status": 401,
                "message": "The `PwBandsWorkChain` sub process failed."
              }
            ]
          }
        },
        "quantumespresso.pw.bands": {
          "description": [
            "Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
            "",
            "    The logic for the computation of various parameters for the BANDS step is as follows:",
            "",
            "    Number of bands:",
            "        One can specify the number of bands to be used in the BANDS step either directly through the input parameters",
            "        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When",
            "        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being",
            "        used. If the `nbands_factor` is specified the maximum value of the following values will be used:",
            "",
            "        * `nbnd` of the preceding SCF calculation",
            "        * 0.5 * nspin * nelectrons * nbands_factor",
            "        * 0.5 * nspin * nelectrons + 4 * nspin",
            "",
            "    Kpoints:",
            "        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the",
            "        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.",
            "        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry",
            "        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that",
            "        of `bands_kpoints_distance` or the SeekPath default if not specified."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` for the BANDS calculation."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "bands_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "Explicit kpoints to use for the BANDS calculation. Specify either this or ` ..."
              },
              {
                "name": "bands_kpoints_distance",
                "required": false,
                "valid_types": "Float",
                "info": "Minimum kpoints distance for the BANDS calculation. Specify either this or  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nbands_factor",
                "required": false,
                "valid_types": "Float",
                "info": "The number of bands for the BANDS calculation is that used for the SCF mult ..."
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "",
                "info": "Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation  ..."
              }
            ],
            "outputs": [
              {
                "name": "band_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the BANDS `PwBaseWorkChain`."
              },
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "BandsData",
                "info": "The computed band structure."
              },
              {
                "name": "scf_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "primitive_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The normalized and primitivized structure for which the bands are computed."
              },
              {
                "name": "seekpath_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."
              },
              {
                "status": 202,
                "message": "Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."
              },
              {
                "status": 401,
                "message": "The PwRelaxWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "The scf PwBasexWorkChain sub process failed"
              },
              {
                "status": 403,
                "message": "The bands PwBasexWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.pw.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "pw",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "automatic_parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "When defined, the work chain will first launch an initialization calculatio ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "An explicit k-points list or mesh. Either this or `kpoints_distance` has to ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str",
                "info": "[Deprecated: use `pw.pseudos` instead] An alternative to specifying the pse ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "automatic_parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "The results of the automatic parallelization analysis if performed."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 203,
                "message": "Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 210,
                "message": "Required key for `automatic_parallelization` was not specified."
              },
              {
                "status": 211,
                "message": "Unrecognized keys were specified for `automatic_parallelization`."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 310,
                "message": "The calculation failed with a known unrecoverable error."
              },
              {
                "status": 320,
                "message": "The initialization calculation failed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw.relax": {
          "description": [
            "Workchain to relax a structure using Quantum ESPRESSO pw.x."
          ],
          "spec": {
            "inputs": [
              {
                "name": "base",
                "required": true,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` for the main relax loop."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "base_final_scf",
                "required": false,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` for the final scf."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "final_scf",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, a final SCF calculation will be performed on the successfully re ..."
              },
              {
                "name": "max_meta_convergence_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of variable cell relax iterations in the meta convergenc ..."
              },
              {
                "name": "meta_convergence",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True` the workchain will perform a meta-convergence on the cell volume."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relaxation_scheme",
                "required": false,
                "valid_types": "Str",
                "info": "The relaxation scheme to use: choose either `relax` or `vc-relax` for varia ..."
              },
              {
                "name": "volume_convergence",
                "required": false,
                "valid_types": "Float",
                "info": "The volume difference threshold between two consecutive meta convergence it ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "automatic_parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "The results of the automatic parallelization analysis if performed."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The successfully relaxed structure."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "the relax PwBaseWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "the final scf PwBaseWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.q2r.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "q2r",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": false,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "cp2k": {
          "description": [
            "This is a Cp2kCalculation, subclass of JobCalculation, to prepare input for an ab-initio CP2K calculation.",
            "",
            "    For information on CP2K, refer to: https://www.cp2k.org."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters."
              },
              {
                "name": "basissets",
                "required": false,
                "valid_types": "",
                "info": "A dictionary of basissets to be used in the calculations: key is the atomic ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "file",
                "required": false,
                "valid_types": "SinglefileData, StructureData",
                "info": "Additional input files."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Input kpoint mesh."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Working directory of a previously ran calculation to restart from."
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "",
                "info": "A dictionary of pseudopotentials to be used in the calculations: key is the ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Optional input parameters."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData, NoneType",
                "info": "The main input structure."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output dictionary containing results of the calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Computed electronic band structure."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed output structure."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "The retrieved folder did not contain the required output file."
              },
              {
                "status": 301,
                "message": "The output file could not be read."
              },
              {
                "status": 302,
                "message": "The output file could not be parsed."
              },
              {
                "status": 303,
                "message": "The output file was incomplete."
              },
              {
                "status": 304,
                "message": "The output file contains the word \"ABORT\"."
              },
              {
                "status": 312,
                "message": "The output structure could not be parsed."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "The maximum number of optimization steps reached."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "cp2k.base": {
          "description": [
            "Workchain to run a CP2K calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output dictionary containing results of the calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "final_input_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "The input parameters used for the final calculation."
              },
              {
                "name": "output_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Computed electronic band structure."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed output structure."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 310,
                "message": "The calculation failed with a known unrecoverable error."
              },
              {
                "status": 400,
                "message": "The calculation didn't produce any data to restart from."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "bands_inspect.align": {
          "description": [
            "Calculation class for the ``bands-inspect align`` command.",
            "",
            "    Arguments",
            "    ---------",
            "    bands1 : aiida.orm.data.array.bands.BandsData",
            "        First band structure to compare.",
            "    bands2 : aiida.orm.data.array.bands.BandsData",
            "        Second band structure to compare."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands1",
                "required": true,
                "valid_types": "BandsData",
                "info": "First bandstructure which is to be aligned"
              },
              {
                "name": "bands2",
                "required": true,
                "valid_types": "BandsData",
                "info": "Second bandstructure which is to be aligned"
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "bands1_shifted",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands2_shifted",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "difference",
                "required": true,
                "valid_types": "Float",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "shift",
                "required": true,
                "valid_types": "Float",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "At least one of the expected output files is missing from the retrieved folder."
              },
              {
                "status": 220,
                "message": "The text output file content is not in the expected format."
              }
            ]
          }
        },
        "bands_inspect.difference": {
          "description": [
            "Calculation class for the ``bands-inspect difference`` command.",
            "",
            "    Arguments",
            "    ---------",
            "    bands1 : aiida.orm.nodes.data.array.bands.BandsData",
            "        First band structure to compare.",
            "    bands2 : aiida.orm.nodes.data.array.bands.BandsData",
            "        Second band structure to compare."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands1",
                "required": true,
                "valid_types": "BandsData",
                "info": "First bandstructure which is to be compared"
              },
              {
                "name": "bands2",
                "required": true,
                "valid_types": "BandsData",
                "info": "Second bandstructure which is to be compared"
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "difference",
                "required": true,
                "valid_types": "Float",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "The retrieved folder does not contain the difference output file."
              }
            ]
          }
        },
        "bands_inspect.plot": {
          "description": [
            "Calculation class for the ``bands_inspect plot`` command.",
            "",
            "    Arguments",
            "    ---------",
            "    bands1 : aiida.orm.nodes.data.array.bands.BandsData",
            "        First band structure to plot.",
            "    bands2 : aiida.orm.nodes.data.array.bands.BandsData",
            "        Second band structure to plot."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands1",
                "required": true,
                "valid_types": "BandsData",
                "info": "First bandstructure which is to be plotted"
              },
              {
                "name": "bands2",
                "required": true,
                "valid_types": "BandsData",
                "info": "Second bandstructure which is to be plotted"
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "plot",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "The created band-structure comparison plot."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "The retrieved folder does not contain the plot output file."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "bigdft": {
          "description": [
            "AiiDA calculation plugin wrapping the BigDFT python interface."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "BigDFTParameters",
                "info": "Command line parameters for BigDFT"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "StructureData struct"
              },
              {
                "name": "extra_retrieved_files",
                "required": false,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "Dict",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "structurefile",
                "required": false,
                "valid_types": "Str",
                "info": "xyz file"
              }
            ],
            "outputs": [
              {
                "name": "bigdft_logfile",
                "required": true,
                "valid_types": "BigDFTLogfile",
                "info": "BigDFT log file as a dict"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 100,
                "message": "Calculation did not produce all expected output files."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "bigdft.postscript": {
          "description": [
            "AiiDA calculation to add post treatments to a computation workcahin.",
            "    post treatment scripts are to be registered as codes in aiida.",
            "    They are python scripts accepting one argument : a remotefolder where data is stored",
            "    Output files are not specified and can be added to the extra_retrieved_files list"
          ],
          "spec": {
            "inputs": [
              {
                "name": "bigdft_data_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Folder to the BigDFT data folder"
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "retrieved_files",
                "required": false,
                "valid_types": "List",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "Script execution failed"
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "bigdft": {
          "description": [
            "No description available"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "BigDFTParameters",
                "info": "Command line parameters for BigDFT"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "StructureData struct"
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "extra_retrieved_files",
                "required": false,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "Dict",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "run_opts",
                "required": false,
                "valid_types": "Dict",
                "info": "metadata"
              },
              {
                "name": "show_warnings",
                "required": false,
                "valid_types": "Bool",
                "info": "turn the warnings on/off."
              },
              {
                "name": "structurefile",
                "required": false,
                "valid_types": "Str",
                "info": "xyz file"
              }
            ],
            "outputs": [
              {
                "name": "bigdft_logfile",
                "required": true,
                "valid_types": "BigDFTLogfile",
                "info": "BigDFT log file as a dict"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "BigDFT input error"
              },
              {
                "status": 200,
                "message": "BigDFT runtime error"
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "bigdft.relax": {
          "description": [
            "Structure relaxation workchain."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "relax",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "StructureData struct"
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "extra_retrieved_files",
                "required": false,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "Dict",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "BigDFTParameters",
                "info": "param dictionary"
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "run_opts",
                "required": false,
                "valid_types": "Dict",
                "info": "metadata"
              },
              {
                "name": "show_warnings",
                "required": false,
                "valid_types": "Bool",
                "info": "turn the warnings on/off."
              },
              {
                "name": "structurefile",
                "required": false,
                "valid_types": "Str",
                "info": "xyz file"
              }
            ],
            "outputs": [
              {
                "name": "bigdft_logfile",
                "required": true,
                "valid_types": "BigDFTLogfile",
                "info": "BigDFT log file as a dict"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "forces",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "relaxed_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "total_energy",
                "required": false,
                "valid_types": "Float",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 101,
                "message": "Subprocess failed for relaxation"
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "castep.castep": {
          "description": [
            "Class representing a generic CASTEP calculation -",
            "    This class should work for all types of calculations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "A node that defines the input parameters"
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "",
                "info": "Use nodes for the pseudopotentails of one ofthe element in the structure. Y ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure"
              },
              {
                "name": "bs_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: bandstructure"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "elnes_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: elnes"
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Use a node defining the kpoints for the calculation"
              },
              {
                "name": "magres_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: magres"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optics_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: optics"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a remote folder as the parent folder. Useful for restarts."
              },
              {
                "name": "phonon_fine_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: phonon, phonon+efield"
              },
              {
                "name": "phonon_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: phonon, phonon+efield"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "A node for additional settings"
              },
              {
                "name": "spectral_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: spectral"
              },
              {
                "name": "supercell_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: phonon"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Parsed results in a dictionary format."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "Calculation terminated gracefully, end found"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "SCF Cycles failed to reach convergence"
              },
              {
                "status": 103,
                "message": "Stopped execuation due to detection of 'stop ' keyword in param file."
              },
              {
                "status": 104,
                "message": "CASTEP generate error files. Check them for details"
              },
              {
                "status": 105,
                "message": "Cannot find the end of calculation"
              },
              {
                "status": 106,
                "message": "No output .castep files found"
              },
              {
                "status": 107,
                "message": "Calculation self-terminated due to time limit"
              },
              {
                "status": 108,
                "message": "No retrieve folder is found"
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 200,
                "message": "UNKOWN ERROR"
              },
              {
                "status": 501,
                "message": "At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."
              }
            ]
          }
        },
        "castep.ts": {
          "description": [
            "CASTEP calculation for transition state search. Use an extra input product structure."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "A node that defines the input parameters"
              },
              {
                "name": "product_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Product structure for transition state search."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "",
                "info": "Use nodes for the pseudopotentails of one ofthe element in the structure. Y ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure"
              },
              {
                "name": "bs_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: bandstructure"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "elnes_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: elnes"
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Use a node defining the kpoints for the calculation"
              },
              {
                "name": "magres_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: magres"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "optics_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: optics"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a remote folder as the parent folder. Useful for restarts."
              },
              {
                "name": "phonon_fine_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: phonon, phonon+efield"
              },
              {
                "name": "phonon_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: phonon, phonon+efield"
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "A node for additional settings"
              },
              {
                "name": "spectral_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: spectral"
              },
              {
                "name": "supercell_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Extra kpoints input for task: phonon"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Parsed results in a dictionary format."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "Calculation terminated gracefully, end found"
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "SCF Cycles failed to reach convergence"
              },
              {
                "status": 103,
                "message": "Stopped execuation due to detection of 'stop ' keyword in param file."
              },
              {
                "status": 104,
                "message": "CASTEP generate error files. Check them for details"
              },
              {
                "status": 105,
                "message": "Cannot find the end of calculation"
              },
              {
                "status": 106,
                "message": "No output .castep files found"
              },
              {
                "status": 107,
                "message": "Calculation self-terminated due to time limit"
              },
              {
                "status": 108,
                "message": "No retrieve folder is found"
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 200,
                "message": "UNKOWN ERROR"
              },
              {
                "status": 501,
                "message": "At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."
              }
            ]
          }
        },
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "castep.altrelax": {
          "description": [
            "A relaxation workflow that alternates between fixed cell and unfixed cell",
            "    This is meidate the problem in CASTEP where if the cell is partially constraints",
            "    the convergence would be very slow.",
            "",
            "    To overcome this problem, the structure should be relaxed with cell constraints",
            "    then restart with fixed cell and repeat.",
            "",
            "    Following fields can be used in ``relax_options``",
            "",
            "    :var_cell_iter_max: Maximum iterations in variable cell relaxation, default to 10",
            "",
            "    :fix_cell_iter_max: Maximum iterations in fixed cell relaxation, default to 20"
          ],
          "spec": {
            "inputs": [
              {
                "name": "base",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "calc",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for relaxation."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Wether to clean the workdir of the calculations at the end of the workchain ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax_options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Options for relaxation."
              }
            ],
            "outputs": [
              {
                "name": "output_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "output_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed structure."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 101,
                "message": "Subprocess lauched has failed in the relax stage"
              },
              {
                "status": 102,
                "message": "Geometry optimisation is not converged but the maximum iteration is exceeded."
              },
              {
                "status": 201,
                "message": "NO cell_constraints find in the input"
              }
            ]
          }
        },
        "castep.bands": {
          "description": [
            "Workchain for running bands calculation.",
            "",
            "    This workchain does the following:",
            "",
            "    1. Relax the structure if requested (eg. inputs passed to the relax namespace).",
            "    2. Optionally: Do a SCF singlepoint calculation",
            "    3. Do combined SCF + non-SCF calculation for bands and dos.",
            "",
            "    Inputs must be passed for the SCF calculation (dispatched to bands and DOS),",
            "    others are optional.",
            "",
            "    Input for bands and dos calculations are optional. However, if they are needed, the full list of inputs must",
            "    be passed. For the `parameters` node, one may choose to only specify those fields that need to be updated."
          ],
          "spec": {
            "inputs": [
              {
                "name": "scf",
                "required": true,
                "valid_types": "Data",
                "info": "Inputs for SCF workchain, mandatory. Used as template for bands/dos if not  ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure"
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for bands calculation, if needed"
              },
              {
                "name": "bands_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Explicit kpoints for the bands"
              },
              {
                "name": "bands_kpoints_distance",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Spacing for band distances, used by seekpath"
              },
              {
                "name": "clean_children_workdir",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "What part of the called children to clean"
              },
              {
                "name": "dos",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for DOS calculation, if needed"
              },
              {
                "name": "dos_kpoints",
                "required": false,
                "valid_types": "KpointsData, NoneType",
                "info": "Kpoints for running DOS calculations"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "only_dos",
                "required": false,
                "valid_types": "",
                "info": "Flag for running only DOS calculations"
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "",
                "info": "Options for this workchain. Supported keywords: dos_smearing, dos_npoints."
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "Data",
                "info": "Inputs for Relaxation workchain, if needed"
              },
              {
                "name": "run_separate_scf",
                "required": false,
                "valid_types": "",
                "info": "Flag for running a separate SCF calculation, default to False"
              }
            ],
            "outputs": [
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "",
                "info": "Computed band structure with labels"
              },
              {
                "name": "dos_bands",
                "required": false,
                "valid_types": "",
                "info": "Bands from the DOS calculation"
              },
              {
                "name": "primitive_structure",
                "required": false,
                "valid_types": "",
                "info": "Primitive structure used for band structure calculations"
              },
              {
                "name": "seekpath_parameters",
                "required": false,
                "valid_types": "",
                "info": "Parameters used by seekpath"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 501,
                "message": "Relaxation workchain failed"
              },
              {
                "status": 502,
                "message": "SCF workchain failed"
              },
              {
                "status": 503,
                "message": "Band structure workchain failed"
              },
              {
                "status": 504,
                "message": "DOS workchain failed"
              }
            ]
          }
        },
        "castep.base": {
          "description": [
            "A basic workchain for generic CASTEP calculations.",
            "    We try to handle erros such as walltime exceeded or SCF not converged"
          ],
          "spec": {
            "inputs": [
              {
                "name": "calc",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "calc_options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Options to be passed to calculations's metadata.options"
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Wether to clean the workdir of the calculations or not, the default is not  ..."
              },
              {
                "name": "continuation_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a remote folder as the parent folder. Useful for restarts."
              },
              {
                "name": "ensure_gamma_centering",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Ensure the kpoint grid is gamma centred."
              },
              {
                "name": "kpoints_spacing",
                "required": false,
                "valid_types": "Float, NoneType",
                "info": "Kpoint spacing"
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of restarts"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Options specific to the workchain.Avaliable options: queue_wallclock_limit, ..."
              },
              {
                "name": "pseudos_family",
                "required": false,
                "valid_types": "Str, NoneType",
                "info": "Pseudopotential family to be used"
              },
              {
                "name": "reuse_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a remote folder as the parent folder. Useful for restarts."
              }
            ],
            "outputs": [
              {
                "name": "output_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "output_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 200,
                "message": "The maximum number of iterations has been exceeded"
              },
              {
                "status": 201,
                "message": "The maximum length of the wallclocks has been exceeded"
              },
              {
                "status": 301,
                "message": "CASTEP generated error files and is not recoverable"
              },
              {
                "status": 302,
                "message": "Cannot reach SCF convergence despite restart efforts"
              },
              {
                "status": 400,
                "message": "The stop flag has been put in the .param file to request termination of the calculation."
              },
              {
                "status": 900,
                "message": "Input validate is failed"
              },
              {
                "status": 901,
                "message": "Completed one iteration but found not calculation returned"
              },
              {
                "status": 1000,
                "message": "Error is not known"
              }
            ]
          }
        },
        "castep.relax": {
          "description": [
            "WorkChain to relax structures.",
            "    Restart the relaxation calculation until the structure is fully relaxed.",
            "    Each CASTEP relaxation may finish without error with not fully relaxed structure",
            "    if the number of iteration is exceeded (*geom_max_iter*).",
            "    This workchain try to restart such calculations (wrapped in CastepBaseWorkChain)",
            "    until the structure is fully relaxed",
            "",
            "    ``relax_options`` is a Dict of the options avaliable fields are:",
            "",
            "    - restart_mode: mode of restart, choose from ``reuse`` (default), ``structure``,",
            "      ``continuation``.",
            "    - bypass: Bypass relaxation control - e.g. no checking of the convergence.",
            "      Can be used for doing singlepoint calculation."
          ],
          "spec": {
            "inputs": [
              {
                "name": "base",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "calc",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure to be used for relaxation."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool, NoneType",
                "info": "Wether to clean the workdir of the calculations at the end of the workchain ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relax_options",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Options for relaxation."
              }
            ],
            "outputs": [
              {
                "name": "output_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "output_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed structure."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 101,
                "message": "Subprocess lauched has failed in the relax stage"
              },
              {
                "status": 102,
                "message": "Geometry optimisation is not converged but the maximum iteration is exceeded."
              }
            ]
          }
        },
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": false,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "atat.mcsqs": {
          "description": [
            "Calculation Job of mcsqs"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "code_corrdump",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to run corrdump before mcsqs."
              },
              {
                "name": "cutoffs",
                "required": true,
                "valid_types": "List",
                "info": "cutoff distance of different order particles."
              },
              {
                "name": "primitive_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "primitive structure with fraction atom weight in sites."
              },
              {
                "name": "supercell",
                "required": true,
                "valid_types": "StructureData",
                "info": "sqscell receieve a StructureData and read its cell."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "option parameters for mcsqs."
              },
              {
                "name": "random_seed",
                "required": false,
                "valid_types": "Int",
                "info": "seed for the random number generator used in the Monte Carlo simulation"
              }
            ],
            "outputs": [
              {
                "name": "bestcorr",
                "required": true,
                "valid_types": "Float",
                "info": "bestcorr of sqs"
              },
              {
                "name": "bestsqs",
                "required": true,
                "valid_types": "StructureData",
                "info": "sqs structure file"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "construct_ce": {
          "description": [
            "WorkChain to construct cluster expansion using a db"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cluster_space",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure_db",
                "required": true,
                "valid_types": "StructureDbData",
                "info": "reference data contain structures and their properties."
              },
              {
                "name": "fit_data_key",
                "required": false,
                "valid_types": "Str",
                "info": "The key of target properties for all structures."
              },
              {
                "name": "fit_method",
                "required": false,
                "valid_types": "Str",
                "info": "method to be used for training."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional `options` to use."
              }
            ],
            "outputs": [
              {
                "name": "cluster_expansion",
                "required": true,
                "valid_types": "ClusterExpansionData",
                "info": "The output cluster expansion."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "icet.mcsqs": {
          "description": [
            "A workchain to generate sqs"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cluster_space",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "supercell",
                "required": true,
                "valid_types": "StructureData",
                "info": "The supercell which optimal structure will be search."
              },
              {
                "name": "target_concentrations",
                "required": true,
                "valid_types": "Dict",
                "info": "concentration of each species in the target structure, per sublattice"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "n_steps",
                "required": false,
                "valid_types": "Int",
                "info": "total number of Monte Carlo steps in the simulation"
              },
              {
                "name": "optimality_weight",
                "required": false,
                "valid_types": "Float",
                "info": "controls weighting :math:`L` of perfect correlations"
              },
              {
                "name": "random_seed",
                "required": false,
                "valid_types": "Int",
                "info": "seed for the random number generator used in the Monte Carlo simulation"
              },
              {
                "name": "temperature_start",
                "required": false,
                "valid_types": "Float",
                "info": "artificial temperature at which the simulated annealing starts"
              },
              {
                "name": "temperature_stop",
                "required": false,
                "valid_types": "Float",
                "info": "artificial temperature at which the simulated annealing starts"
              },
              {
                "name": "tolerant",
                "required": false,
                "valid_types": "Float",
                "info": "Numerical tolerance"
              }
            ],
            "outputs": [
              {
                "name": "output_cluster_vector",
                "required": true,
                "valid_types": "List",
                "info": "The output cluster vector of the output SQS."
              },
              {
                "name": "output_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The output special quasirandom structure (SQS)."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "CHAMP": {
          "description": [
            "AiiDA calculation plugin wrapping the CHAMP's vmc executable.",
            "",
            "    aiida-champ can be used to manage the workflow of a vmc/dmc calculation of the CHAMP code.",
            "",
            "    Author :: Ravindra Shinde",
            "    Email  :: r.l.shinde@utwente.nl"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "determinants",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input determinants file"
              },
              {
                "name": "filemain",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input File"
              },
              {
                "name": "molecule",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Molecule structure File"
              },
              {
                "name": "ecp1",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input ECP file for atom type 1"
              },
              {
                "name": "ecp2",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input ECP file for atom type 2"
              },
              {
                "name": "jastrow",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input jastrow file"
              },
              {
                "name": "jastrowder",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input jastrowder file"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "numericalbasis1",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input numerical basis file atom 1"
              },
              {
                "name": "numericalbasis2",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input numerical basis file atom 2"
              },
              {
                "name": "numericalbasisinfo",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input numerical basis information file"
              },
              {
                "name": "orbitals",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input orbitals file"
              },
              {
                "name": "symmetry",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input symmetry file"
              },
              {
                "name": "trexio",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Input trexio hdf5 file"
              }
            ],
            "outputs": [
              {
                "name": "Output",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output file of the VMC/DMC calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "Energy",
                "required": false,
                "valid_types": "Float",
                "info": "Output total energy of the VMC/DMC calculation"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              }
            ]
          }
        },
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "codtools.cif_base": {
          "description": [
            "Generic `CalcJob` implementation that can easily be extended to work with any of the `cod-tools` scripts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF to be processed."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Command line parameters."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "messages",
                "required": false,
                "valid_types": "Dict",
                "info": "Warning and error messages returned by script."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Neither the output for the error file could be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 312,
                "message": "The error file could not be read from the retrieved folder."
              },
              {
                "status": 313,
                "message": "The output file is empty."
              },
              {
                "status": 320,
                "message": "Invalid command line option passed."
              },
              {
                "status": 400,
                "message": "The output file could not be parsed."
              },
              {
                "status": 410,
                "message": "The output file could not be parsed into a CifData object."
              }
            ]
          }
        },
        "codtools.cif_cell_contents": {
          "description": [
            "CalcJob plugin for the `cif_cell_contents` script of the `cod-tools` package."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF to be processed."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Command line parameters."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "formulae",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary of formulae present in the CIF."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "messages",
                "required": false,
                "valid_types": "Dict",
                "info": "Warning and error messages returned by script."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Neither the output for the error file could be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 312,
                "message": "The error file could not be read from the retrieved folder."
              },
              {
                "status": 313,
                "message": "The output file is empty."
              },
              {
                "status": 320,
                "message": "Invalid command line option passed."
              },
              {
                "status": 400,
                "message": "The output file could not be parsed."
              },
              {
                "status": 410,
                "message": "The output file could not be parsed into a CifData object."
              }
            ]
          }
        },
        "codtools.cif_cod_check": {
          "description": [
            "CalcJob plugin for the `cif_cod_check` script of the `cod-tools` package."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF to be processed."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Command line parameters."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "messages",
                "required": true,
                "valid_types": "Dict",
                "info": "Warning and error messages returned by the script."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Neither the output for the error file could be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 312,
                "message": "The error file could not be read from the retrieved folder."
              },
              {
                "status": 313,
                "message": "The output file is empty."
              },
              {
                "status": 320,
                "message": "Invalid command line option passed."
              },
              {
                "status": 400,
                "message": "The output file could not be parsed."
              },
              {
                "status": 410,
                "message": "The output file could not be parsed into a CifData object."
              }
            ]
          }
        },
        "codtools.cif_cod_deposit": {
          "description": [
            "CalcJob plugin for the `cif_cod_deposit` script of the `cod-tools` package."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF to be processed."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Command line parameters."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "messages",
                "required": false,
                "valid_types": "Dict",
                "info": "Warning and error messages returned by script."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Neither the output for the error file could be read from the retrieved folder."
              },
              {
                "status": 300,
                "message": "The deposition failed for unknown reasons."
              },
              {
                "status": 310,
                "message": "The deposition failed because the input was invalid."
              },
              {
                "status": 311,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 312,
                "message": "The error file could not be read from the retrieved folder."
              },
              {
                "status": 313,
                "message": "The output file is empty."
              },
              {
                "status": 320,
                "message": "Invalid command line option passed."
              },
              {
                "status": 400,
                "message": "The output file could not be parsed."
              },
              {
                "status": 410,
                "message": "The output file could not be parsed into a CifData object."
              },
              {
                "status": 410,
                "message": "The deposition failed because one or more CIFs already exist in the COD."
              },
              {
                "status": 420,
                "message": "The structure is unchanged and so deposition is unnecessary."
              }
            ]
          }
        },
        "codtools.cif_cod_numbers": {
          "description": [
            "CalcJob plugin for the `cif_cod_numbers` script of the `cod-tools` package."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF to be processed."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Command line parameters."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "numbers",
                "required": true,
                "valid_types": "Dict",
                "info": "Mapping of COD IDs found with their formula and count."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "messages",
                "required": false,
                "valid_types": "Dict",
                "info": "Warning and error messages returned by script."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Neither the output for the error file could be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 312,
                "message": "The error file could not be read from the retrieved folder."
              },
              {
                "status": 313,
                "message": "The output file is empty."
              },
              {
                "status": 320,
                "message": "Invalid command line option passed."
              },
              {
                "status": 400,
                "message": "The output file could not be parsed."
              },
              {
                "status": 410,
                "message": "The output file could not be parsed into a CifData object."
              }
            ]
          }
        },
        "codtools.cif_filter": {
          "description": [
            "CalcJob plugin for the `cif_filter` script of the `cod-tools` package."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF to be processed."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Command line parameters."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF produced by the script."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "messages",
                "required": false,
                "valid_types": "Dict",
                "info": "Warning and error messages returned by script."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Neither the output for the error file could be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 312,
                "message": "The error file could not be read from the retrieved folder."
              },
              {
                "status": 313,
                "message": "The output file is empty."
              },
              {
                "status": 320,
                "message": "Invalid command line option passed."
              },
              {
                "status": 400,
                "message": "The output file could not be parsed."
              },
              {
                "status": 410,
                "message": "The output file could not be parsed into a CifData object."
              }
            ]
          }
        },
        "codtools.cif_select": {
          "description": [
            "CalcJob plugin for the `cif_select` script of the `cod-tools` package."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF to be processed."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Command line parameters."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF produced by the script."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "messages",
                "required": false,
                "valid_types": "Dict",
                "info": "Warning and error messages returned by script."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Neither the output for the error file could be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 312,
                "message": "The error file could not be read from the retrieved folder."
              },
              {
                "status": 313,
                "message": "The output file is empty."
              },
              {
                "status": 320,
                "message": "Invalid command line option passed."
              },
              {
                "status": 400,
                "message": "The output file could not be parsed."
              },
              {
                "status": 410,
                "message": "The output file could not be parsed into a CifData object."
              }
            ]
          }
        },
        "codtools.cif_split_primitive": {
          "description": [
            "CalcJob plugin for the `cif_split_primitive` script of the `cod-tools` package."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIF to be processed."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Command line parameters."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "cifs",
                "required": true,
                "valid_types": "CifData",
                "info": "The CIFs produced by the script."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "messages",
                "required": false,
                "valid_types": "Dict",
                "info": "Warning and error messages returned by script."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Neither the output for the error file could be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 312,
                "message": "The error file could not be read from the retrieved folder."
              },
              {
                "status": 313,
                "message": "The output file is empty."
              },
              {
                "status": 320,
                "message": "Invalid command line option passed."
              },
              {
                "status": 400,
                "message": "The output file could not be parsed."
              },
              {
                "status": 410,
                "message": "The output file could not be parsed into a CifData object."
              }
            ]
          }
        },
        "codtools.primitive_structure_from_cif": {
          "description": [
            "Attempt to parse the given `CifData` and create a `StructureData` from it.",
            "",
            "    First the raw CIF file is parsed with the given `parse_engine`. The resulting `StructureData` is then passed through",
            "    SeeKpath to try and get the primitive cell. If that is successful, important structural parameters as determined by",
            "    SeeKpath will be set as extras on the structure node which is then returned as output.",
            "",
            "    :param cif: the `CifData` node",
            "    :param parse_engine: the parsing engine, supported libraries 'ase' and 'pymatgen'",
            "    :param symprec: a `Float` node with symmetry precision for determining primitive cell in SeeKpath",
            "    :param site_tolerance: a `Float` node with the fractional coordinate distance tolerance for finding overlapping",
            "        sites. This will only be used if the parse_engine is pymatgen",
            "    :return: the primitive `StructureData` as determined by SeeKpath"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "Data",
                "info": "the `CifData` node"
              },
              {
                "name": "parse_engine",
                "required": true,
                "valid_types": "Data",
                "info": "the parsing engine, supported libraries 'ase' and 'pymatgen'"
              },
              {
                "name": "site_tolerance",
                "required": true,
                "valid_types": "Data",
                "info": "a `Float` node with the fractional coordinate distance tolerance for findin ..."
              },
              {
                "name": "symprec",
                "required": true,
                "valid_types": "Data",
                "info": "a `Float` node with symmetry precision for determining primitive cell in Se ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "codtools.cif_clean": {
          "description": [
            "WorkChain to clean a `CifData` node using the `cif_filter` and `cif_select` scripts of `cod-tools`.",
            "",
            "    It will first run `cif_filter` to correct syntax errors, followed by `cif_select` which will canonicalize the tags.",
            "    If a group is passed for the `group_structure` input, the atomic structure library defined by the `engine` input",
            "    will be used to parse the final cleaned `CifData` to construct a `StructureData` object, which will then be passed",
            "    to the `SeeKpath` library to analyze it and return the primitive structure"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The CifData node that is to be cleaned."
              },
              {
                "name": "cif_filter",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "cif_select",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "group_cif",
                "required": false,
                "valid_types": "Group, NoneType",
                "info": "An optional Group to which the final cleaned CifData node will be added."
              },
              {
                "name": "group_structure",
                "required": false,
                "valid_types": "Group, NoneType",
                "info": "An optional Group to which the final reduced StructureData node will be add ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parse_engine",
                "required": false,
                "valid_types": "Str",
                "info": "The atomic structure engine to parse the cif and create the structure."
              },
              {
                "name": "site_tolerance",
                "required": false,
                "valid_types": "Float",
                "info": "The fractional coordinate distance tolerance for finding overlapping sites  ..."
              },
              {
                "name": "symprec",
                "required": false,
                "valid_types": "Float",
                "info": "The symmetry precision used by SeeKpath for crystal symmetry refinement."
              }
            ],
            "outputs": [
              {
                "name": "cif",
                "required": true,
                "valid_types": "CifData",
                "info": "The cleaned CifData node."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The primitive cell structure created with SeeKpath from the cleaned CifData ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "The CifFilterCalculation step failed."
              },
              {
                "status": 402,
                "message": "The CifSelectCalculation step failed."
              },
              {
                "status": 410,
                "message": "The cleaned CifData contains sites with unknown species."
              },
              {
                "status": 411,
                "message": "The cleaned CifData defines no atomic sites."
              },
              {
                "status": 412,
                "message": "The cleaned CifData defines sites with attached hydrogens with incomplete positional data."
              },
              {
                "status": 413,
                "message": "The cleaned CifData defines sites with invalid atomic occupancies."
              },
              {
                "status": 414,
                "message": "Failed to parse a StructureData from the cleaned CifData."
              },
              {
                "status": 420,
                "message": "SeeKpath failed to determine the primitive structure."
              },
              {
                "status": 421,
                "message": "SeeKpath detected inconsistent symmetry operations."
              }
            ]
          }
        },
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "crystal17.basic": {
          "description": [
            "AiiDA calculation plugin to run the crystal17 executable,",
            "    by supplying a normal .d12 input file and (optional) .gui file"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "input_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "the input .d12 file content."
              },
              {
                "name": "input_external",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "optional input fort.34 (gui) file content (for use with EXTERNAL keyword)."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "the data extracted from the main output file"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "the structure output from the calculation"
              },
              {
                "name": "symmetry",
                "required": false,
                "valid_types": "SymmetryData",
                "info": "the symmetry data from the calculation"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "the main (stdout) output file was not found"
              },
              {
                "status": 211,
                "message": "the temporary retrieved folder was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the crystal exec stdout file"
              },
              {
                "status": 301,
                "message": "An error occurred parsing the 'opta'/'optc' geometry files"
              },
              {
                "status": 302,
                "message": "The crystal exec stdout file denoted that the run was a testgeom"
              },
              {
                "status": 350,
                "message": "the input file could not be read by CRYSTAL"
              },
              {
                "status": 351,
                "message": "CRYSTAL could not find the required wavefunction file"
              },
              {
                "status": 352,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 353,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 354,
                "message": "Error in CHEMOD basis set modification"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 401,
                "message": "The calculation stopped prematurely because it ran out of memory."
              },
              {
                "status": 402,
                "message": "The calculation stopped prematurely because it ran out of virtual memory."
              },
              {
                "status": 411,
                "message": "SCF convergence did not finalise (usually due to reaching step limit)"
              },
              {
                "status": 412,
                "message": "Geometry convergence did not finalise (usually due to reaching step limit)"
              },
              {
                "status": 413,
                "message": "an error encountered usually during geometry optimisation"
              },
              {
                "status": 414,
                "message": "an error was encountered during an SCF computation"
              },
              {
                "status": 415,
                "message": "an unknown error was encountered, causing the MPI to abort"
              },
              {
                "status": 499,
                "message": "The main crystal output file flagged an unhandled error"
              },
              {
                "status": 510,
                "message": "inconsistency in the input and output symmetry"
              },
              {
                "status": 520,
                "message": "primitive symmops were not found in the output file"
              }
            ]
          }
        },
        "crystal17.doss": {
          "description": [
            "AiiDA calculation plugin to run the ``properties`` executable,",
            "    for DOSS calculations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "the input parameters to create the properties input file."
              },
              {
                "name": "wf_folder",
                "required": true,
                "valid_types": "FolderData, RemoteData, SinglefileData",
                "info": "the folder containing the wavefunction fort.9 file"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "Summary Data extracted from the output file(s)"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "arrays",
                "required": false,
                "valid_types": "ArrayData",
                "info": "energies and DoS arrays"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "the main (stdout) output file was not found"
              },
              {
                "status": 211,
                "message": "the temporary retrieved folder was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the crystal exec stdout file"
              },
              {
                "status": 350,
                "message": "the input file could not be read by CRYSTAL"
              },
              {
                "status": 351,
                "message": "CRYSTAL could not find the required wavefunction file"
              },
              {
                "status": 352,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 352,
                "message": "parser could not find the output isovalue (fort.25) file"
              },
              {
                "status": 353,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 353,
                "message": "error parsing output isovalue (fort.25) file"
              },
              {
                "status": 354,
                "message": "Error in CHEMOD basis set modification"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 401,
                "message": "The calculation stopped prematurely because it ran out of memory."
              },
              {
                "status": 402,
                "message": "The calculation stopped prematurely because it ran out of virtual memory."
              },
              {
                "status": 413,
                "message": "an error encountered usually during geometry optimisation"
              },
              {
                "status": 414,
                "message": "an error was encountered during an SCF computation"
              },
              {
                "status": 415,
                "message": "an unknown error was encountered, causing the MPI to abort"
              },
              {
                "status": 499,
                "message": "The main crystal output file flagged an unhandled error"
              }
            ]
          }
        },
        "crystal17.ech3": {
          "description": [
            "AiiDA calculation plugin to run the ``properties`` executable, for 3D charge density (ECH3)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "the input parameters to create the properties input file."
              },
              {
                "name": "wf_folder",
                "required": true,
                "valid_types": "FolderData, RemoteData, SinglefileData",
                "info": "the folder containing the wavefunction fort.9 file"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "charge",
                "required": true,
                "valid_types": "GaussianCube",
                "info": "The charge density cube"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "Summary Data extracted from the output file(s)"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "spin",
                "required": false,
                "valid_types": "GaussianCube",
                "info": "The spin density cube"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "the main (stdout) output file was not found"
              },
              {
                "status": 211,
                "message": "the temporary retrieved folder was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the crystal exec stdout file"
              },
              {
                "status": 350,
                "message": "the input file could not be read by CRYSTAL"
              },
              {
                "status": 351,
                "message": "CRYSTAL could not find the required wavefunction file"
              },
              {
                "status": 352,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 352,
                "message": "parser could not find the output density file"
              },
              {
                "status": 353,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 353,
                "message": "error parsing output density file"
              },
              {
                "status": 354,
                "message": "Error in CHEMOD basis set modification"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 401,
                "message": "The calculation stopped prematurely because it ran out of memory."
              },
              {
                "status": 402,
                "message": "The calculation stopped prematurely because it ran out of virtual memory."
              },
              {
                "status": 413,
                "message": "an error encountered usually during geometry optimisation"
              },
              {
                "status": 414,
                "message": "an error was encountered during an SCF computation"
              },
              {
                "status": 415,
                "message": "an unknown error was encountered, causing the MPI to abort"
              },
              {
                "status": 499,
                "message": "The main crystal output file flagged an unhandled error"
              }
            ]
          }
        },
        "crystal17.main": {
          "description": [
            "AiiDA calculation plugin to run the crystal17 executable,",
            "    by supplying aiida nodes, with data sufficient to create the",
            "    .d12 input file and .gui file"
          ],
          "spec": {
            "inputs": [
              {
                "name": "basissets",
                "required": true,
                "valid_types": "BasisSetData",
                "info": "Use a node for the basis set of one of the elements in the structure. You h ..."
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "CryInputParamsData",
                "info": "the input parameters to create the .d12 file content."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "structure used to construct the input fort.34 (gui) file"
              },
              {
                "name": "kinds",
                "required": false,
                "valid_types": "KindData",
                "info": "additional structure kind specific data (e.g. initial spin)"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "symmetry",
                "required": false,
                "valid_types": "SymmetryData",
                "info": "the symmetry of the structure, used to construct the input .gui file (fort. ..."
              },
              {
                "name": "wf_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory, of a previously completed calculation, conta ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "the data extracted from the main output file"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "optimisation",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": "atomic configurations, for each optimisation step"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "the structure output from the calculation"
              },
              {
                "name": "symmetry",
                "required": false,
                "valid_types": "SymmetryData",
                "info": "the symmetry data from the calculation"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "the main (stdout) output file was not found"
              },
              {
                "status": 211,
                "message": "the temporary retrieved folder was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the crystal exec stdout file"
              },
              {
                "status": 301,
                "message": "An error occurred parsing the 'opta'/'optc' geometry files"
              },
              {
                "status": 302,
                "message": "The crystal exec stdout file denoted that the run was a testgeom"
              },
              {
                "status": 350,
                "message": "the input file could not be read by CRYSTAL"
              },
              {
                "status": 351,
                "message": "CRYSTAL could not find the required wavefunction file"
              },
              {
                "status": 352,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 353,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 354,
                "message": "Error in CHEMOD basis set modification"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 401,
                "message": "The calculation stopped prematurely because it ran out of memory."
              },
              {
                "status": 402,
                "message": "The calculation stopped prematurely because it ran out of virtual memory."
              },
              {
                "status": 411,
                "message": "SCF convergence did not finalise (usually due to reaching step limit)"
              },
              {
                "status": 412,
                "message": "Geometry convergence did not finalise (usually due to reaching step limit)"
              },
              {
                "status": 413,
                "message": "an error encountered usually during geometry optimisation"
              },
              {
                "status": 414,
                "message": "an error was encountered during an SCF computation"
              },
              {
                "status": 415,
                "message": "an unknown error was encountered, causing the MPI to abort"
              },
              {
                "status": 499,
                "message": "The main crystal output file flagged an unhandled error"
              },
              {
                "status": 510,
                "message": "inconsistency in the input and output symmetry"
              },
              {
                "status": 520,
                "message": "primitive symmops were not found in the output file"
              }
            ]
          }
        },
        "crystal17.newk": {
          "description": [
            "AiiDA calculation plugin to run the properties17 executable,",
            "    for NEWK calculations (to return the fermi energy)"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "the input parameters to create the properties input file."
              },
              {
                "name": "wf_folder",
                "required": true,
                "valid_types": "FolderData, RemoteData, SinglefileData",
                "info": "the folder containing the wavefunction fort.9 file"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "Summary Data extracted from the output file(s)"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "the main (stdout) output file was not found"
              },
              {
                "status": 211,
                "message": "the temporary retrieved folder was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the crystal exec stdout file"
              },
              {
                "status": 350,
                "message": "the input file could not be read by CRYSTAL"
              },
              {
                "status": 351,
                "message": "CRYSTAL could not find the required wavefunction file"
              },
              {
                "status": 352,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 353,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 354,
                "message": "Error in CHEMOD basis set modification"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 401,
                "message": "The calculation stopped prematurely because it ran out of memory."
              },
              {
                "status": 402,
                "message": "The calculation stopped prematurely because it ran out of virtual memory."
              },
              {
                "status": 413,
                "message": "an error encountered usually during geometry optimisation"
              },
              {
                "status": 414,
                "message": "an error was encountered during an SCF computation"
              },
              {
                "status": 415,
                "message": "an unknown error was encountered, causing the MPI to abort"
              },
              {
                "status": 499,
                "message": "The main crystal output file flagged an unhandled error"
              }
            ]
          }
        },
        "crystal17.ppan": {
          "description": [
            "AiiDA calculation plugin to run the ``properties`` executable,",
            "    for PPAN (Mulliken population analysis) calculations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "the input parameters to create the properties input file."
              },
              {
                "name": "wf_folder",
                "required": true,
                "valid_types": "FolderData, RemoteData, SinglefileData",
                "info": "the folder containing the wavefunction fort.9 file"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "Summary Data extracted from the output file(s)"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "the main (stdout) output file was not found"
              },
              {
                "status": 211,
                "message": "the temporary retrieved folder was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the crystal exec stdout file"
              },
              {
                "status": 350,
                "message": "the input file could not be read by CRYSTAL"
              },
              {
                "status": 351,
                "message": "CRYSTAL could not find the required wavefunction file"
              },
              {
                "status": 352,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 352,
                "message": "parser could not find the output PPAN.dat file"
              },
              {
                "status": 353,
                "message": "Possibly due to erroneous CHEMOD basis set modification"
              },
              {
                "status": 353,
                "message": "error parsing output PPAN.dat file"
              },
              {
                "status": 354,
                "message": "Error in CHEMOD basis set modification"
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 401,
                "message": "The calculation stopped prematurely because it ran out of memory."
              },
              {
                "status": 402,
                "message": "The calculation stopped prematurely because it ran out of virtual memory."
              },
              {
                "status": 413,
                "message": "an error encountered usually during geometry optimisation"
              },
              {
                "status": 414,
                "message": "an error was encountered during an SCF computation"
              },
              {
                "status": 415,
                "message": "an unknown error was encountered, causing the MPI to abort"
              },
              {
                "status": 499,
                "message": "The main crystal output file flagged an unhandled error"
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "crystal17.main.base": {
          "description": [
            "Workchain to run a standard CRYSTAL17 calculation,",
            "    with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cry",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "basis_family",
                "required": false,
                "valid_types": "Str",
                "info": "An alternative to specifying the basis sets manually: one can specify the n ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "the data extracted from the main output file"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "the structure output from the calculation"
              },
              {
                "name": "symmetry",
                "required": false,
                "valid_types": "SymmetryData",
                "info": "the symmetry data from the calculation"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The parameters could not be validated against the jsonschema."
              },
              {
                "status": 202,
                "message": "The explicit `basis_sets` or `basis_family` could not be used to get the necessary basis sets."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 320,
                "message": "The initialization calculation failed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "crystal17.properties": {
          "description": [
            "A WorkChain to compute properties of a structure, using CRYSTAL.",
            "",
            "    Either a pre-computed wavefunction (fort.9) file,",
            "    or inputs for a CryMainCalculation, should be supplied.",
            "    Inputs for property calculations can then be added",
            "    (currently available; doss, ech3)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "check_remote",
                "required": false,
                "valid_types": "Bool",
                "info": "If a RemoteData wf_folder is input, check it contains the wavefunction file ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "doss",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ech3",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ppan",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "test_run",
                "required": false,
                "valid_types": "Bool",
                "info": "break off the workchain before submitting a calculation"
              },
              {
                "name": "wf_folder",
                "required": false,
                "valid_types": "FolderData, RemoteData, SinglefileData",
                "info": "the folder containing the wavefunction fort.9 file"
              }
            ],
            "outputs": [
              {
                "name": "doss",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ech3",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ppan",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 200,
                "message": "Workchain ended before submitting calculation."
              },
              {
                "status": 201,
                "message": "Neither a wf_folder nor scf calculation was supplied."
              },
              {
                "status": 202,
                "message": "No property calculation inputs were supplied."
              },
              {
                "status": 203,
                "message": "The supplied folder does contain the wavefunction file."
              },
              {
                "status": 210,
                "message": "The SCF calculation submission failed."
              },
              {
                "status": 301,
                "message": "The SCF calculation failed."
              },
              {
                "status": 302,
                "message": "One or more property calculations failed."
              }
            ]
          }
        },
        "crystal17.sym3d": {
          "description": [
            "modify an AiiDa structure instance and compute its symmetry",
            "",
            "    Inequivalent atomic sites are dictated by atom kinds"
          ],
          "spec": {
            "inputs": [
              {
                "name": "settings",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "cif",
                "required": false,
                "valid_types": "CifData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "symmetry",
                "required": true,
                "valid_types": "SymmetryData",
                "info": ""
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "one of either a structure or cif input must be supplied"
              },
              {
                "status": 301,
                "message": "the supplied structure must be 3D (i.e. have all dimensions pbc=True)\""
              },
              {
                "status": 302,
                "message": "idealize can only be used when standardize=True"
              },
              {
                "status": 303,
                "message": "the kind names supplied are not compatible with the structure"
              },
              {
                "status": 304,
                "message": "error creating new structure"
              },
              {
                "status": 305,
                "message": "error computing symmetry operations"
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "ddec": {
          "description": [
            "AiiDA plugin for the ddec code that performs density derived",
            "    electrostatic and chemical atomic population analysis."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters such as net charge, protocol, atomic densities path, ..."
              },
              {
                "name": "charge_density_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Use a remote folder (for restarts and similar)"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "structure_ddec",
                "required": true,
                "valid_types": "CifData",
                "info": "structure with DDEC charges"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 101,
                "message": "The retrieved folder does not contain an output file."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": false,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "lammps.force": {
          "description": [
            "No description available"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "potential",
                "required": true,
                "valid_types": "EmpiricalPotential",
                "info": "lammps potential"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "the structure"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "the parameters"
              }
            ],
            "outputs": [
              {
                "name": "arrays",
                "required": true,
                "valid_types": "ArrayData",
                "info": "force data per atom"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "the data extracted from the main output file"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 201,
                "message": "The retrieved temporary folder data node could not be accessed."
              },
              {
                "status": 202,
                "message": "the main log output file was not found"
              },
              {
                "status": 203,
                "message": "the trajectory output file was not found"
              },
              {
                "status": 204,
                "message": "the stdout output file was not found"
              },
              {
                "status": 205,
                "message": "the stderr output file was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the main lammps output log file"
              },
              {
                "status": 310,
                "message": "An error was flagged trying to parse the trajectory output file"
              },
              {
                "status": 320,
                "message": "An error was flagged trying to parse the system info output file"
              },
              {
                "status": 400,
                "message": "The main lammps output file flagged an error"
              },
              {
                "status": 401,
                "message": "The main lammps output file did not flag that the computation finished"
              }
            ]
          }
        },
        "lammps.md": {
          "description": [
            "No description available"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "potential",
                "required": true,
                "valid_types": "EmpiricalPotential",
                "info": "lammps potential"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "the structure"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "the parameters"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "the data extracted from the main output file"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "trajectory_data",
                "required": true,
                "valid_types": "LammpsTrajectory",
                "info": "atomic configuration data per dump step"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "system_data",
                "required": false,
                "valid_types": "ArrayData",
                "info": "selected system data per dump step"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 201,
                "message": "The retrieved temporary folder data node could not be accessed."
              },
              {
                "status": 202,
                "message": "the main log output file was not found"
              },
              {
                "status": 203,
                "message": "the trajectory output file was not found"
              },
              {
                "status": 204,
                "message": "the stdout output file was not found"
              },
              {
                "status": 205,
                "message": "the stderr output file was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the main lammps output log file"
              },
              {
                "status": 310,
                "message": "An error was flagged trying to parse the trajectory output file"
              },
              {
                "status": 320,
                "message": "An error was flagged trying to parse the system info output file"
              },
              {
                "status": 400,
                "message": "The main lammps output file flagged an error"
              },
              {
                "status": 401,
                "message": "The main lammps output file did not flag that the computation finished"
              }
            ]
          }
        },
        "lammps.md.multi": {
          "description": [
            "Run a multi-stage molecular dynamic simulation."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "potential",
                "required": true,
                "valid_types": "EmpiricalPotential",
                "info": "lammps potential"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "the structure"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "the parameters"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "the data extracted from the main output file"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "system",
                "required": true,
                "valid_types": "ArrayData",
                "info": "selected system data per dump step of a stage"
              },
              {
                "name": "trajectory",
                "required": true,
                "valid_types": "LammpsTrajectory",
                "info": "atomic configuration data per dump step of a stage"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 201,
                "message": "The retrieved temporary folder data node could not be accessed."
              },
              {
                "status": 202,
                "message": "the main log output file was not found"
              },
              {
                "status": 203,
                "message": "the trajectory output file was not found"
              },
              {
                "status": 204,
                "message": "the stdout output file was not found"
              },
              {
                "status": 205,
                "message": "the stderr output file was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the main lammps output log file"
              },
              {
                "status": 310,
                "message": "An error was flagged trying to parse the trajectory output file"
              },
              {
                "status": 320,
                "message": "An error was flagged trying to parse the system info output file"
              },
              {
                "status": 400,
                "message": "The main lammps output file flagged an error"
              },
              {
                "status": 401,
                "message": "The main lammps output file did not flag that the computation finished"
              }
            ]
          }
        },
        "lammps.optimize": {
          "description": [
            "No description available"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "potential",
                "required": true,
                "valid_types": "EmpiricalPotential",
                "info": "lammps potential"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "the structure"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "the parameters"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "results",
                "required": true,
                "valid_types": "Dict",
                "info": "the data extracted from the main output file"
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "the structure output from the calculation"
              },
              {
                "name": "trajectory_data",
                "required": true,
                "valid_types": "LammpsTrajectory",
                "info": "forces, stresses and positions data per step"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 201,
                "message": "The retrieved temporary folder data node could not be accessed."
              },
              {
                "status": 202,
                "message": "the main log output file was not found"
              },
              {
                "status": 203,
                "message": "the trajectory output file was not found"
              },
              {
                "status": 204,
                "message": "the stdout output file was not found"
              },
              {
                "status": 205,
                "message": "the stderr output file was not found"
              },
              {
                "status": 300,
                "message": "An error was flagged trying to parse the main lammps output log file"
              },
              {
                "status": 310,
                "message": "An error was flagged trying to parse the trajectory output file"
              },
              {
                "status": 320,
                "message": "An error was flagged trying to parse the system info output file"
              },
              {
                "status": 400,
                "message": "The main lammps output file flagged an error"
              },
              {
                "status": 401,
                "message": "The main lammps output file did not flag that the computation finished"
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "cp2k": {
          "description": [
            "This is a Cp2kCalculation, subclass of JobCalculation, to prepare input for an ab-initio CP2K calculation.",
            "",
            "    For information on CP2K, refer to: https://www.cp2k.org."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters."
              },
              {
                "name": "basissets",
                "required": false,
                "valid_types": "",
                "info": "A dictionary of basissets to be used in the calculations: key is the atomic ..."
              },
              {
                "name": "file",
                "required": false,
                "valid_types": "SinglefileData, StructureData",
                "info": "Additional input files."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "Input kpoint mesh."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Working directory of a previously ran calculation to restart from."
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "",
                "info": "A dictionary of pseudopotentials to be used in the calculations: key is the ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional input parameters."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The main input structure."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output dictionary containing results of the calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Computed electronic band structure."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed output structure."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "The retrieved folder did not contain the required output file."
              },
              {
                "status": 301,
                "message": "The output file could not be read."
              },
              {
                "status": 302,
                "message": "The output file could not be parsed."
              },
              {
                "status": 303,
                "message": "The output file was incomplete."
              },
              {
                "status": 304,
                "message": "The output file contains the word \"ABORT\"."
              },
              {
                "status": 312,
                "message": "The output structure could not be parsed."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              }
            ]
          }
        },
        "ddec": {
          "description": [
            "AiiDA plugin for the ddec code that performs density derived",
            "    electrostatic and chemical atomic population analysis."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters such as net charge, protocol, atomic densities path, ..."
              },
              {
                "name": "charge_density_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Use a remote folder (for restarts and similar)"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "structure_ddec",
                "required": true,
                "valid_types": "CifData",
                "info": "structure with DDEC charges"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 101,
                "message": "The retrieved folder does not contain an output file."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "lsmo.calc_ch4_working_cap": {
          "description": [
            "Compute the CH4 working capacity from the output_parameters Dict of IsothermWorkChain.",
            "    This must have run calculations at 5.8 and 65.0 bar (at 298K), which are the standard reference for the evaluation.",
            "",
            "    The results can be compared with Simon2015 (10.1039/C4EE03515A)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "isot_dict",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.calc_h2_working_cap": {
          "description": [
            "Compute the H2 working capacity from the output_parameters Dict of MultiTempIsothermWorkChain.",
            "    This must have run calculations at 1, 5 and 100 bar at 77, 198, 298 K.",
            "    The US DOE Target for the Onboard Storage of Hydrogen Vehicles set the bar to 4.5 wt% and 30 g/L (Kapelewski2018).",
            "    Case-A: near-ambient-T adsorption, 100bar/198K to 5bar/298K (cf. Kapelewski2018, 10.1021/acs.chemmater.8b03276)",
            "    ....... Ni2(m-dobdc), experimental: 23.0 g/L",
            "    Case-B: low T adsorption, 100-5bar at 77K (cf. Ahmed2019, 10.1038/s41467-019-09365-w)",
            "    ....... NU-100, best experimental: 35.5 g/L",
            "    Case-C: low T adsorption at low discharge, 100-1bar at 77K (cf. Thornton2017, 10.1021/acs.chemmater.6b04933)",
            "    ....... hypMOF-5059389, best simulated: 40.0 g/L"
          ],
          "spec": {
            "inputs": [
              {
                "name": "isotmt_dict",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.calc_o2_working_cap": {
          "description": [
            "Compute the O2 working capacity from the output_parameters Dict of IsothermWorkChain.",
            "    This must have run calculations at 5 and 140.0 bar (at 298K), to be consistent with the screening of Moghadam2018",
            "    (10.1038/s41467-018-03892-8), for which the MOF ANUGIA (UMCM-152) was found to have a volumetric working capacity",
            "    of 249 vSTP/v (simulations are nearly identical to experiments).",
            "    Consider that, at the same conditions, an empty thank can only store 136 vSTP/v, and a comparable working capacity",
            "    can only br obtained compressing till 300bar."
          ],
          "spec": {
            "inputs": [
              {
                "name": "isot_dict",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.calc_selectivity": {
          "description": [
            "Compute the selectivity of gas A on gas B as S = kH_a/kH_b.",
            "    Note that if the material is not porous to one of the materials, the result is simply {'is_porous': False}.",
            "    To maintain the comptaibility with v1, intead of checking 'is_porous', it checks for the henry_coefficient_average",
            "    key in the Dict."
          ],
          "spec": {
            "inputs": [
              {
                "name": "isot_dict_a",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "isot_dict_b",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.ff_builder": {
          "description": [
            "AiiDA calcfunction to assemble force filed parameters into SinglefileData for Raspa."
          ],
          "spec": {
            "inputs": [
              {
                "name": "params",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "cif_molecule",
                "required": false,
                "valid_types": "Data, NoneType",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "raspa": {
          "description": [
            "This is a RaspaCalculation, subclass of CalcJob, to prepare input for RASPA code.",
            "    For information on RASPA, refer to: https://github.com/iraspa/raspa2."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "block_pocket",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Zeo++ block pocket file"
              },
              {
                "name": "file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Additional input file(s)"
              },
              {
                "name": "framework",
                "required": false,
                "valid_types": "CifData",
                "info": "Input framework(s)"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Remote folder used to continue the same simulation stating from the binary  ..."
              },
              {
                "name": "retrieved_parent_folder",
                "required": false,
                "valid_types": "FolderData",
                "info": "To use an old calculation as a starting poing for a new one."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional input parameters"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The results of a calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "warnings",
                "required": false,
                "valid_types": "List",
                "info": "Warnings that appeared during the calculation"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 101,
                "message": "The retrieved folder does not contain an output file."
              },
              {
                "status": 102,
                "message": "The output does not contain \"Starting simulation\"."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 500,
                "message": "The calculation could not be completed due to the lack of time."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "zeopp.network": {
          "description": [
            "AiiDA calculation plugin for the zeo++ network binary"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "NetworkParameters",
                "info": "command line parameters for zeo++"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "input structure to be analyzed"
              },
              {
                "name": "atomic_radii",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "atomic radii file"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "key-value pairs parsed from zeo++ output file(s)."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "block",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Blocked pockets fileoutput file."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "Calculation completed successfully."
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "Not all expected output files were found."
              },
              {
                "status": 102,
                "message": "Empty block file. This indicates the calculation of blocked pockets did not finish."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "cp2k.base": {
          "description": [
            "Workchain to run a CP2K calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output dictionary containing results of the calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "final_input_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "The input parameters used for the final calculation."
              },
              {
                "name": "output_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "Computed electronic band structure."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed output structure."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 310,
                "message": "The calculation failed with a known unrecoverable error."
              },
              {
                "status": 400,
                "message": "The calculation didn't produce any data to restart from."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "ddec.cp2k_ddec": {
          "description": [
            "A workchain that computes DDEC charges after a single-point",
            "    DFT calculation using Cp2kBaseWorkChain"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ddec",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "structure_ddec",
                "required": true,
                "valid_types": "CifData",
                "info": "structure with DDEC charges"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 903,
                "message": "Error while parsing CP2K output"
              },
              {
                "status": 904,
                "message": "Error while parsing DDEC output"
              }
            ]
          }
        },
        "lsmo.binding_site": {
          "description": [
            "A workchain that combines SimAnnealing & Cp2kBindingEnergy"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "molecule",
                "required": true,
                "valid_types": "Str, Dict",
                "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Parameters for the SimAnnealing workchain: will be merged with default ones ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "protocol_modify",
                "required": false,
                "valid_types": "Dict",
                "info": "Specify custom settings that overvrite the yaml settings"
              },
              {
                "name": "protocol_tag",
                "required": false,
                "valid_types": "Str",
                "info": "The tag of the protocol tag.yaml. NOTE: only the settings are read, stage i ..."
              },
              {
                "name": "protocol_yaml",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Specify a custom yaml file. NOTE: only the settings are read, stage is set  ..."
              },
              {
                "name": "starting_settings_idx",
                "required": false,
                "valid_types": "Int",
                "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
              }
            ],
            "outputs": [
              {
                "name": "dft",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ff",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.cp2k_binding_energy": {
          "description": [
            "Submits Cp2kBase work chain for structure + molecule system, first optimizing the geometry of the molecule and",
            "    later computing the BSSE corrected interaction energy.",
            "    This work chain is inspired to Cp2kMultistage, and shares some logics and data from it."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "molecule",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input molecule in the unit cell of the structure."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure that contains the molecule."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "protocol_modify",
                "required": false,
                "valid_types": "Dict",
                "info": "Specify custom settings that overvrite the yaml settings"
              },
              {
                "name": "protocol_tag",
                "required": false,
                "valid_types": "Str",
                "info": "The tag of the protocol tag.yaml. NOTE: only the settings are read, stage i ..."
              },
              {
                "name": "protocol_yaml",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Specify a custom yaml file. NOTE: only the settings are read, stage is set  ..."
              },
              {
                "name": "starting_settings_idx",
                "required": false,
                "valid_types": "Int",
                "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
              }
            ],
            "outputs": [
              {
                "name": "loaded_molecule",
                "required": true,
                "valid_types": "StructureData",
                "info": "Molecule geometry in the unit cell."
              },
              {
                "name": "loaded_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Geometry of the system with both fragments."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Info regarding the binding energy of the system."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 901,
                "message": "Specified starting_settings_idx that is not existing, or any in between 0 and idx is missing"
              },
              {
                "status": 902,
                "message": "Settings for Stage0 are not ok but there are no more robust settings to try"
              },
              {
                "status": 903,
                "message": "Something important was not printed correctly and the parsing of the first calculation failed"
              }
            ]
          }
        },
        "lsmo.cp2k_multistage": {
          "description": [
            "Submits Cp2kBase workchains for ENERGY, GEO_OPT, CELL_OPT and MD jobs iteratively",
            "    The protocol_yaml file contains a series of settings_x and stage_x:",
            "    the workchains starts running the settings_0/stage_0 calculation, and, in case of a failure, changes the settings",
            "    untill the SCF of stage_0 converges. Then it uses the same settings to run the next stages (i.e., stage_1, etc.)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "min_cell_size",
                "required": false,
                "valid_types": "Float",
                "info": "To avoid using k-points, extend the cell so that min(perp_width)>min_cell_s ..."
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Provide an initial parent folder that contains the wavefunction for restart"
              },
              {
                "name": "protocol_modify",
                "required": false,
                "valid_types": "Dict",
                "info": "Specify custom settings that overvrite the yaml settings"
              },
              {
                "name": "protocol_tag",
                "required": false,
                "valid_types": "Str",
                "info": "The tag of the protocol to be read from {tag}.yaml unless protocol_yaml inp ..."
              },
              {
                "name": "protocol_yaml",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Specify a custom yaml file with the multistage settings (and ignore protoco ..."
              },
              {
                "name": "starting_settings_idx",
                "required": false,
                "valid_types": "Int",
                "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Input structure"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "last_input_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "CP2K input parameters used (and possibly working) used in the last stage"
              },
              {
                "name": "output_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Output CP2K parameters of all the stages, merged together"
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Processed structure (missing if only ENERGY calculation is performed)"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 901,
                "message": "Specified starting_settings_idx that is not existing, or any in between 0 and idx is missing"
              },
              {
                "status": 902,
                "message": "Settings for Stage0 are not ok but there are no more robust settings to try"
              },
              {
                "status": 903,
                "message": "Something important was not printed correctly and the parsing of the first calculation failed"
              }
            ]
          }
        },
        "lsmo.cp2k_multistage_ddec": {
          "description": [
            "A workchain that combines: Cp2kMultistageWorkChain + Cp2kDdecWorkChain"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ddec",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "min_cell_size",
                "required": false,
                "valid_types": "Float",
                "info": "To avoid using k-points, extend the cell so that min(perp_width)>min_cell_s ..."
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Provide an initial parent folder that contains the wavefunction for restart"
              },
              {
                "name": "protocol_modify",
                "required": false,
                "valid_types": "Dict",
                "info": "Specify custom settings that overvrite the yaml settings"
              },
              {
                "name": "protocol_tag",
                "required": false,
                "valid_types": "Str",
                "info": "The tag of the protocol to be read from {tag}.yaml unless protocol_yaml inp ..."
              },
              {
                "name": "protocol_yaml",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Specify a custom yaml file with the multistage settings (and ignore protoco ..."
              },
              {
                "name": "starting_settings_idx",
                "required": false,
                "valid_types": "Int",
                "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Input structure"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "structure_ddec",
                "required": true,
                "valid_types": "CifData",
                "info": "structure with DDEC charges"
              },
              {
                "name": "last_input_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "CP2K input parameters used (and possibly working) used in the last stage"
              },
              {
                "name": "output_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Output CP2K parameters of all the stages, merged together"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.cp2k_phonopy": {
          "description": [
            "A workchain to compute phonon frequencies using CP2K and Phonopy"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure, output of some Cp2kCalculation."
              },
              {
                "name": "cp2kcalc",
                "required": false,
                "valid_types": "Str",
                "info": "Provide the UUID of a specific Cp2kCalc to be used. If not provided the WC  ..."
              },
              {
                "name": "max_displacements",
                "required": false,
                "valid_types": "Int",
                "info": "Set a maximum number of displacements (or zero) for testing purpose."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "mode",
                "required": false,
                "valid_types": "Str",
                "info": "Mode of the calculation: \"serial\" (default) or \"parallel\"."
              }
            ],
            "outputs": [
              {
                "name": "initial_forces",
                "required": true,
                "valid_types": "List",
                "info": "Forces computed on the input structure."
              },
              {
                "name": "phonopy_params",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "File phonopy_params.yaml with displacements and forces, to be loaded by Pho ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.isotherm": {
          "description": [
            "Workchain that computes volpo and blocking spheres: if accessible volpo>0",
            "    it also runs a raspa widom calculation for the Henry coefficient."
          ],
          "spec": {
            "inputs": [
              {
                "name": "molecule",
                "required": true,
                "valid_types": "Str, Dict",
                "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Parameters for the Isotherm workchain (see workchain.schema for default val ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "geometric",
                "required": false,
                "valid_types": "Dict",
                "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Results of the single temperature wc: keys can vay depending on is_porous a ..."
              },
              {
                "name": "block",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Blocked pockets fileoutput file."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.isotherm_accurate": {
          "description": [
            "Workchain that computes volpo and blocking spheres: if accessible volpo>0",
            "    it also runs a raspa widom calculation for the Henry coefficient."
          ],
          "spec": {
            "inputs": [
              {
                "name": "molecule",
                "required": true,
                "valid_types": "Str, Dict",
                "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Parameters for the Isotherm workchain (see workchain.schema for default val ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "geometric",
                "required": false,
                "valid_types": "Dict",
                "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Results of the single temperature wc: keys can vay depending on is_porous a ..."
              },
              {
                "name": "block",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Blocked pockets fileoutput file."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.isotherm_calc_pe": {
          "description": [
            "Compute CO2 parassitic energy (PE) after running IsothermWorkChain for CO2 and N2 at 300K."
          ],
          "spec": {
            "inputs": [
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "geometric",
                "required": false,
                "valid_types": "Dict",
                "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters for Isotherm work chain"
              },
              {
                "name": "pe_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters for PE process modelling"
              }
            ],
            "outputs": [
              {
                "name": "co2",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "n2",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Output parmaters of a calc_PE calculations"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.isotherm_inflection": {
          "description": [
            "A work chain to compute single component isotherms at adsorption and desorption:",
            "    GCMC calculations are run in parallell at all pressures, starting from the empty framework and the saturated system.",
            "    This workchain is useful to spot adsorption hysteresis."
          ],
          "spec": {
            "inputs": [
              {
                "name": "molecule",
                "required": true,
                "valid_types": "Str, Dict",
                "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Parameters for the Isotherm workchain (see workchain.schema for default val ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Results of the single temperature wc: keys can vay depending on is_porous."
              },
              {
                "name": "block",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Blocked pockets fileoutput file."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.isotherm_multi_temp": {
          "description": [
            "Run IsothermWorkChain for multiple temperatures: first compute geometric properties",
            "    and then submit Widom+GCMC at different temperatures in parallel"
          ],
          "spec": {
            "inputs": [
              {
                "name": "molecule",
                "required": true,
                "valid_types": "Str, Dict",
                "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Parameters for the Isotherm workchain (see workchain.schema for default val ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "geometric",
                "required": false,
                "valid_types": "Dict",
                "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Results of isotherms run at different temperatures."
              },
              {
                "name": "block",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Blocked pockets fileoutput file."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.multicomp_ads_des": {
          "description": [
            "Compute Adsorption/Desorption in crystalline materials,",
            "    for a mixture of componentes and at specific temperature/pressure conditions."
          ],
          "spec": {
            "inputs": [
              {
                "name": "conditions",
                "required": true,
                "valid_types": "Dict",
                "info": "Composition of the mixture, adsorption and desorption temperature and press ..."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Main parameters and settings for the calculations, to overwrite PARAMETERS_ ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Main results of the work chain."
              },
              {
                "name": "block_files",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Generated block pocket files."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.multicomp_gcmc": {
          "description": [
            "Compute multicomponent GCMC in crystalline materials (or empty box),",
            "    for a mixture of componentes and at specific temperature/pressure conditions."
          ],
          "spec": {
            "inputs": [
              {
                "name": "conditions",
                "required": true,
                "valid_types": "Dict",
                "info": "Composition of the mixture, list of temperature and pressure conditions."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Main parameters and settings for the calculations, to overwrite PARAMETERS_ ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Main results of the work chain."
              },
              {
                "name": "block_files",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Generated block pocket files."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.nanoporous_screening_1": {
          "description": [
            "A workchain that combines: ZeoppMultistageDdecWorkChain wc1 and IsothermCalcPEWorkChain wc2.",
            "    In future I will use this to include more applications to run in parallel."
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ddec",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "input structure"
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "geometric",
                "required": false,
                "valid_types": "Dict",
                "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "min_cell_size",
                "required": false,
                "valid_types": "Float",
                "info": "To avoid using k-points, extend the cell so that min(perp_width)>min_cell_s ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters for Isotherm work chain"
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Provide an initial parent folder that contains the wavefunction for restart"
              },
              {
                "name": "pe_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters for PE process modelling"
              },
              {
                "name": "protocol_modify",
                "required": false,
                "valid_types": "Dict",
                "info": "Specify custom settings that overvrite the yaml settings"
              },
              {
                "name": "protocol_tag",
                "required": false,
                "valid_types": "Str",
                "info": "The tag of the protocol to be read from {tag}.yaml unless protocol_yaml inp ..."
              },
              {
                "name": "protocol_yaml",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Specify a custom yaml file with the multistage settings (and ignore protoco ..."
              },
              {
                "name": "starting_settings_idx",
                "required": false,
                "valid_types": "Int",
                "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.sim_annealing": {
          "description": [
            "A work chain to compute the minimum energy geometry of a molecule inside a framework, using simulated annealing,",
            "    i.e., decreasing the temperature of a Monte Carlo simulation and finally running and energy minimization step."
          ],
          "spec": {
            "inputs": [
              {
                "name": "molecule",
                "required": true,
                "valid_types": "Str, Dict",
                "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Parameters for the SimAnnealing workchain: will be merged with default ones ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "loaded_molecule",
                "required": true,
                "valid_types": "CifData",
                "info": "CIF containing the final postition of the molecule."
              },
              {
                "name": "loaded_structure",
                "required": true,
                "valid_types": "CifData",
                "info": "CIF containing the loaded structure."
              },
              {
                "name": "output_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Information about the final configuration."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.singlecomp_widom": {
          "description": [
            "Computes widom insertion for a framework/box at different temperatures."
          ],
          "spec": {
            "inputs": [
              {
                "name": "molecule",
                "required": true,
                "valid_types": "Str, Dict, CifData",
                "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Main parameters and settings for the calculations, to overwrite PARAMETERS_ ..."
              },
              {
                "name": "raspa_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "CifData",
                "info": "Adsorbent framework CIF or None for a box."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Main results of the work chain."
              },
              {
                "name": "block",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Blocked pockets fileoutput file."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "lsmo.zeopp_multistage_ddec": {
          "description": [
            "A workchain that combines: Zeopp + Cp2kMultistageWorkChain + Cp2kDdecWorkChain + Zeopp"
          ],
          "spec": {
            "inputs": [
              {
                "name": "cp2k_base",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "ddec",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "input structure"
              },
              {
                "name": "zeopp",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "min_cell_size",
                "required": false,
                "valid_types": "Float",
                "info": "To avoid using k-points, extend the cell so that min(perp_width)>min_cell_s ..."
              },
              {
                "name": "parent_calc_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Provide an initial parent folder that contains the wavefunction for restart"
              },
              {
                "name": "protocol_modify",
                "required": false,
                "valid_types": "Dict",
                "info": "Specify custom settings that overvrite the yaml settings"
              },
              {
                "name": "protocol_tag",
                "required": false,
                "valid_types": "Str",
                "info": "The tag of the protocol to be read from {tag}.yaml unless protocol_yaml inp ..."
              },
              {
                "name": "protocol_yaml",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Specify a custom yaml file with the multistage settings (and ignore protoco ..."
              },
              {
                "name": "starting_settings_idx",
                "required": false,
                "valid_types": "Int",
                "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "structure_ddec",
                "required": true,
                "valid_types": "CifData",
                "info": "structure with DDEC charges"
              },
              {
                "name": "zeopp_after_opt",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "zeopp_before_opt",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "last_input_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "CP2K input parameters used (and possibly working) used in the last stage"
              },
              {
                "name": "output_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Output CP2K parameters of all the stages, merged together"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "raspa.base": {
          "description": [
            "Workchain to run a RASPA calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "raspa",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The results of a calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "warnings",
                "required": false,
                "valid_types": "List",
                "info": "Warnings that appeared during the calculation"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": false,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "nwchem.base": {
          "description": [
            "Base calculation class for NWChem."
          ],
          "spec": {
            "inputs": [
              {
                "name": "input_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "NWChem input file"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, NoneType",
                "info": "Remote directory of a completed NWChem calculation to restart from."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed output structure."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Required output files are missing."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete."
              },
              {
                "status": 313,
                "message": "The stdout contains multiple calculations"
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              }
            ]
          }
        },
        "nwchem.nwchem": {
          "description": [
            "Base calculation class for NWChem.",
            "",
            "    Synthesizes NWChem input file from parameter dictionary and StructureData."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure, with or without a cell"
              },
              {
                "name": "add_cell",
                "required": false,
                "valid_types": "Bool",
                "info": "The input structure, with or without a cell"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "restart_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, NoneType",
                "info": "Remote directory of a completed NWChem calculation to restart from."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed output structure."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 300,
                "message": "Required output files are missing."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete."
              },
              {
                "status": 313,
                "message": "The stdout contains multiple calculations"
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "nwchem.base": {
          "description": [
            "Workchain to run an NWChem calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "nwchem",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The relaxed output structure."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "orca.asa": {
          "description": [
            "OrcaAsaCalculation is a subclass of CalcJob to run",
            "    ORCA ASA calculation which gets the asa input file and generates the",
            "    absorption and emission spectra."
          ],
          "spec": {
            "inputs": [
              {
                "name": "input",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "ORCA asa input generated by main calculation"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "orca.orca": {
          "description": [
            "This is a OrcaCalculation, subclass of JobCalculation,",
            "    to prepare input for an ab-initio ORCA calculation.",
            "    For information on ORCA, refer to: https://orcaforum.kofo.mpg.de/app.php/portal",
            "    This class is responsible for doing main calculations in ORCA."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters to generate the input file."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Input structure"
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Additional input files like gbw or hessian"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Additional input parameters"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "the results of the calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "relaxed_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "relaxed structure"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The ORCA calculation did not finish succesfully."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "orca.base": {
          "description": [
            "Workchain to run a orca calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "orca",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Mapping where keys are process handler names and the values are a dictionar ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "the results of the calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "relaxed_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "relaxed structure"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 301,
                "message": "The calculation failed with an unrecoverable error coming from aiida-orca."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "porousmaterials": {
          "description": [
            "This is PorousMaterialsCalculation as the subclass",
            "    of AiiDA CalcJob to prepare input for the PorousMaterials",
            "    suite of Julia codes.",
            "    Please refer to : https://github.com/SimonEnsemble/PorousMaterials.jl"
          ],
          "spec": {
            "inputs": [
              {
                "name": "acc_voronoi_nodes",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Accessible Voronoi nodes calculated by Zeo++"
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "parameters such as cutoff and mixing rules."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Framework input file as CIF"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional input parameters"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "dictionary of calculated Voronoi energies"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "ev_output_file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 101,
                "message": "The retrieved folder does not contain an output file."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "qeq.eqeq": {
          "description": [
            "AiiDA calculation plugin for the EQeq code."
          ],
          "spec": {
            "inputs": [
              {
                "name": "charge_data",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "File containing information on common oxidation state of the elements."
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "ionization_data",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "File containing ionization data on the elements."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "EQeqParameters",
                "info": "Command line parameters for EQEQ"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Input structure, for which atomic charges are to be computed."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "qeq.qeq": {
          "description": [
            "AiiDA calculation plugin for the Qeq code."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "File containing electronegativity and Idempotential data of the elements."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "Input structure, for which atomic charges are to be computed."
              },
              {
                "name": "configure",
                "required": false,
                "valid_types": "QeqParameters",
                "info": "Configuration input for QEQ (configure.input file)"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "qp2": {
          "description": [
            "AiiDA calculation plugin wrapping the Quantum Package code."
          ],
          "spec": {
            "inputs": [
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters to generate the input file."
              },
              {
                "name": "basissets",
                "required": false,
                "valid_types": "",
                "info": "A dictionary of basissets to be used in the calculations: key is the atomic ..."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "pseudos",
                "required": false,
                "valid_types": "",
                "info": "A dictionary of pseudopotentials to be used in the calculations: key is the ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional input parameters."
              },
              {
                "name": "structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "Input structrure"
              },
              {
                "name": "wavefunction",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "The wavefunction file (EZFIO or TREXIO)."
              }
            ],
            "outputs": [
              {
                "name": "output_wavefunction",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "The wave function file (EZFIO or TREXIO)"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_energy",
                "required": false,
                "valid_types": "Float",
                "info": "The result of the calculation"
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 300,
                "message": "Calculation did not produce all expected output files."
              },
              {
                "status": 400,
                "message": "Energy value is not present in the output file."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "quantumespresso.cp": {
          "description": [
            "`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "Parallelization options. The following flags are allowed:\n"
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 304,
                "message": "The retrieved folder contains multiple XML files."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The required XML file could not be read."
              },
              {
                "status": 330,
                "message": "The required POS file could not be read."
              },
              {
                "status": 340,
                "message": "The required trajectory data could not be read."
              }
            ]
          }
        },
        "quantumespresso.create_kpoints_from_distance": {
          "description": [
            "Generate a uniformly spaced kpoint mesh for a given structure.",
            "",
            "    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.",
            "",
            "    :param structure: the StructureData to which the mesh should apply",
            "    :param distance: a Float with the desired distance between kpoints in reciprocal space",
            "    :param force_parity: a Bool to specify whether the generated mesh should maintain parity",
            "    :returns: a KpointsData with the generated mesh"
          ],
          "spec": {
            "inputs": [
              {
                "name": "distance",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "force_parity",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "quantumespresso.dos": {
          "description": [
            "`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The dos file could not be read from the retrieved folder."
              }
            ]
          }
        },
        "quantumespresso.epw": {
          "description": [
            "`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine kpoint mesh"
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse kpoint mesh"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder_nscf",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed nscf `PwCalculation`"
              },
              {
                "name": "parent_folder_ph",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PhCalculation`"
              },
              {
                "name": "qfpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "fine qpoint mesh"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "coarse qpoint mesh"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "quantumespresso.matdyn": {
          "description": [
            "`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "Kpoints on which to calculate the phonon frequencies."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The output frequencies file could not be read from the retrieved folder."
              },
              {
                "status": 410,
                "message": "Number of kpoints not found in the output data"
              },
              {
                "status": 411,
                "message": "Number of kpoints in the inputs is not commensurate with those in the output"
              }
            ]
          }
        },
        "quantumespresso.namelists": {
          "description": [
            "`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData, FolderData, SinglefileData",
                "info": "Use a local or remote folder as parent folder (for restarts and similar)"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "quantumespresso.neb": {
          "description": [
            "Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "first_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Initial structure"
              },
              {
                "name": "last_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Final structure"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "NEB-specific input parameters"
              },
              {
                "name": "pw",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              }
            ],
            "outputs": [
              {
                "name": "output_mep",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The original and interpolated energy profiles along the minimum-energy path ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters dictionary of the NEB calculation"
              },
              {
                "name": "output_trajectory",
                "required": true,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "iteration_array",
                "required": false,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 303,
                "message": "The required XML file is not present in the retrieved folder."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The output file contains invalid output."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              }
            ]
          }
        },
        "quantumespresso.ph": {
          "description": [
            "`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "the folder of a completed `PwCalculation`"
              },
              {
                "name": "qpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "qpoint mesh"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The minimization cycle did not reach self-consistency."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              }
            ]
          }
        },
        "quantumespresso.pp": {
          "description": [
            "`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job is performed."
              }
            ],
            "outputs": [
              {
                "name": "output_data",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_data_multiple",
                "required": true,
                "valid_types": "ArrayData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The parent folder did not contain the required XML output file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete."
              },
              {
                "status": 330,
                "message": "The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."
              },
              {
                "status": 331,
                "message": "The formatted data output file `{filename}` could not be read."
              },
              {
                "status": 332,
                "message": "The data file format is not supported by the parser"
              },
              {
                "status": 333,
                "message": "The formatted data output file `{filename}` could not be parsed"
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              }
            ]
          }
        },
        "quantumespresso.projwfc": {
          "description": [
            "`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.",
            "",
            "    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch",
            "    wavefunctions onto atomic orbitals.",
            "",
            "    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "Dos",
                "required": true,
                "valid_types": "XyData",
                "info": ""
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "bands",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_down",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands_up",
                "required": false,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "projections",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_down",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "projections_up",
                "required": false,
                "valid_types": "ProjectionData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 330,
                "message": "The pdos_tot file could not be read from the retrieved folder."
              },
              {
                "status": 340,
                "message": "An exception was raised parsing bands and projections."
              }
            ]
          }
        },
        "quantumespresso.pw": {
          "description": [
            "`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw2gw": {
          "description": [
            "`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Output folder of a completed `PwCalculation`"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "eps",
                "required": true,
                "valid_types": "ArrayData",
                "info": "The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, ..."
              },
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation.`"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 305,
                "message": "The eps*.dat output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The eps*.dat output files do not have the expected shape (N, 2)."
              },
              {
                "status": 331,
                "message": "The eps*.dat output files contains different values of energies."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              }
            ]
          }
        },
        "quantumespresso.pw2wannier90": {
          "description": [
            "`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.",
            "",
            "    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "nnkp_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "A SinglefileData containing the .nnkp file generated by wannier90.x -pp"
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": "The output folder of a pw.x calculation"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 340,
                "message": "Encountered a generic error message"
              },
              {
                "status": 350,
                "message": "An error happened while parsing the output file"
              }
            ]
          }
        },
        "quantumespresso.pwimmigrant": {
          "description": [
            "Create a PwCalculation object that can be used to import old jobs.",
            "",
            "    This is a sublass of aiida_quantumespresso.calculations.PwCalculation",
            "    with slight modifications to some of the class variables and additional",
            "    methods that",
            "",
            "        a. parse the job's input file to create the calculation's input",
            "           nodes that would exist if the calculation were submitted using AiiDa,",
            "        b. bypass the functions of the daemon, and prepare the node's attributes",
            "           such that all the processes (copying of the files to the repository,",
            "           results parsing, ect.) can be performed",
            "",
            "    .. note:: The keyword arguments of PwCalculation are also available.",
            "",
            "    :param remote_workdir: Absolute path to the directory where the job was run.",
            "        The transport of the computer you link ask input to the calculation is",
            "        the transport that will be used to retrieve the calculation's files.",
            "        Therefore, ``remote_workdir`` should be the absolute path to the job's",
            "        directory on that computer.",
            "    :type remote_workdir: str",
            "",
            "    :param input_file_name: The file name of the job's input file.",
            "    :type input_file_name: str",
            "",
            "    :param output_file_name: The file name of the job's output file (i.e. the",
            "        file containing the stdout of QE).",
            "    :type output_file_name: str"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "kpoint mesh or kpoint path"
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The input parameters that are to be used to construct the input file."
              },
              {
                "name": "pseudos",
                "required": true,
                "valid_types": "UpfData, UpfData",
                "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "hubbard_file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "An optional working directory of a previously completed calculation to rest ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
              },
              {
                "name": "vdw_table",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Optional van der Waals table contained in a `SinglefileData`."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 301,
                "message": "The retrieved temporary folder could not be accessed."
              },
              {
                "status": 302,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 303,
                "message": "The retrieved folder did not contain the required XML file."
              },
              {
                "status": 304,
                "message": "The retrieved folder contained multiple XML files."
              },
              {
                "status": 305,
                "message": "Both the stdout and XML output files could not be read or parsed."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 311,
                "message": "The stdout output file could not be parsed."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 320,
                "message": "The XML output file could not be read."
              },
              {
                "status": 321,
                "message": "The XML output file could not be parsed."
              },
              {
                "status": 322,
                "message": "The XML output file has an unsupported format."
              },
              {
                "status": 340,
                "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
              },
              {
                "status": 350,
                "message": "The parser raised an unexpected exception."
              },
              {
                "status": 400,
                "message": "The calculation stopped prematurely because it ran out of walltime."
              },
              {
                "status": 410,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 461,
                "message": "The code failed with negative dexx in the exchange calculation."
              },
              {
                "status": 462,
                "message": "The code failed during the cholesky factorization."
              },
              {
                "status": 463,
                "message": "Too many bands failed to converge during the diagonalization."
              },
              {
                "status": 481,
                "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
              },
              {
                "status": 500,
                "message": "The ionic minimization cycle did not converge for the given thresholds."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 502,
                "message": "The ionic minimization cycle did not converge after the maximum number of steps."
              },
              {
                "status": 510,
                "message": "The electronic minimization cycle failed during an ionic minimization cycle."
              },
              {
                "status": 511,
                "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
              },
              {
                "status": 520,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
              },
              {
                "status": 521,
                "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
              },
              {
                "status": 531,
                "message": "The electronic minimization cycle did not reach self-consistency."
              },
              {
                "status": 541,
                "message": "The variable cell optimization broke the symmetry of the k-points."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.q2r": {
          "description": [
            "`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parent_folder",
                "required": true,
                "valid_types": "RemoteData, FolderData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Use a node that specifies the input parameters for the namelists"
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Use an additional node for special settings"
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The stdout output file could not be read."
              },
              {
                "status": 312,
                "message": "The stdout output file was incomplete probably because the calculation got interrupted."
              },
              {
                "status": 330,
                "message": "The force constants file could not be read."
              }
            ]
          }
        },
        "quantumespresso.seekpath_structure_analysis": {
          "description": [
            "Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.",
            "",
            "    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the",
            "    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the",
            "    original structure in which case the k-points are only congruent with the primitive cell.",
            "",
            "    The keyword arguments can be used to specify various Seekpath parameters, such as:",
            "",
            "        with_time_reversal: True",
            "        reference_distance: 0.025",
            "        recipe: 'hpkot'",
            "        threshold: 1e-07",
            "        symprec: 1e-05",
            "        angle_tolerance: -1.0",
            "",
            "    Note that exact parameters that are available and their defaults will depend on your Seekpath version."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "quantumespresso.matdyn.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "matdyn",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_phonon_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pdos": {
          "description": [
            "A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."
          ],
          "spec": {
            "inputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": "Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax`  ..."
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` of the `nscf` calculation."
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "",
                "info": "Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Em ..."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "align_to_fermi",
                "required": false,
                "valid_types": "Bool",
                "info": "If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, work directories of all called calculation will be cleaned at  ..."
              },
              {
                "name": "dry_run",
                "required": false,
                "valid_types": "Bool",
                "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "scf",
                "required": false,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` of the `scf` calculation."
              },
              {
                "name": "serial_clean",
                "required": false,
                "valid_types": "Bool",
                "info": "If ``True``, calculations will be run in serial, and work directories will  ..."
              }
            ],
            "outputs": [
              {
                "name": "dos",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nscf",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "projwfc",
                "required": true,
                "valid_types": "",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."
              },
              {
                "status": 401,
                "message": "the SCF sub process failed"
              },
              {
                "status": 402,
                "message": "the NSCF sub process failed"
              },
              {
                "status": 403,
                "message": "the DOS sub process failed"
              },
              {
                "status": 404,
                "message": "the PROJWFC sub process failed"
              },
              {
                "status": 404,
                "message": "both the DOS and PROJWFC sub process failed"
              }
            ]
          }
        },
        "quantumespresso.ph.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "ph",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "only_initialization",
                "required": false,
                "valid_types": "Bool",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        },
        "quantumespresso.pw.band_structure": {
          "description": [
            "Workchain to automatically compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
            "",
            "    .. deprecated:: 4.0.0",
            "        This work chain has been replaced by the ``PwBandsWorkchain``."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `pw.x` code to use for the `PwCalculations`."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "options",
                "required": false,
                "valid_types": "Dict",
                "info": "Optional `options` to use for the `PwCalculations`."
              },
              {
                "name": "protocol",
                "required": false,
                "valid_types": "Dict",
                "info": "The protocol to use for the workchain."
              }
            ],
            "outputs": [
              {
                "name": "band_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "primitive_structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "scf_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "seekpath_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Input `StructureData` contains an unsupported kind."
              },
              {
                "status": 401,
                "message": "The `PwBandsWorkChain` sub process failed."
              }
            ]
          }
        },
        "quantumespresso.pw.bands": {
          "description": [
            "Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
            "",
            "    The logic for the computation of various parameters for the BANDS step is as follows:",
            "",
            "    Number of bands:",
            "        One can specify the number of bands to be used in the BANDS step either directly through the input parameters",
            "        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When",
            "        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being",
            "        used. If the `nbands_factor` is specified the maximum value of the following values will be used:",
            "",
            "        * `nbnd` of the preceding SCF calculation",
            "        * 0.5 * nspin * nelectrons * nbands_factor",
            "        * 0.5 * nspin * nelectrons + 4 * nspin",
            "",
            "    Kpoints:",
            "        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the",
            "        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.",
            "        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry",
            "        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that",
            "        of `bands_kpoints_distance` or the SeekPath default if not specified."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` for the BANDS calculation."
              },
              {
                "name": "scf",
                "required": true,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "bands_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "Explicit kpoints to use for the BANDS calculation. Specify either this or ` ..."
              },
              {
                "name": "bands_kpoints_distance",
                "required": false,
                "valid_types": "Float",
                "info": "Minimum kpoints distance for the BANDS calculation. Specify either this or  ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "nbands_factor",
                "required": false,
                "valid_types": "Float",
                "info": "The number of bands for the BANDS calculation is that used for the SCF mult ..."
              },
              {
                "name": "relax",
                "required": false,
                "valid_types": "",
                "info": "Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation  ..."
              }
            ],
            "outputs": [
              {
                "name": "band_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the BANDS `PwBaseWorkChain`."
              },
              {
                "name": "band_structure",
                "required": true,
                "valid_types": "BandsData",
                "info": "The computed band structure."
              },
              {
                "name": "scf_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The output parameters of the SCF `PwBaseWorkChain`."
              },
              {
                "name": "primitive_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The normalized and primitivized structure for which the bands are computed."
              },
              {
                "name": "seekpath_parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."
              },
              {
                "status": 202,
                "message": "Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."
              },
              {
                "status": 401,
                "message": "The PwRelaxWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "The scf PwBasexWorkChain sub process failed"
              },
              {
                "status": 403,
                "message": "The bands PwBasexWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.pw.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "pw",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "automatic_parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "When defined, the work chain will first launch an initialization calculatio ..."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": "An explicit k-points list or mesh. Either this or `kpoints_distance` has to ..."
              },
              {
                "name": "kpoints_distance",
                "required": false,
                "valid_types": "Float",
                "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
              },
              {
                "name": "kpoints_force_parity",
                "required": false,
                "valid_types": "Bool",
                "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "pseudo_family",
                "required": false,
                "valid_types": "Str",
                "info": "[Deprecated: use `pw.pseudos` instead] An alternative to specifying the pse ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "automatic_parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "The results of the automatic parallelization analysis if performed."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The `output_structure` output node of the successful calculation if present ..."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 201,
                "message": "The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."
              },
              {
                "status": 202,
                "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
              },
              {
                "status": 203,
                "message": "Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 204,
                "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
              },
              {
                "status": 210,
                "message": "Required key for `automatic_parallelization` was not specified."
              },
              {
                "status": 211,
                "message": "Unrecognized keys were specified for `automatic_parallelization`."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unidentified unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 310,
                "message": "The calculation failed with a known unrecoverable error."
              },
              {
                "status": 320,
                "message": "The initialization calculation failed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              },
              {
                "status": 501,
                "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
              },
              {
                "status": 710,
                "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
              }
            ]
          }
        },
        "quantumespresso.pw.relax": {
          "description": [
            "Workchain to relax a structure using Quantum ESPRESSO pw.x."
          ],
          "spec": {
            "inputs": [
              {
                "name": "base",
                "required": true,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` for the main relax loop."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The inputs structure."
              },
              {
                "name": "base_final_scf",
                "required": false,
                "valid_types": "",
                "info": "Inputs for the `PwBaseWorkChain` for the final scf."
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
              },
              {
                "name": "final_scf",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, a final SCF calculation will be performed on the successfully re ..."
              },
              {
                "name": "max_meta_convergence_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "The maximum number of variable cell relax iterations in the meta convergenc ..."
              },
              {
                "name": "meta_convergence",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True` the workchain will perform a meta-convergence on the cell volume."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "relaxation_scheme",
                "required": false,
                "valid_types": "Str",
                "info": "The relaxation scheme to use: choose either `relax` or `vc-relax` for varia ..."
              },
              {
                "name": "volume_convergence",
                "required": false,
                "valid_types": "Float",
                "info": "The volume difference threshold between two consecutive meta convergence it ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The `output_parameters` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "automatic_parallelization",
                "required": false,
                "valid_types": "Dict",
                "info": "The results of the automatic parallelization analysis if performed."
              },
              {
                "name": "output_atomic_occupations",
                "required": false,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "output_band",
                "required": false,
                "valid_types": "BandsData",
                "info": "The `output_band` output node of the successful calculation if present."
              },
              {
                "name": "output_kpoints",
                "required": false,
                "valid_types": "KpointsData",
                "info": ""
              },
              {
                "name": "output_structure",
                "required": false,
                "valid_types": "StructureData",
                "info": "The successfully relaxed structure."
              },
              {
                "name": "output_trajectory",
                "required": false,
                "valid_types": "TrajectoryData",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 401,
                "message": "the relax PwBaseWorkChain sub process failed"
              },
              {
                "status": 402,
                "message": "the final scf PwBaseWorkChain sub process failed"
              }
            ]
          }
        },
        "quantumespresso.q2r.base": {
          "description": [
            "Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "q2r",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "force_constants",
                "required": true,
                "valid_types": "ForceConstantsData",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 300,
                "message": "The calculation failed with an unrecoverable error."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "raspa": {
          "description": [
            "This is a RaspaCalculation, subclass of CalcJob, to prepare input for RASPA code.",
            "    For information on RASPA, refer to: https://github.com/iraspa/raspa2."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters"
              },
              {
                "name": "block_pocket",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Zeo++ block pocket file"
              },
              {
                "name": "file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Additional input file(s)"
              },
              {
                "name": "framework",
                "required": false,
                "valid_types": "CifData",
                "info": "Input framework(s)"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parent_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Remote folder used to continue the same simulation stating from the binary  ..."
              },
              {
                "name": "retrieved_parent_folder",
                "required": false,
                "valid_types": "FolderData",
                "info": "To use an old calculation as a starting poing for a new one."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional input parameters"
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The results of a calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "warnings",
                "required": false,
                "valid_types": "List",
                "info": "Warnings that appeared during the calculation"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 101,
                "message": "The retrieved folder does not contain an output file."
              },
              {
                "status": 102,
                "message": "The output does not contain \"Starting simulation\"."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 500,
                "message": "The calculation could not be completed due to the lack of time."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "raspa.base": {
          "description": [
            "Workchain to run a RASPA calculation with automated error handling and restarts."
          ],
          "spec": {
            "inputs": [
              {
                "name": "raspa",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The results of a calculation"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              },
              {
                "name": "warnings",
                "required": false,
                "valid_types": "List",
                "info": "Warnings that appeared during the calculation"
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "symmetry_representation.filter_symmetries": {
          "description": [
            "Calculation class to run the ``symmetry-repr filter_symmetries`` command."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure with which the filtered symmetries should be compatible."
              },
              {
                "name": "symmetries",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "File containing the symmetries (in HDF5 format)."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "symmetries",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "The HDF5 file containing the symmetries which are compatible with the struc ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "strain.apply_strains": {
          "description": [
            "Workchain to create strained structures from a given input structure."
          ],
          "spec": {
            "inputs": [
              {
                "name": "strain_kind",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "strain_parameters",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "strain_strengths",
                "required": true,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "strain.apply_strains_with_symmetry": {
          "description": [
            "Workchain to create strained structures from an input structure, and select the symmetries which are compatible with the strained structure from a set of given input symmetries."
          ],
          "spec": {
            "inputs": [
              {
                "name": "strain_kind",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "strain_parameters",
                "required": true,
                "valid_types": "Str",
                "info": ""
              },
              {
                "name": "strain_strengths",
                "required": true,
                "valid_types": "List",
                "info": ""
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": ""
              },
              {
                "name": "symmetries",
                "required": true,
                "valid_types": "SinglefileData",
                "info": ""
              },
              {
                "name": "symmetry_repr_code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "supercell": {
          "description": [
            "This is a SupercellCalculation, subclass of JobCalculation,",
            "    to prepare input for enumerating structures using Supercell program"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData, SinglefileData",
                "info": "Input structure"
              },
              {
                "name": "supercell_size",
                "required": true,
                "valid_types": "List",
                "info": "Supercell size for enumeration"
              },
              {
                "name": "calculate_coulomb_energies",
                "required": false,
                "valid_types": "Bool",
                "info": "Whether to calculate Coulomb energies"
              },
              {
                "name": "charge_balance_method",
                "required": false,
                "valid_types": "Str",
                "info": "Method to use for charge balancing"
              },
              {
                "name": "charges",
                "required": false,
                "valid_types": "Dict",
                "info": "Dictionary of formal charges to be used"
              },
              {
                "name": "merge_symmetric",
                "required": false,
                "valid_types": "Bool",
                "info": "Whether to merge symmetrically distinct configurations"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "random_seed",
                "required": false,
                "valid_types": "Int",
                "info": "Random seed number"
              },
              {
                "name": "sample_structures",
                "required": false,
                "valid_types": "Dict",
                "info": "How to sample structures from huge configuration space"
              },
              {
                "name": "save_as_archive",
                "required": false,
                "valid_types": "Bool",
                "info": "Whether to save resulting structures as archive"
              },
              {
                "name": "tolerance",
                "required": false,
                "valid_types": "Float",
                "info": "The maximum distance (in Angstroms) between sites that should be contained  ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "the results of the calculation"
              },
              {
                "name": "output_structures",
                "required": true,
                "valid_types": "StructureData",
                "info": "relaxed structure"
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 101,
                "message": "Input structure could not be processed."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        },
        "symmetry_representation.filter_symmetries": {
          "description": [
            "Calculation class to run the ``symmetry-repr filter_symmetries`` command."
          ],
          "spec": {
            "inputs": [
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "Structure with which the filtered symmetries should be compatible."
              },
              {
                "name": "symmetries",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "File containing the symmetries (in HDF5 format)."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "symmetries",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "The HDF5 file containing the symmetries which are compatible with the struc ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": false,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "bands_inspect.align": {
          "description": [
            "Calculation class for the ``bands-inspect align`` command.",
            "",
            "    Arguments",
            "    ---------",
            "    bands1 : aiida.orm.data.array.bands.BandsData",
            "        First band structure to compare.",
            "    bands2 : aiida.orm.data.array.bands.BandsData",
            "        Second band structure to compare."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands1",
                "required": true,
                "valid_types": "BandsData",
                "info": "First bandstructure which is to be aligned"
              },
              {
                "name": "bands2",
                "required": true,
                "valid_types": "BandsData",
                "info": "Second bandstructure which is to be aligned"
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "bands1_shifted",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "bands2_shifted",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              },
              {
                "name": "difference",
                "required": true,
                "valid_types": "Float",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "shift",
                "required": true,
                "valid_types": "Float",
                "info": ""
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "At least one of the expected output files is missing from the retrieved folder."
              },
              {
                "status": 220,
                "message": "The text output file content is not in the expected format."
              }
            ]
          }
        },
        "bands_inspect.difference": {
          "description": [
            "Calculation class for the ``bands-inspect difference`` command.",
            "",
            "    Arguments",
            "    ---------",
            "    bands1 : aiida.orm.nodes.data.array.bands.BandsData",
            "        First band structure to compare.",
            "    bands2 : aiida.orm.nodes.data.array.bands.BandsData",
            "        Second band structure to compare."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands1",
                "required": true,
                "valid_types": "BandsData",
                "info": "First bandstructure which is to be compared"
              },
              {
                "name": "bands2",
                "required": true,
                "valid_types": "BandsData",
                "info": "Second bandstructure which is to be compared"
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "difference",
                "required": true,
                "valid_types": "Float",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "The retrieved folder does not contain the difference output file."
              }
            ]
          }
        },
        "bands_inspect.plot": {
          "description": [
            "Calculation class for the ``bands_inspect plot`` command.",
            "",
            "    Arguments",
            "    ---------",
            "    bands1 : aiida.orm.nodes.data.array.bands.BandsData",
            "        First band structure to plot.",
            "    bands2 : aiida.orm.nodes.data.array.bands.BandsData",
            "        Second band structure to plot."
          ],
          "spec": {
            "inputs": [
              {
                "name": "bands1",
                "required": true,
                "valid_types": "BandsData",
                "info": "First bandstructure which is to be plotted"
              },
              {
                "name": "bands2",
                "required": true,
                "valid_types": "BandsData",
                "info": "Second bandstructure which is to be plotted"
              },
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "plot",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "The created band-structure comparison plot."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "The retrieved folder does not contain the plot output file."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "tbmodels.eigenvals": {
          "description": [
            "Calculation class for the 'tbmodels eigenvals' command, which computes the eigenvalues from a given tight-binding model."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "Kpoints for which the eigenvalues are calculated."
              },
              {
                "name": "tb_model",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input model in TBmodels HDF5 format."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "bands",
                "required": true,
                "valid_types": "BandsData",
                "info": "The calculated eigenvalues of the model at given k-points."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 300,
                "message": "The result HDF5 file was not found."
              },
              {
                "status": 301,
                "message": "The standard error file contains an unknown TBmodels exception."
              }
            ]
          }
        },
        "tbmodels.parse": {
          "description": [
            "Calculation plugin for the 'tbmodels parse' command, which creates a",
            "    TBmodels tight-binding model from the Wannier90 output."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "wannier_folder",
                "required": true,
                "valid_types": "FolderData",
                "info": "Folder containing the Wannier90 output data."
              },
              {
                "name": "distance_ratio_threshold",
                "required": false,
                "valid_types": "Float",
                "info": "Determines the minimum ratio between nearest and next-nearest atom when par ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "pos_kind",
                "required": false,
                "valid_types": "Str",
                "info": "Determines how the orbital positions are parsed."
              },
              {
                "name": "sparsity",
                "required": false,
                "valid_types": "Str",
                "info": "Set the sparsity of the output model. Requires TBmodels version >=1.4."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "tb_model",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output model in TBmodels HDF5 format."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 300,
                "message": "The output model HDF5 file was not found."
              },
              {
                "status": 301,
                "message": "The standard error file contains an unknown TBmodels exception."
              },
              {
                "status": 301,
                "message": "The seedname_wsvec.dat file is empty or incomplete."
              },
              {
                "status": 401,
                "message": "The nearest atom to use for position parsing is ambiguous."
              }
            ]
          }
        },
        "tbmodels.slice": {
          "description": [
            "Calculation plugin for the 'tbmodels slice' command, which re-orders or slices orbitals of a tight-binding model."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "slice_idx",
                "required": true,
                "valid_types": "List",
                "info": "Indices of the orbitals which are sliced from the model."
              },
              {
                "name": "tb_model",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input model in TBmodels HDF5 format."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "sparsity",
                "required": false,
                "valid_types": "Str",
                "info": "Set the sparsity of the output model. Requires TBmodels version >=1.4."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "tb_model",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output model in TBmodels HDF5 format."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 300,
                "message": "The output model HDF5 file was not found."
              },
              {
                "status": 301,
                "message": "The standard error file contains an unknown TBmodels exception."
              }
            ]
          }
        },
        "tbmodels.symmetrize": {
          "description": [
            "Calculation class for the 'tbmodels symmetrize' command, which creates a symmetrized tight-binding model from a tight-binding model and symmetry representations."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "symmetries",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "File containing the symmetries in HDF5 format."
              },
              {
                "name": "tb_model",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Input model in TBmodels HDF5 format."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "sparsity",
                "required": false,
                "valid_types": "Str",
                "info": "Set the sparsity of the output model. Requires TBmodels version >=1.4."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "tb_model",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output model in TBmodels HDF5 format."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 300,
                "message": "The output model HDF5 file was not found."
              },
              {
                "status": 301,
                "message": "The standard error file contains an unknown TBmodels exception."
              },
              {
                "status": 301,
                "message": "The type of the given symmetries object is incorrect."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "tbmodels.parse": {
          "description": [
            "Workchain for the 'tbmodels parse' command that handles basic",
            "    failures. If `pos_kind = 'nearest_atom'` is specified as input",
            "    and fails due to ambiguous positions, the model is instead",
            "    parsed with `pos_kind = 'wannier'`."
          ],
          "spec": {
            "inputs": [
              {
                "name": "calc",
                "required": true,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "clean_workdir",
                "required": false,
                "valid_types": "Bool",
                "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
              },
              {
                "name": "handler_overrides",
                "required": false,
                "valid_types": "Dict",
                "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
              },
              {
                "name": "max_iterations",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum number of iterations the work chain will restart the process to fin ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "tb_model",
                "required": true,
                "valid_types": "SinglefileData",
                "info": "Output model in TBmodels HDF5 format."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 301,
                "message": "The sub process excepted."
              },
              {
                "status": 302,
                "message": "The sub process was killed."
              },
              {
                "status": 401,
                "message": "The maximum number of iterations was exceeded."
              },
              {
                "status": 402,
                "message": "The process failed for an unknown reason, twice in a row."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "core.arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "code",
                "required": false,
                "valid_types": "AbstractCode, NoneType",
                "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict, NoneType",
                "info": "Parameters used to replace placeholders in the template."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              },
              {
                "status": 301,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 305,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 310,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 311,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "monitors",
                "required": false,
                "valid_types": "Dict",
                "info": "Add monitoring functions that can inspect output files while the job is run ..."
              },
              {
                "name": "remote_folder",
                "required": false,
                "valid_types": "RemoteData, NoneType",
                "info": "Remote directory containing the results of an already completed calculation ..."
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 131,
                "message": "The specified account is invalid."
              },
              {
                "status": 140,
                "message": "The node running the job failed."
              },
              {
                "status": 150,
                "message": "{message}"
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "core.arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "AbstractCode",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "wannier90.wannier90": {
          "description": [
            "Plugin for Wannier90, a code for computing maximally-localized Wannier",
            "    functions. See http://www.wannier.org/ for more details."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "kpoints",
                "required": true,
                "valid_types": "KpointsData",
                "info": "k-point mesh used in the NSCF calculation."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "Input parameters for the Wannier90 code"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "input crystal structure"
              },
              {
                "name": "kpoint_path",
                "required": false,
                "valid_types": "Dict",
                "info": "Description of the k-points path to be used for bands interpolation; it sho ..."
              },
              {
                "name": "local_input_folder",
                "required": false,
                "valid_types": "FolderData",
                "info": "Get input files (``.amn``, ``.mmn``, ...) from a class ``FolderData`` store ..."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "projections",
                "required": false,
                "valid_types": "OrbitalData, Dict, List",
                "info": "Starting projections for the Wannierisation procedure."
              },
              {
                "name": "remote_input_folder",
                "required": false,
                "valid_types": "RemoteData",
                "info": "Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possi ..."
              },
              {
                "name": "settings",
                "required": false,
                "valid_types": "Dict",
                "info": "Additional settings to manage the Wannier90 calculation."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "The ``output_parameters`` output node of the successful calculation."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "interpolated_bands",
                "required": false,
                "valid_types": "BandsData",
                "info": "The interpolated band structure by Wannier90 (if any)."
              },
              {
                "name": "nnkp_file",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "The ``.nnkp`` file, produced only in -pp (postproc) mode."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 200,
                "message": "The retrieved folder data node could not be accessed."
              },
              {
                "status": 210,
                "message": "The retrieved folder did not contain the required stdout output file."
              },
              {
                "status": 300,
                "message": "A Wannier90 error file (.werr) has been found."
              },
              {
                "status": 400,
                "message": "The string \"Exiting...\" has been found in the Wannier90 output (some partial output might have been parsed)."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        },
        "wannier90.minimal": {
          "description": [
            "Workchain to run a full stack of Quantum ESPRESSO + Wannier90 for GaAs.",
            "",
            "    Note that this is mostly to be used as an example, as there is no",
            "    error checking and runs directly Quantum ESPRESSO calculations rather",
            "    than the base workflows."
          ],
          "spec": {
            "inputs": [
              {
                "name": "kpoint_path",
                "required": true,
                "valid_types": "Dict",
                "info": "The kpoints path for the NSCF run and Wannierisation."
              },
              {
                "name": "kpoints_nscf",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The kpoints for the NSCF run and Wannierisation."
              },
              {
                "name": "kpoints_scf",
                "required": true,
                "valid_types": "KpointsData",
                "info": "The kpoints for the SCF run."
              },
              {
                "name": "projections",
                "required": true,
                "valid_types": "OrbitalData",
                "info": "The projections for the Wannierisation."
              },
              {
                "name": "pseudo_family",
                "required": true,
                "valid_types": "Str",
                "info": "The name of a pseudopotential family to use."
              },
              {
                "name": "pw2wannier90_code",
                "required": true,
                "valid_types": "Code",
                "info": "The `pw2wannier90.x` code to use for the `Pw2Wannier90Calculation`s."
              },
              {
                "name": "pw_code",
                "required": true,
                "valid_types": "Code",
                "info": "The `pw.x` code to use for the `PwCalculation`s."
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "StructureData",
                "info": "The input structure."
              },
              {
                "name": "wannier_code",
                "required": true,
                "valid_types": "Code",
                "info": "The `wannier90.x` code to use for the `Wannier90Calculation`s."
              },
              {
                "name": "max_wallclock_seconds",
                "required": false,
                "valid_types": "Int",
                "info": "Maximum wallclock time in seconds"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "num_machines",
                "required": false,
                "valid_types": "Int",
                "info": "The number of machines (nodes) to use"
              }
            ],
            "outputs": [
              {
                "name": "matrices_folder",
                "required": true,
                "valid_types": "FolderData",
                "info": ""
              },
              {
                "name": "nnkp_file",
                "required": true,
                "valid_types": "SinglefileData",
                "info": ""
              },
              {
                "name": "nscf_output",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "p2wannier_output",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "pw2wan_remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": ""
              },
              {
                "name": "scf_output",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "wannier_bands",
                "required": true,
                "valid_types": "BandsData",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {},
    "error_message": ""
  },
  {
    "is_installable": true,
    "is_importable": true,
    "process_metadata": {
      "aiida.calculations": {
        "arithmetic.add": {
          "description": [
            "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The left operand."
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The right operand."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "sum",
                "required": true,
                "valid_types": "Int, Float",
                "info": "The sum of the left and right operand."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              },
              {
                "status": 310,
                "message": "The output file could not be read."
              },
              {
                "status": 320,
                "message": "The output file contains invalid output."
              },
              {
                "status": 410,
                "message": "The sum of the operands is a negative number."
              }
            ]
          }
        },
        "core.transfer": {
          "description": [
            "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
            "",
            "    The final destination for these files can be either the local repository (by creating a",
            "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
            "    new remote folder saved in a RemoteData node).",
            "",
            "    Only files from the local computer and from remote folders in the same external computer",
            "    can be moved at the same time with a single instance of this CalcJob.",
            "",
            "    The user needs to provide three inputs:",
            "",
            "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
            "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
            "        * ``metadata.computer``: the computer that contains the remote files and will contain",
            "          the final RemoteData node.",
            "",
            "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
            "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
            "",
            "        (1) leave them there (``retrieve_files = False``) or ...",
            "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
            "",
            "    The `instructions` dict must also contain at least one list with specifications of which files",
            "    to copy and from where. All these lists take tuples of 3 that have the following format:",
            "",
            "    .. code-block:: python",
            "",
            "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
            "",
            "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
            "    ``source_nodes`` input nodes dictionary.",
            "",
            "",
            "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
            "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
            "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
            "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
            "    files in second list only a symlink to the original file will be created there. This will only",
            "    affect the content of the final RemoteData target folder, but in both cases the full file will",
            "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
          ],
          "spec": {
            "inputs": [
              {
                "name": "instructions",
                "required": true,
                "valid_types": "Dict",
                "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
              },
              {
                "name": "source_nodes",
                "required": true,
                "valid_types": "FolderData, RemoteData",
                "info": "All the nodes that contain files referenced in the instructions."
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "templatereplacer": {
          "description": [
            "Simple stub of a plugin that can be used to replace some text in a given template.",
            "    Can be used for many different codes, or as a starting point to develop a new plugin.",
            "",
            "    This simple plugin takes two node inputs, both of type Dict, with the labels",
            "    'parameters' and 'template'",
            "",
            "    You can also add other SinglefileData nodes as input, that will be copied according to",
            "    what is written in 'template' (see below).",
            "",
            "    * parameters: a set of parameters that will be used for substitution.",
            "",
            "    * template: can contain the following parameters:",
            "",
            "        * input_file_template: a string with substitutions to be managed with the format()",
            "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
            "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
            "          details. The replaced file will be the input file.",
            "",
            "        * input_file_name: a string with the file name for the input. If it is not provided, no",
            "          file will be created.",
            "",
            "        * output_file_name: a string with the file name for the output. If it is not provided, no",
            "          redirection will be done and the output will go in the scheduler output file.",
            "",
            "        * cmdline_params: a list of strings, to be passed as command line parameters.",
            "          Each one is substituted with the same rule of input_file_template. Optional",
            "",
            "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
            "",
            "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
            "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
            "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
            "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
            "            unused input files.",
            "",
            "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
            "            temporarily stored in an unstored FolderData node that will be available during the",
            "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "template",
                "required": true,
                "valid_types": "Dict",
                "info": "A template for the input file."
              },
              {
                "name": "files",
                "required": false,
                "valid_types": "RemoteData, SinglefileData",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              },
              {
                "name": "parameters",
                "required": false,
                "valid_types": "Dict",
                "info": "Parameters used to replace placeholders in the template."
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": ""
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "The temporary retrieved folder data node could not be accessed."
              },
              {
                "status": 105,
                "message": "The `template` input node did not specify the key `output_file_name`."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 110,
                "message": "The output file could not be read from the retrieved folder."
              },
              {
                "status": 111,
                "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
              },
              {
                "status": 120,
                "message": "The output file contains invalid output."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        },
        "zeopp.network": {
          "description": [
            "AiiDA calculation plugin for the zeo++ network binary"
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": "The `Code` to use for this job."
              },
              {
                "name": "parameters",
                "required": true,
                "valid_types": "NetworkParameters",
                "info": "command line parameters for zeo++"
              },
              {
                "name": "structure",
                "required": true,
                "valid_types": "CifData",
                "info": "input structure to be analyzed"
              },
              {
                "name": "atomic_radii",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "atomic radii file"
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "output_parameters",
                "required": true,
                "valid_types": "Dict",
                "info": "key-value pairs parsed from zeo++ output file(s)."
              },
              {
                "name": "remote_folder",
                "required": true,
                "valid_types": "RemoteData",
                "info": "Input files necessary to run the process will be stored in this folder node ..."
              },
              {
                "name": "retrieved",
                "required": true,
                "valid_types": "FolderData",
                "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
              },
              {
                "name": "block",
                "required": false,
                "valid_types": "SinglefileData",
                "info": "Blocked pockets fileoutput file."
              },
              {
                "name": "remote_stash",
                "required": false,
                "valid_types": "RemoteStashData",
                "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
              }
            ],
            "exit_codes": [
              {
                "status": 0,
                "message": "Calculation completed successfully."
              },
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 100,
                "message": "The process did not have the required `retrieved` output."
              },
              {
                "status": 101,
                "message": "Not all expected output files were found."
              },
              {
                "status": 102,
                "message": "Empty block file. This indicates the calculation of blocked pockets did not finish."
              },
              {
                "status": 110,
                "message": "The job ran out of memory."
              },
              {
                "status": 120,
                "message": "The job ran out of walltime."
              }
            ]
          }
        }
      },
      "aiida.workflows": {
        "arithmetic.add_multiply": {
          "description": [
            "Add two numbers and multiply it with a third."
          ],
          "spec": {
            "inputs": [
              {
                "name": "x",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Data",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              }
            ]
          }
        },
        "arithmetic.multiply_add": {
          "description": [
            "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
          ],
          "spec": {
            "inputs": [
              {
                "name": "code",
                "required": true,
                "valid_types": "Code",
                "info": ""
              },
              {
                "name": "x",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "y",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "z",
                "required": true,
                "valid_types": "Int",
                "info": ""
              },
              {
                "name": "metadata",
                "required": false,
                "valid_types": "",
                "info": ""
              }
            ],
            "outputs": [
              {
                "name": "result",
                "required": true,
                "valid_types": "Int",
                "info": ""
              }
            ],
            "exit_codes": [
              {
                "status": 1,
                "message": "The process has failed with an unspecified error."
              },
              {
                "status": 2,
                "message": "The process failed with legacy failure mode."
              },
              {
                "status": 10,
                "message": "The process returned an invalid output."
              },
              {
                "status": 11,
                "message": "The process did not register a required output."
              },
              {
                "status": 400,
                "message": "The result is a negative number."
              }
            ]
          }
        }
      }
    },
    "error_message": ""
  }
]