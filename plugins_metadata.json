{
  "aiida-QECpWorkChain": {
    "aiida_version": ">=2.0.0,<3.0.0",
    "code_home": "https://github.com/rikigigi/aiida-QECpWorkChain",
    "development_status": "beta",
    "entry_point_prefix": "qecpworkchain",
    "entry_points": {
      "aiida.workflows": {
        "qecpworkchain.cp": "aiida_QECpWorkChain.workflow:CpWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Riccardo Bertossa",
      "author_email": "rbertoss@sissa.it",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "Car-Parrinello Work Chain with Quantum Espresso. This workchain does a full CP simulation, from the choice of the electronic mass and the timestep, to the choice of the best parallelization options, and then it does the NPT equilibration and a final NVE simulation at the prescribed P and T. Automates as much as possible.",
      "version": "0.2.0a0"
    },
    "name": "aiida-QECpWorkChain",
    "package_name": "aiida_QECpWorkChain",
    "pip_url": "git+https://github.com/rikigigi/aiida-QECpWorkChain"
  },
  "aiida-abinit": {
    "aiida_version": ">=1.6.3,<1.7.0",
    "code_home": "https://github.com/sponce24/aiida-abinit",
    "development_status": "beta",
    "entry_point_prefix": "abinit",
    "entry_points": {
      "aiida.calculations": {
        "abinit": "aiida_abinit.calculations:AbinitCalculation"
      },
      "aiida.parsers": {
        "abinit": "aiida_abinit.parsers:AbinitParser"
      },
      "aiida.workflows": {
        "abinit.base": "aiida_abinit.workflows.base:AbinitBaseWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "Samuel Ponce <samuel.pon@gmail.com>",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "The AiiDA plugin for ABINIT.",
      "version": "0.4.0"
    },
    "name": "aiida-abinit",
    "package_name": "aiida_abinit",
    "pip_url": "aiida-abinit",
    "plugin_info": "https://raw.github.com/sponce24/aiida-abinit/master/setup.json"
  },
  "aiida-aenet": {
    "aiida_version": "~=1.2",
    "code_home": "https://gitlab.com/lattice737/aiida-aenet",
    "development_status": "planning",
    "entry_point_prefix": "aenet",
    "entry_points": {
      "aenet.potentials": {
        "lammps.ann": "aiida_aenet.data.potentials.lammps:ANN"
      },
      "aiida.calculations": {
        "aenet.cur": "aiida_aenet.calculations.cur:CurCalculation",
        "aenet.generate": "aiida_aenet.calculations.generate:AenetGenerateCalculation",
        "aenet.predict": "aiida_aenet.calculations.predict:AenetPredictCalculation",
        "aenet.simulate": "aiida_aenet.calculations.simulate:AenetLammpsMdCalculation",
        "aenet.train": "aiida_aenet.calculations.train:AenetTrainCalculation",
        "aenet.transform": "aiida_aenet.calculations.transform:TransformCalculation"
      },
      "aiida.data": {
        "aenet.algorithm": "aiida_aenet.data.algorithm:AenetAlgorithm",
        "aenet.potential": "aiida_aenet.data.potentials:AenetPotential"
      },
      "aiida.parsers": {
        "aenet.generate": "aiida_aenet.parsers.generate:AenetGenerateParser",
        "aenet.predict": "aiida_aenet.parsers.predict:AenetPredictParser",
        "aenet.simulate": "aiida_aenet.parsers.simulate:AenetLammpsMdParser",
        "aenet.train": "aiida_aenet.parsers.train:AenetTrainParser"
      },
      "aiida.workflows": {
        "aenet.build_reference": "aiida_aenet.workflows.build_reference:BuildReferenceWorkChain",
        "aenet.compare_simulations": "aiida_aenet.workflows.compare_simulations:CompareSimulationsWorkChain",
        "aenet.make_potential": "aiida_aenet.workflows.make_potential:MakePotentialWorkChain",
        "aenet.make_structures": "aiida_aenet.workflows.make_structures:MakeStructuresWorkChain"
      }
    },
    "hosted_on": "gitlab.com",
    "metadata": {
      "author": "Nicholas Martinez",
      "author_email": "nicholasmartinez@my.unt.edu",
      "classifiers": [
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Development Status :: 0 - Alpha"
      ],
      "description": "AiiDA plugin to construct machine-learning potentials using aenet",
      "version": "0.1.0"
    },
    "name": "aiida-aenet",
    "package_name": "aiida_aenet",
    "pip_url": "https://gitlab.com/lattice737/aiida-aenet"
  },
  "aiida-alloy": {
    "aiida_version": ">=1.0.0a0",
    "code_home": "https://github.com/DanielMarchand/aiida-alloy",
    "development_status": "beta",
    "entry_point_prefix": "alloy",
    "entry_points": {
      "aiida.workflows": {
        "elastic": "aiida_alloy.workflows.ElasticWorkChain:ElasticWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The AiiDA developers group",
      "author_email": "",
      "classifiers": [
        "Programming Language :: Python"
      ],
      "description": "Aiida Workflows for Elastic Constants using Quantum Espresso",
      "version": "0.1.0a0"
    },
    "name": "aiida-alloy",
    "package_name": "aiida_alloy",
    "pip_url": "git+https://github.com/DanielMarchand/aiida-alloy"
  },
  "aiida-ase": {
    "aiida_version": ">=1.6,<2.0",
    "code_home": "https://github.com/aiidateam/aiida-ase",
    "development_status": "beta",
    "documentation_url": "https://aiida-ase.readthedocs.io/",
    "entry_point_prefix": "ase",
    "entry_points": {
      "aiida.calculations": {
        "ase.ase": "aiida_ase.calculations.ase:AseCalculation"
      },
      "aiida.parsers": {
        "ase.ase": "aiida_ase.parsers.ase:AseParser",
        "ase.gpaw": "aiida_ase.parsers.gpaw:GpawParser"
      },
      "aiida.workflows": {
        "ase.gpaw.base": "aiida_ase.workflows.base:GpawBaseWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "The AiiDA team <developers@aiida.net>",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering"
      ],
      "description": "The official AiiDA plugin for ASE.",
      "version": "2.0.0"
    },
    "name": "aiida-ase",
    "package_name": "aiida_ase",
    "pip_url": "aiida-ase",
    "plugin_info": "https://raw.github.com/aiidateam/aiida-ase/master/setup.json"
  },
  "aiida-autocas": {
    "aiida_version": ">=2.0,<3",
    "code_home": "https://github.com/microsoft/aiida-autocas",
    "development_status": "planning",
    "entry_point_prefix": "autocas",
    "entry_points": {
      "aiida.calculations": {
        "autocas": "aiida_autocas.calculations:AutoCASCalculation"
      },
      "aiida.parsers": {
        "autocas": "aiida_autocas.parsers:AutoCASParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "classifiers": [],
      "description": "AiiDA AutoCAS Plugin",
      "version": "0.1.0"
    },
    "name": "aiida-autocas",
    "package_name": "aiida_autocas",
    "pip_url": "git+https://github.com/microsoft/aiida-autocas",
    "version_file": "https://raw.githubusercontent.com/microsoft/aiida-autocas/main/aiida_autocas/__init__.py"
  },
  "aiida-bands-inspect": {
    "aiida_version": null,
    "code_home": "https://github.com/greschd/aiida-bands-inspect",
    "development_status": "beta",
    "documentation_url": "https://aiida-bands-inspect.readthedocs.io",
    "entry_point_prefix": "bands_inspect",
    "entry_points": {
      "aiida.calculations": {
        "bands_inspect.align": "aiida_bands_inspect.calculations.align:AlignCalculation",
        "bands_inspect.difference": "aiida_bands_inspect.calculations.difference:DifferenceCalculation",
        "bands_inspect.plot": "aiida_bands_inspect.calculations.plot:PlotCalculation"
      },
      "aiida.parsers": {
        "bands_inspect.align": "aiida_bands_inspect.parsers.align:AlignParser",
        "bands_inspect.bands": "aiida_bands_inspect.parsers.bands:BandsParser",
        "bands_inspect.difference": "aiida_bands_inspect.parsers.difference:DifferenceParser",
        "bands_inspect.plot": "aiida_bands_inspect.parsers.plot:PlotParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Dominik Gresch",
      "author_email": "greschd@gmx.ch",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: Apache Software License",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for running bands_inspect",
      "home_page": "https://aiida-bands-inspect.readthedocs.io",
      "license": "Apache 2.0",
      "version": "0.4.0"
    },
    "name": "aiida-bands-inspect",
    "package_name": "aiida_bands_inspect",
    "pip_url": "aiida-bands-inspect"
  },
  "aiida-bigdft": {
    "aiida_version": ">=1.1.1,<2.0.0",
    "code_home": "https://github.com/BigDFT-group/aiida-bigdft-plugin",
    "development_status": "beta",
    "entry_point_prefix": "bigdft",
    "entry_points": {
      "aiida.calculations": {
        "bigdft": "aiida_bigdft.calculations.bigdft:BigDFTCalculation",
        "bigdft.postscript": "aiida_bigdft.calculations.postscript:ScriptCalculation"
      },
      "aiida.cmdline.data": {
        "bigdft": "aiida_bigdft.cli:data_cli"
      },
      "aiida.data": {
        "bigdft": "aiida_bigdft.data:BigDFTParameters",
        "bigdft_logfile": "aiida_bigdft.data:BigDFTLogfile"
      },
      "aiida.parsers": {
        "bigdft": "aiida_bigdft.parsers:BigDFTParser"
      },
      "aiida.workflows": {
        "bigdft": "aiida_bigdft.workflows.base:BigDFTBaseWorkChain",
        "bigdft.relax": "aiida_bigdft.workflows.relax:BigDFTRelaxWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The BigDFT Team",
      "author_email": "bigdft-developers@lists.launchpad.net",
      "classifiers": [
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "Aiida plugin for BigDFT code",
      "home_page": "https://github.com/BigDFT-group/aiida-bigdft-plugin",
      "license": "MIT",
      "version": "0.2.6"
    },
    "name": "aiida-bigdft",
    "package_name": "aiida_bigdft",
    "pip_url": "aiida-bigdft",
    "plugin_info": "https://raw.github.com/BigDFT-group/aiida-bigdft-plugin/master/setup.json"
  },
  "aiida-castep": {
    "aiida_version": ">=2.0,<3.0",
    "code_home": "https://gitlab.com/bz1/aiida-castep",
    "development_status": "stable",
    "documentation_url": "https://aiida-castep.readthedocs.io/",
    "entry_point_prefix": "castep",
    "entry_points": {
      "aiida.calculations": {
        "castep.castep": "aiida_castep.calculations.castep:CastepCalculation",
        "castep.ts": "aiida_castep.calculations.castep:CastepTSCalculation"
      },
      "aiida.cmdline.data": {
        "castep-helper": "aiida_castep.cmdline.helper_cmd:helper_cmd",
        "castep-pseudos": "aiida_castep.cmdline.otfg_cmd:pseudos_cmd"
      },
      "aiida.data": {
        "castep.otfgdata": "aiida_castep.data.otfg:OTFGData",
        "castep.uspdata": "aiida_castep.data.usp:UspData"
      },
      "aiida.groups": {
        "castep.otfg": "aiida_castep.data.otfg:OTFGGroup"
      },
      "aiida.parsers": {
        "castep.castep": "aiida_castep.parsers.castep:CastepParser"
      },
      "aiida.tests": {
        "castep.calculation": "aiida_castep.tests.dbtests.dbtestcalculation"
      },
      "aiida.tools.calculations": {
        "castep.castep": "aiida_castep.calculations.tools:CastepCalcTools"
      },
      "aiida.workflows": {
        "castep.altrelax": "aiida_castep.workflows.relax:CastepAlterRelaxWorkChain",
        "castep.bands": "aiida_castep.workflows.bands:CastepBandsWorkChain",
        "castep.base": "aiida_castep.workflows.base:CastepBaseWorkChain",
        "castep.relax": "aiida_castep.workflows.relax:CastepRelaxWorkChain"
      },
      "console_scripts": {
        "castep.mock": "aiida_castep.cmdline.mock_castep:mock_castep"
      }
    },
    "hosted_on": "gitlab.com",
    "metadata": {
      "author": "Bonan Zhu",
      "author_email": "zhubonan@outlook.com",
      "classifiers": [
        "Framework :: AiiDA",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "AiiDA plugin for CASTEP",
      "home_page": "https://github.com/zhubonan/aiida-castep",
      "license": "MIT License",
      "version": "2.0.1"
    },
    "name": "aiida-castep",
    "package_name": "aiida_castep",
    "pip_url": "aiida-castep",
    "plugin_info": "https://gitlab.com/bz1/aiida-castep/raw/master/setup.json"
  },
  "aiida-catmap": {
    "aiida_version": ">=1.1.0,<2.0.0",
    "code_home": "https://github.com/sudarshanv01/aiida-catmap",
    "development_status": "planning",
    "entry_point_prefix": "catmap",
    "entry_points": {
      "aiida.calculations": {
        "catmap": "aiida_catmap.calculations.catmap:CatMAPCalculation"
      },
      "aiida.parsers": {
        "catmap": "aiida_catmap.parsers.catmap:CatMAPParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Sudarshan Vijay",
      "author_email": "vijays@fysik.dtu.dk",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA package that interfaces with Kinetic modelling code CatMAP",
      "version": "0.2.0a0"
    },
    "name": "aiida-catmap",
    "package_name": "aiida_catmap"
  },
  "aiida-catmat": {
    "aiida_version": null,
    "code_home": "https://github.com/pzarabadip/aiida-catmat",
    "development_status": "beta",
    "documentation_url": "https://aiida-catmat.readthedocs.io/",
    "entry_point_prefix": "catmat",
    "entry_points": {
      "aiida.parsers": {
        "vasp_base_parser": "aiida_catmat.parsers:VaspBaseParser"
      },
      "aiida.workflows": {
        "catmat.vasp_catmat": "aiida_catmat.workchains:VaspCatMatWorkChain",
        "catmat.vasp_converge": "aiida_catmat.workchains:VaspConvergeWorkChain",
        "catmat.vasp_multistage": "aiida_catmat.workchains:VaspMultiStageWorkChain",
        "catmat.vasp_multistage_ddec": "aiida_catmat.workchains:VaspMultiStageDdecWorkChain",
        "vasp.base": "aiida_catmat.workchains:VaspBaseWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Pezhman Zarabadi-Poor",
      "author_email": "pzarabadip@gmail.com",
      "classifiers": [
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "Collection of AiiDA WorkChains Developed in Morgan Group",
      "home_page": "https://github.com/pzarabadip/aiida-catmat",
      "license": "MIT License",
      "version": "1.0.0b0"
    },
    "name": "aiida-catmat",
    "package_name": "aiida_catmat",
    "pip_url": "aiida-catmat"
  },
  "aiida-ce": {
    "aiida_version": ">=1.0.0,<2.0.0",
    "code_home": "https://github.com/unkcpz/aiida-ce",
    "development_status": "beta",
    "entry_point_prefix": "ce",
    "entry_points": {
      "aiida.calculations": {
        "ce.genenum": "aiida_ce.calculations.genenum:EnumCalculation",
        "ce.gensqs": "aiida_ce.calculations.gensqs:SqsCalculation",
        "ce.train": "aiida_ce.calculations.train:TrainCalculation"
      },
      "aiida.cmdline.data": {
        "ce": "aiida_ce.cli:data_cli"
      },
      "aiida.data": {
        "ce": "aiida_ce.data:DiffParameters",
        "ce.cluster": "aiida_ce.data.cluster:ClusterSpaceData",
        "ce.structures": "aiida_ce.data.structure_set:StructureSet"
      },
      "aiida.parsers": {
        "ce.genenum": "aiida_ce.parsers.genenum:EnumParser",
        "ce.gensqs": "aiida_ce.parsers.gensqs:SqsParser",
        "ce.train": "aiida_ce.parsers.train:TrainParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "unkcpz",
      "author_email": "morty.yu@yahoo.com",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA plugin for running cluster expansion using icet.",
      "version": "0.1.0a0"
    },
    "name": "aiida-ce",
    "package_name": "aiida_ce",
    "pip_url": "git+https://github.com/unkcpz/aiida-ce"
  },
  "aiida-champ": {
    "aiida_version": null,
    "code_home": "https://github.com/TREX-CoE/aiida-champ",
    "development_status": "beta",
    "documentation_url": "http://aiida-champ.readthedocs.io/",
    "entry_point_prefix": "champ",
    "entry_points": {
      "aiida.calculations": {
        "CHAMP": "aiida_champ.calculations:CHAMPCalculation"
      },
      "aiida.cmdline.data": {
        "CHAMP": "aiida_champ.cli:data_cli"
      },
      "aiida.data": {
        "CHAMP": "aiida_champ.data:CHAMPParameters"
      },
      "aiida.parsers": {
        "CHAMP": "aiida_champ.parsers:CHAMPParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Ravindra Shinde",
      "author_email": "r.l.shinde@utwente.nl",
      "classifiers": [
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin that wraps the vmc executable of CHAMP code for computing the total energy and much more stuff.",
      "home_page": "https://github.com/neelravi/aiida-champ",
      "license": "MIT",
      "version": "1.2.6"
    },
    "name": "aiida-champ",
    "package_name": "aiida_champ",
    "pip_url": "aiida-champ"
  },
  "aiida-codtools": {
    "aiida_version": ">=2.1,<3.0",
    "code_home": "https://github.com/aiidateam/aiida-codtools",
    "development_status": "stable",
    "documentation_url": "https://aiida-codtools.readthedocs.io/",
    "entry_point_prefix": "codtools",
    "entry_points": {
      "aiida.calculations": {
        "codtools.cif_base": "aiida_codtools.calculations.cif_base:CifBaseCalculation",
        "codtools.cif_cell_contents": "aiida_codtools.calculations.cif_cell_contents:CifCellContentsCalculation",
        "codtools.cif_cod_check": "aiida_codtools.calculations.cif_cod_check:CifCodCheckCalculation",
        "codtools.cif_cod_deposit": "aiida_codtools.calculations.cif_cod_deposit:CifCodDepositCalculation",
        "codtools.cif_cod_numbers": "aiida_codtools.calculations.cif_cod_numbers:CifCodNumbersCalculation",
        "codtools.cif_filter": "aiida_codtools.calculations.cif_filter:CifFilterCalculation",
        "codtools.cif_select": "aiida_codtools.calculations.cif_select:CifSelectCalculation",
        "codtools.cif_split_primitive": "aiida_codtools.calculations.cif_split_primitive:CifSplitPrimitiveCalculation",
        "codtools.primitive_structure_from_cif": "aiida_codtools.calculations.functions.primitive_structure_from_cif:primitive_structure_from_cif"
      },
      "aiida.parsers": {
        "codtools.cif_base": "aiida_codtools.parsers.cif_base:CifBaseParser",
        "codtools.cif_cell_contents": "aiida_codtools.parsers.cif_cell_contents:CifCellContentsParser",
        "codtools.cif_cod_check": "aiida_codtools.parsers.cif_cod_check:CifCodCheckParser",
        "codtools.cif_cod_deposit": "aiida_codtools.parsers.cif_cod_deposit:CifCodDepositParser",
        "codtools.cif_cod_numbers": "aiida_codtools.parsers.cif_cod_numbers:CifCodNumbersParser",
        "codtools.cif_split_primitive": "aiida_codtools.parsers.cif_split_primitive:CifSplitPrimitiveParser"
      },
      "aiida.workflows": {
        "codtools.cif_clean": "aiida_codtools.workflows.cif_clean:CifCleanWorkChain"
      },
      "console_scripts": {
        "aiida-codtools": "aiida_codtools.cli:cmd_root"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "The AiiDA team <developers@aiida.net>",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "The Official AiiDA plugin for the cod-tools package.",
      "version": "3.1.0"
    },
    "name": "aiida-codtools",
    "package_name": "aiida_codtools",
    "pip_url": "aiida-codtools",
    "plugin_info": "https://raw.githubusercontent.com/aiidateam/aiida-codtools/master/setup.json"
  },
  "aiida-core": {
    "aiida_version": "==2.3.1",
    "code_home": "https://github.com/aiidateam/aiida-core",
    "development_status": "stable",
    "documentation_url": "https://aiida-core.readthedocs.io/",
    "entry_point_prefix": "",
    "entry_points": {
      "aiida.calculations": {
        "core.arithmetic.add": "aiida.calculations.arithmetic.add:ArithmeticAddCalculation",
        "core.templatereplacer": "aiida.calculations.templatereplacer:TemplatereplacerCalculation",
        "core.transfer": "aiida.calculations.transfer:TransferCalculation"
      },
      "aiida.calculations.importers": {
        "core.arithmetic.add": "aiida.calculations.importers.arithmetic.add:ArithmeticAddCalculationImporter"
      },
      "aiida.calculations.monitors": {
        "core.always_kill": "aiida.calculations.monitors.base:always_kill"
      },
      "aiida.cmdline.computer.configure": {
        "core.local": "aiida.transports.plugins.local:CONFIGURE_LOCAL_CMD",
        "core.ssh": "aiida.transports.plugins.ssh:CONFIGURE_SSH_CMD"
      },
      "aiida.cmdline.data": {
        "core.array": "aiida.cmdline.commands.cmd_data.cmd_array:array",
        "core.bands": "aiida.cmdline.commands.cmd_data.cmd_bands:bands",
        "core.cif": "aiida.cmdline.commands.cmd_data.cmd_cif:cif",
        "core.dict": "aiida.cmdline.commands.cmd_data.cmd_dict:dictionary",
        "core.remote": "aiida.cmdline.commands.cmd_data.cmd_remote:remote",
        "core.singlefile": "aiida.cmdline.commands.cmd_data.cmd_singlefile:singlefile",
        "core.structure": "aiida.cmdline.commands.cmd_data.cmd_structure:structure",
        "core.trajectory": "aiida.cmdline.commands.cmd_data.cmd_trajectory:trajectory",
        "core.upf": "aiida.cmdline.commands.cmd_data.cmd_upf:upf"
      },
      "aiida.cmdline.data.structure.import": {},
      "aiida.data": {
        "core.array": "aiida.orm.nodes.data.array.array:ArrayData",
        "core.array.bands": "aiida.orm.nodes.data.array.bands:BandsData",
        "core.array.kpoints": "aiida.orm.nodes.data.array.kpoints:KpointsData",
        "core.array.projection": "aiida.orm.nodes.data.array.projection:ProjectionData",
        "core.array.trajectory": "aiida.orm.nodes.data.array.trajectory:TrajectoryData",
        "core.array.xy": "aiida.orm.nodes.data.array.xy:XyData",
        "core.base": "aiida.orm.nodes.data:BaseType",
        "core.bool": "aiida.orm.nodes.data.bool:Bool",
        "core.cif": "aiida.orm.nodes.data.cif:CifData",
        "core.code": "aiida.orm.nodes.data.code.legacy:Code",
        "core.code.containerized": "aiida.orm.nodes.data.code.containerized:ContainerizedCode",
        "core.code.installed": "aiida.orm.nodes.data.code.installed:InstalledCode",
        "core.code.portable": "aiida.orm.nodes.data.code.portable:PortableCode",
        "core.dict": "aiida.orm.nodes.data.dict:Dict",
        "core.enum": "aiida.orm.nodes.data.enum:EnumData",
        "core.float": "aiida.orm.nodes.data.float:Float",
        "core.folder": "aiida.orm.nodes.data.folder:FolderData",
        "core.int": "aiida.orm.nodes.data.int:Int",
        "core.jsonable": "aiida.orm.nodes.data.jsonable:JsonableData",
        "core.list": "aiida.orm.nodes.data.list:List",
        "core.numeric": "aiida.orm.nodes.data.numeric:NumericType",
        "core.orbital": "aiida.orm.nodes.data.orbital:OrbitalData",
        "core.remote": "aiida.orm.nodes.data.remote.base:RemoteData",
        "core.remote.stash": "aiida.orm.nodes.data.remote.stash.base:RemoteStashData",
        "core.remote.stash.folder": "aiida.orm.nodes.data.remote.stash.folder:RemoteStashFolderData",
        "core.singlefile": "aiida.orm.nodes.data.singlefile:SinglefileData",
        "core.str": "aiida.orm.nodes.data.str:Str",
        "core.structure": "aiida.orm.nodes.data.structure:StructureData",
        "core.upf": "aiida.orm.nodes.data.upf:UpfData"
      },
      "aiida.groups": {
        "core": "aiida.orm.groups:Group",
        "core.auto": "aiida.orm.groups:AutoGroup",
        "core.import": "aiida.orm.groups:ImportGroup",
        "core.upf": "aiida.orm.groups:UpfFamily"
      },
      "aiida.node": {
        "data": "aiida.orm.nodes.data.data:Data",
        "process": "aiida.orm.nodes.process.process:ProcessNode",
        "process.calculation": "aiida.orm.nodes.process.calculation.calculation:CalculationNode",
        "process.calculation.calcfunction": "aiida.orm.nodes.process.calculation.calcfunction:CalcFunctionNode",
        "process.calculation.calcjob": "aiida.orm.nodes.process.calculation.calcjob:CalcJobNode",
        "process.workflow": "aiida.orm.nodes.process.workflow.workflow:WorkflowNode",
        "process.workflow.workchain": "aiida.orm.nodes.process.workflow.workchain:WorkChainNode",
        "process.workflow.workfunction": "aiida.orm.nodes.process.workflow.workfunction:WorkFunctionNode"
      },
      "aiida.parsers": {
        "core.arithmetic.add": "aiida.parsers.plugins.arithmetic.add:ArithmeticAddParser",
        "core.templatereplacer": "aiida.parsers.plugins.templatereplacer.parser:TemplatereplacerParser"
      },
      "aiida.schedulers": {
        "core.direct": "aiida.schedulers.plugins.direct:DirectScheduler",
        "core.lsf": "aiida.schedulers.plugins.lsf:LsfScheduler",
        "core.pbspro": "aiida.schedulers.plugins.pbspro:PbsproScheduler",
        "core.sge": "aiida.schedulers.plugins.sge:SgeScheduler",
        "core.slurm": "aiida.schedulers.plugins.slurm:SlurmScheduler",
        "core.torque": "aiida.schedulers.plugins.torque:TorqueScheduler"
      },
      "aiida.storage": {
        "core.psql_dos": "aiida.storage.psql_dos.backend:PsqlDosBackend",
        "core.sqlite_temp": "aiida.storage.sqlite_temp.backend:SqliteTempBackend",
        "core.sqlite_zip": "aiida.storage.sqlite_zip.backend:SqliteZipBackend"
      },
      "aiida.tools.calculations": {},
      "aiida.tools.data.orbitals": {
        "core.orbital": "aiida.tools.data.orbital.orbital:Orbital",
        "core.realhydrogen": "aiida.tools.data.orbital.realhydrogen:RealhydrogenOrbital"
      },
      "aiida.tools.dbexporters": {},
      "aiida.tools.dbimporters": {
        "core.cod": "aiida.tools.dbimporters.plugins.cod:CodDbImporter",
        "core.icsd": "aiida.tools.dbimporters.plugins.icsd:IcsdDbImporter",
        "core.materialsproject": "aiida.tools.dbimporters.plugins.materialsproject:MaterialsProjectImporter",
        "core.mpds": "aiida.tools.dbimporters.plugins.mpds:MpdsDbImporter",
        "core.mpod": "aiida.tools.dbimporters.plugins.mpod:MpodDbImporter",
        "core.nninc": "aiida.tools.dbimporters.plugins.nninc:NnincDbImporter",
        "core.oqmd": "aiida.tools.dbimporters.plugins.oqmd:OqmdDbImporter",
        "core.pcod": "aiida.tools.dbimporters.plugins.pcod:PcodDbImporter",
        "core.tcod": "aiida.tools.dbimporters.plugins.tcod:TcodDbImporter"
      },
      "aiida.transports": {
        "core.local": "aiida.transports.plugins.local:LocalTransport",
        "core.ssh": "aiida.transports.plugins.ssh:SshTransport"
      },
      "aiida.workflows": {
        "core.arithmetic.add_multiply": "aiida.workflows.arithmetic.add_multiply:add_multiply",
        "core.arithmetic.multiply_add": "aiida.workflows.arithmetic.multiply_add:MultiplyAddWorkChain"
      },
      "console_scripts": {
        "runaiida": "aiida.cmdline.commands.cmd_run:run",
        "verdi": "aiida.cmdline.commands.cmd_verdi:verdi"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "The AiiDA team <developers@aiida.net>",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering"
      ],
      "description": "AiiDA is a workflow manager for computational science with a strong focus on provenance, performance and extensibility.",
      "version": "2.3.1"
    },
    "name": "aiida-core",
    "package_name": "aiida",
    "pip_url": "aiida-core",
    "plugin_info": "https://raw.githubusercontent.com/aiidateam/aiida-core/master/setup.json"
  },
  "aiida-cp2k": {
    "aiida_version": ">=2.0.0,<3.0.0",
    "code_home": "https://github.com/cp2k/aiida-cp2k",
    "development_status": "stable",
    "entry_point_prefix": "cp2k",
    "entry_points": {
      "aiida.calculations": {
        "cp2k": "aiida_cp2k.calculations:Cp2kCalculation"
      },
      "aiida.parsers": {
        "cp2k_advanced_parser": "aiida_cp2k.parsers:Cp2kAdvancedParser",
        "cp2k_base_parser": "aiida_cp2k.parsers:Cp2kBaseParser",
        "cp2k_tools_parser": "aiida_cp2k.parsers:Cp2kToolsParser"
      },
      "aiida.workflows": {
        "cp2k.base": "aiida_cp2k.workchains:Cp2kBaseWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The AiiDA team",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python :: 3"
      ],
      "description": "The official AiiDA plugin for CP2K.",
      "version": "2.0.0"
    },
    "name": "aiida-cp2k",
    "package_name": "aiida_cp2k",
    "pip_url": "aiida-cp2k",
    "plugin_info": "https://raw.githubusercontent.com/cp2k/aiida-cp2k/master/setup.json"
  },
  "aiida-crystal-dft": {
    "aiida_version": ">=2.0.2",
    "code_home": "https://github.com/tilde-lab/aiida-crystal-dft",
    "development_status": "beta",
    "documentation_url": "https://github.com/tilde-lab/aiida-crystal-dft",
    "entry_point_prefix": "crystal_dft",
    "entry_points": {
      "aiida.calculations": {
        "crystal_dft.parallel": "aiida_crystal_dft.calculations.parallel:CrystalParallelCalculation",
        "crystal_dft.properties": "aiida_crystal_dft.calculations.properties:PropertiesCalculation",
        "crystal_dft.serial": "aiida_crystal_dft.calculations.serial:CrystalSerialCalculation"
      },
      "aiida.cmdline.data": {
        "crystal_dft": "aiida_crystal_dft.cli.basis:basis_set"
      },
      "aiida.data": {
        "crystal_dft.basis": "aiida_crystal_dft.data.basis:CrystalBasisData",
        "crystal_dft.basis_family": "aiida_crystal_dft.data.basis_family:CrystalBasisFamilyData"
      },
      "aiida.parsers": {
        "crystal_dft": "aiida_crystal_dft.parsers.cry_pycrystal:CrystalParser",
        "crystal_dft.properties": "aiida_crystal_dft.parsers.properties:PropertiesParser"
      },
      "aiida.workflows": {
        "crystal_dft.base": "aiida_crystal_dft.workflows.base:BaseCrystalWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Andrey Sobolev, based on aiida-crystal17 plugin by Chris Sewell",
      "author_email": "as@tilde.pro",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Intended Audience :: Science/Research",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Topic :: Scientific/Engineering",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Scientific/Engineering :: Information Analysis"
      ],
      "description": "Yet another AiiDA plugin for CRYSTAL code, mainly intended for use with the cloud infrastructures\n(currently, MPDS)"
    },
    "name": "aiida-crystal-dft",
    "package_name": "aiida_crystal_dft",
    "pip_url": "git+https://github.com/tilde-lab/aiida-crystal-dft"
  },
  "aiida-crystal17": {
    "aiida_version": ">=1.4.0,<2.0.0",
    "code_home": "https://github.com/aiidaplugins/aiida-crystal17",
    "development_status": "beta",
    "documentation_url": "https://aiida-crystal17.readthedocs.io",
    "entry_point_prefix": "crystal17",
    "entry_points": {
      "aiida.calculations": {
        "crystal17.basic": "aiida_crystal17.calculations.cry_basic:CryBasicCalculation",
        "crystal17.doss": "aiida_crystal17.calculations.prop_doss:CryDossCalculation",
        "crystal17.ech3": "aiida_crystal17.calculations.prop_ech3:CryEch3Calculation",
        "crystal17.main": "aiida_crystal17.calculations.cry_main:CryMainCalculation",
        "crystal17.newk": "aiida_crystal17.calculations.prop_newk:CryNewkCalculation",
        "crystal17.ppan": "aiida_crystal17.calculations.prop_ppan:CryPpanCalculation"
      },
      "aiida.cmdline.data": {
        "crystal17.basis": "aiida_crystal17.cmndline.basis_set:basisset",
        "crystal17.parse": "aiida_crystal17.cmndline.cmd_parser:parse",
        "crystal17.symmetry": "aiida_crystal17.cmndline.symmetry:symmetry"
      },
      "aiida.data": {
        "crystal17.basisset": "aiida_crystal17.data.basis_set:BasisSetData",
        "crystal17.gcube": "aiida_crystal17.data.gcube:GaussianCube",
        "crystal17.kinds": "aiida_crystal17.data.kinds:KindData",
        "crystal17.parameters": "aiida_crystal17.data.input_params:CryInputParamsData",
        "crystal17.symmetry": "aiida_crystal17.data.symmetry:SymmetryData"
      },
      "aiida.groups": {
        "crystal17.basisset": "aiida_crystal17.data.basis_set:BasisSetFamily"
      },
      "aiida.parsers": {
        "crystal17.doss": "aiida_crystal17.parsers.cry_doss:CryDossParser",
        "crystal17.ech3": "aiida_crystal17.parsers.cry_ech3:CryEch3Parser",
        "crystal17.main": "aiida_crystal17.parsers.cry_main:CryMainParser",
        "crystal17.newk": "aiida_crystal17.parsers.cry_newk:CryNewkParser",
        "crystal17.ppan": "aiida_crystal17.parsers.cry_ppan:CryPpanParser"
      },
      "aiida.workflows": {
        "crystal17.main.base": "aiida_crystal17.workflows.crystal_main.base:CryMainBaseWorkChain",
        "crystal17.properties": "aiida_crystal17.workflows.crystal_props.base:CryPropertiesWorkChain",
        "crystal17.sym3d": "aiida_crystal17.workflows.symmetrise_3d_struct:Symmetrise3DStructure"
      },
      "console_scripts": {
        "mock_crystal17": "aiida_crystal17.tests.mock_crystal17:main",
        "mock_properties17": "aiida_crystal17.tests.mock_properties17:main"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Chris Sewell",
      "author_email": "chrisj_sewell@hotmail.com",
      "classifiers": [
        "Framework :: AiiDA",
        "Programming Language :: Python",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.6",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA plugin for running the CRYSTAL17 code",
      "home_page": "https://github.com/chrisjsewell/aiida-crystal17",
      "license": "MIT",
      "version": "0.11.0"
    },
    "name": "aiida-crystal17",
    "package_name": "aiida_crystal17",
    "pip_url": "aiida-crystal17",
    "plugin_info": "https://raw.githubusercontent.com/aiidaplugins/aiida-crystal17/master/setup.json"
  },
  "aiida-cusp": {
    "aiida_version": ">=1.3.0,<2.0.0",
    "code_home": "https://github.com/aiida-cusp/aiida-cusp",
    "development_status": "beta",
    "documentation_url": "https://aiida-cusp.readthedocs.io",
    "entry_point_prefix": "cusp",
    "entry_points": {
      "aiida.calculations": {
        "cusp.vasp": "aiida_cusp.calculators.vasp_calculation:VaspCalculation"
      },
      "aiida.cmdline.data": {
        "potcar": "aiida_cusp.cli.potcar_cmd:potcar"
      },
      "aiida.data": {
        "cusp.chgcar": "aiida_cusp.data.outputs.vasp_chgcar:VaspChgcarData",
        "cusp.contcar": "aiida_cusp.data.outputs.vasp_contcar:VaspContcarData",
        "cusp.generic": "aiida_cusp.data.outputs.vasp_generic:VaspGenericData",
        "cusp.incar": "aiida_cusp.data.inputs.vasp_incar:VaspIncarData",
        "cusp.kpoints": "aiida_cusp.data.inputs.vasp_kpoint:VaspKpointData",
        "cusp.outcar": "aiida_cusp.data.outputs.vasp_outcar:VaspOutcarData",
        "cusp.poscar": "aiida_cusp.data.inputs.vasp_poscar:VaspPoscarData",
        "cusp.potcar": "aiida_cusp.data.inputs.vasp_potcar:VaspPotcarData",
        "cusp.potcarfile": "aiida_cusp.data.inputs.vasp_potcar:VaspPotcarFile",
        "cusp.vasprun": "aiida_cusp.data.outputs.vasp_vasprun:VaspVasprunData",
        "cusp.wavecar": "aiida_cusp.data.outputs.vasp_wavecar:VaspWavecarData"
      },
      "aiida.parsers": {
        "cusp.default": "aiida_cusp.parsers.vasp_file_parser:VaspFileParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Andreas Stamminger",
      "author_email": "stammingera@gmail.com",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Environment :: Plugins",
        "Framework :: AiiDA"
      ],
      "description": "Custodian based VASP Plugin for AiiDA",
      "version": "0.1.0b2"
    },
    "name": "aiida-cusp",
    "package_name": "aiida_cusp",
    "pip_url": "https://pypi.org/project/aiida-cusp"
  },
  "aiida-dataframe": {
    "aiida_version": ">=1.0,<3",
    "code_home": "https://github.com/janssenhenning/aiida-dataframe",
    "development_status": "beta",
    "documentation_url": "https://aiida-dataframe.readthedocs.io/en/latest/",
    "entry_point_prefix": "dataframe",
    "entry_points": {
      "aiida.cmdline.data": {
        "dataframe": "aiida_dataframe.cli:data_cli"
      },
      "aiida.data": {
        "dataframe.frame": "aiida_dataframe.data.dataframe:PandasFrameData"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "Henning Jan\u00dfen <henning.janssen@gmx.net>",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "AiiDA data plugin for pandas DataFrame objects",
      "version": "0.1.3"
    },
    "name": "aiida-dataframe",
    "package_name": "aiida_dataframe",
    "pip_url": "aiida-dataframe",
    "plugin_info": "https://raw.github.com/janssenhenning/aiida-dataframe/main/pyproject.toml",
    "version_file": "https://raw.githubusercontent.com/janssenhenning/aiida-dataframe/main/aiida_dataframe/__init__.py"
  },
  "aiida-ddec": {
    "aiida_version": ">=1.1.0,<3",
    "code_home": "https://github.com/lsmo-epfl/aiida-ddec",
    "development_status": "stable",
    "entry_point_prefix": "ddec",
    "entry_points": {
      "aiida.calculations": {
        "ddec": "aiida_ddec.calculations:DdecCalculation"
      },
      "aiida.parsers": {
        "ddec": "aiida_ddec.parsers:DdecParser"
      },
      "aiida.workflows": {
        "ddec.cp2k_ddec": "aiida_ddec.workchains:Cp2kDdecWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Aliaksandr Yakutovich",
      "author_email": "aliaksandr.yakutovich@epfl.ch",
      "classifiers": [
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Framework :: AiiDA",
        "Development Status :: 5 - Production/Stable"
      ],
      "description": "AiiDA plugin for DDEC code",
      "version": "1.1.0"
    },
    "name": "aiida-ddec",
    "package_name": "aiida_ddec",
    "pip_url": "git+https://github.com/yakutovicha/aiida-ddec"
  },
  "aiida-defects": {
    "aiida_version": ">=2.0,<3",
    "code_home": "https://github.com/epfl-theos/aiida-defects",
    "development_status": "beta",
    "entry_point_prefix": "defects",
    "entry_points": {
      "aiida.data": {
        "defects.array.stability": "aiida_defects.data.data:StabilityData"
      },
      "aiida.workflows": {
        "defects.formation_energy.chemical_potential": "aiida_defects.formation_energy.chemical_potential.chemical_potential:ChemicalPotentialWorkchain",
        "defects.formation_energy.corrections.gaussian_countercharge": "aiida_defects.formation_energy.corrections.gaussian_countercharge.gaussian_countercharge:GaussianCounterChargeWorkchain",
        "defects.formation_energy.corrections.gaussian_countercharge.model_potential": "aiida_defects.formation_energy.corrections.gaussian_countercharge.model_potential.model_potential:ModelPotentialWorkchain",
        "defects.formation_energy.corrections.point_countercharge": "aiida_defects.formation_energy.corrections.point_countercharge.point_countercharge:PointCounterChargeWorkchain",
        "defects.formation_energy.potential_alignment": "aiida_defects.formation_energy.potential_alignment.potential_alignment:PotentialAlignmentWorkchain",
        "defects.formation_energy.qe": "aiida_defects.formation_energy.formation_energy_qe:FormationEnergyWorkchainQE",
        "defects.formation_energy.siesta": "aiida_defects.formation_energy.formation_energy_siesta:FormatonEnergyWorkchainSiesta"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The AiiDA-Defects developers",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "AiiDA-Defects is a plugin for the AiiDA computational materials science framework, and provides tools and automated workflows for the study of defects in materials.",
      "version": "1.0.1"
    },
    "name": "aiida-defects",
    "package_name": "aiida_defects",
    "pip_url": "aiida-defects",
    "plugin_info": "https://raw.githubusercontent.com/epfl-theos/aiida-defects/master/pyproject.toml"
  },
  "aiida-diff": {
    "aiida_version": ">=2.0,<3",
    "code_home": "https://github.com/aiidateam/aiida-diff",
    "development_status": "stable",
    "documentation_url": "https://aiida-diff.readthedocs.io/",
    "entry_point_prefix": "diff",
    "entry_points": {
      "aiida.calculations": {
        "diff": "aiida_diff.calculations:DiffCalculation"
      },
      "aiida.cmdline.data": {
        "diff": "aiida_diff.cli:data_cli"
      },
      "aiida.data": {
        "diff": "aiida_diff.data:DiffParameters"
      },
      "aiida.parsers": {
        "diff": "aiida_diff.parsers:DiffParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The AiiDA Team",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Development Status :: 3 - Alpha",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA demo plugin that wraps the `diff` executable for computing the difference between two files."
    },
    "name": "aiida-diff",
    "package_name": "aiida_diff",
    "pip_url": "git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0"
  },
  "aiida-donothing": {
    "aiida_version": ">=1.6.5,<2.0.0",
    "code_home": "https://github.com/atztogo/aiida-donothing",
    "development_status": "planning",
    "entry_point_prefix": "donothing",
    "entry_points": {
      "aiida.calculations": {
        "donothing.donothing": "aiida_donothing.calculations.donothing:DoNothingCalculation"
      },
      "aiida.parsers": {
        "donothing.donothing": "aiida_donothing.parsers.donothing:DoNothingParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Atsushi Togo",
      "author_email": "atz.togo@gmail.com",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA calculation plugin for doing nothing",
      "version": "0.1"
    },
    "name": "aiida-donothing",
    "package_name": "aiida_donothing"
  },
  "aiida-dynamic-workflows": {
    "aiida_version": null,
    "code_home": "https://github.com/microsoft/aiida-dynamic-workflows",
    "development_status": "planning",
    "entry_point_prefix": "dynamic_workflows",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-dynamic-workflows",
    "package_name": "aiida_dynamic_workflows"
  },
  "aiida-environ": {
    "aiida_version": null,
    "code_home": "https://github.com/environ-developers/aiida-environ",
    "development_status": "planning",
    "entry_point_prefix": "environ",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-environ",
    "package_name": "aiida_environ",
    "pip_url": "git+https://github.com/environ-developers/aiida-environ"
  },
  "aiida-eon": {
    "aiida_version": null,
    "code_home": "https://github.com/HaoZeke/aiida-eon",
    "development_status": "planning",
    "entry_point_prefix": "eon",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-eon",
    "package_name": "aiida_eon"
  },
  "aiida-eonclient": {
    "aiida_version": null,
    "code_home": "https://github.com/HaoZeke/aiida-eonclient",
    "development_status": "planning",
    "entry_point_prefix": "eonclient",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-eonclient",
    "package_name": "aiida_eonclient"
  },
  "aiida-fenics": {
    "aiida_version": null,
    "code_home": "https://github.com/sphuber/aiida-fenics/tree/master",
    "development_status": "planning",
    "entry_point_prefix": "fenics",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-fenics",
    "package_name": "aiida_fenics",
    "pip_url": "git+https://github.com/sphuber/aiida-fenics"
  },
  "aiida-firecrest": {
    "aiida_version": "<2",
    "code_home": "https://github.com/aiidateam/aiida-firecrest",
    "development_status": "alpha",
    "entry_point_prefix": "firecrest",
    "entry_points": {
      "aiida.schedulers": {
        "firecrest": "aiida_firecrest.scheduler:FirecrestScheduler"
      },
      "aiida.transports": {
        "firecrest": "aiida_firecrest.transport:FirecrestTransport"
      },
      "console_scripts": {
        "aiida-firecrest-cli": "aiida_firecrest.cli:main"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "Chris Sewell <chrisj_sewell@hotmail.com>",
      "classifiers": [
        "Development Status :: 3 - Alpha",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: Implementation :: CPython",
        "Topic :: Software Development :: Libraries :: Python Modules"
      ],
      "description": "AiiDA Transport/Scheduler plugins for interfacing with FirecREST.",
      "version": "0.1.0a1"
    },
    "name": "aiida-firecrest",
    "package_name": "aiida_firecrest",
    "pip_url": "aiida-firecrest",
    "plugin_info": "https://raw.githubusercontent.com/aiidateam/aiida-firecrest/main/pyproject.toml"
  },
  "aiida-fireworks-scheduler": {
    "aiida_version": null,
    "code_home": "https://github.com/zhubonan/aiida-fireworks-scheduler",
    "development_status": "beta",
    "documentation_url": "https://aiida-fireworks-scheduler.readthedocs.io",
    "entry_point_prefix": "fireworks_scheduler",
    "entry_points": {
      "aiida.cmdline.data": {
        "fireworks-scheduler": "aiida_fireworks_scheduler.cmdline:fw_cli"
      },
      "aiida.schedulers": {
        "fireworks": "aiida_fireworks_scheduler.fwscheduler:FwScheduler",
        "fireworks_scheduler.default": "aiida_fireworks_scheduler.fwscheduler:FwScheduler",
        "fireworks_scheduler.keepenv": "aiida_fireworks_scheduler.fwscheduler:FwSchedulerKeepEnv"
      },
      "console_scripts": {
        "arlaunch": "aiida_fireworks_scheduler.scripts.arlaunch_run:arlaunch"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Bonan Zhu",
      "author_email": "zhubonan@outlook.com",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA plugin to allow using `fireworks` as the execution engine for `CalcJob`.",
      "version": "1.2.0"
    },
    "name": "aiida-fireworks-scheduler",
    "package_name": "aiida_fireworks_scheduler",
    "pip_url": "git+https://github.com/zhubonan/aiida-fireworks-scheduler"
  },
  "aiida-fleur": {
    "aiida_version": ">=2.0.1,<3.0.0",
    "code_home": "https://github.com/JuDFTteam/aiida-fleur/tree/develop",
    "development_status": "stable",
    "documentation_url": "https://aiida-fleur.readthedocs.io/",
    "entry_point_prefix": "fleur",
    "entry_points": {
      "aiida.calculations": {
        "fleur.fleur": "aiida_fleur.calculation.fleur:FleurCalculation",
        "fleur.inpgen": "aiida_fleur.calculation.fleurinputgen:FleurinputgenCalculation"
      },
      "aiida.data": {
        "fleur.fleurinp": "aiida_fleur.data.fleurinp:FleurinpData"
      },
      "aiida.parsers": {
        "fleur.fleurinpgenparser": "aiida_fleur.parsers.fleur_inputgen:Fleur_inputgenParser",
        "fleur.fleurparser": "aiida_fleur.parsers.fleur:FleurParser"
      },
      "aiida.workflows": {
        "fleur.banddos": "aiida_fleur.workflows.banddos:FleurBandDosWorkChain",
        "fleur.base": "aiida_fleur.workflows.base_fleur:FleurBaseWorkChain",
        "fleur.base_relax": "aiida_fleur.workflows.base_relax:FleurBaseRelaxWorkChain",
        "fleur.cfcoeff": "aiida_fleur.workflows.cfcoeff:FleurCFCoeffWorkChain",
        "fleur.corehole": "aiida_fleur.workflows.corehole:FleurCoreholeWorkChain",
        "fleur.create_magnetic": "aiida_fleur.workflows.create_magnetic_film:FleurCreateMagneticWorkChain",
        "fleur.dmi": "aiida_fleur.workflows.dmi:FleurDMIWorkChain",
        "fleur.dos": "aiida_fleur.workflows.dos:fleur_dos_wc",
        "fleur.eos": "aiida_fleur.workflows.eos:FleurEosWorkChain",
        "fleur.init_cls": "aiida_fleur.workflows.initial_cls:FleurInitialCLSWorkChain",
        "fleur.mae": "aiida_fleur.workflows.mae:FleurMaeWorkChain",
        "fleur.mae_conv": "aiida_fleur.workflows.mae_conv:FleurMaeConvWorkChain",
        "fleur.orbcontrol": "aiida_fleur.workflows.orbcontrol:FleurOrbControlWorkChain",
        "fleur.relax": "aiida_fleur.workflows.relax:FleurRelaxWorkChain",
        "fleur.relax_torque": "aiida_fleur.workflows.relax_torque:FleurRelaxTorqueWorkChain",
        "fleur.scf": "aiida_fleur.workflows.scf:FleurScfWorkChain",
        "fleur.ssdisp": "aiida_fleur.workflows.ssdisp:FleurSSDispWorkChain",
        "fleur.ssdisp_conv": "aiida_fleur.workflows.ssdisp_conv:FleurSSDispConvWorkChain",
        "fleur.strain": "aiida_fleur.workflows.strain:FleurStrainWorkChain"
      },
      "console_scripts": {
        "aiida-fleur": "aiida_fleur.cmdline:cmd_root"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "The JuDFT team <j.broeder@fz-juelich.de>",
      "classifiers": [
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for running the FLEUR code and its input generator. Also includes high-level workchains and utilities",
      "version": "2.0.0"
    },
    "name": "aiida-fleur",
    "package_name": "aiida_fleur",
    "pip_url": "aiida-fleur",
    "plugin_info": "https://raw.github.com/JuDFTteam/aiida-fleur/develop/setup.json"
  },
  "aiida-flexpart": {
    "aiida_version": ">=1.6.5,<3.0.0",
    "code_home": "https://github.com/aiidaplugins/aiida-flexpart",
    "development_status": "planning",
    "entry_point_prefix": "flexpart",
    "entry_points": {
      "aiida.calculations": {
        "flexpart.cosmo": "aiida_flexpart.calculations.cosmo:FlexpartCosmoCalculation"
      },
      "aiida.parsers": {
        "flexpart.cosmo": "aiida_flexpart.parsers.cosmo:FlexpartCosmoParser"
      },
      "aiida.workflows": {
        "flexpart.multi_dates": "aiida_flexpart.workflows.multi_dates_workflow:FlexpartMultipleDatesWorkflow"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The AiiDA Team",
      "author_email": "aliaksandr.yakutovich@empa.ch",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA plugin for the FLEXPART code (simulation of atmospheric transport processes).",
      "version": "0.1.0a0"
    },
    "name": "aiida-flexpart",
    "package_name": "aiida_flexpart",
    "pip_url": "git+https://github.com/aiidaplugins/aiida-flexpart"
  },
  "aiida-gaussian": {
    "aiida_version": ">=2.0.0,<3.0.0",
    "code_home": "https://github.com/nanotech-empa/aiida-gaussian",
    "development_status": "stable",
    "entry_point_prefix": "gaussian",
    "entry_points": {
      "aiida.calculations": {
        "gaussian": "aiida_gaussian.calculations:GaussianCalculation",
        "gaussian.cubegen": "aiida_gaussian.calculations:CubegenCalculation",
        "gaussian.formchk": "aiida_gaussian.calculations:FormchkCalculation"
      },
      "aiida.parsers": {
        "gaussian.advanced": "aiida_gaussian.parsers.gaussian:GaussianAdvancedParser",
        "gaussian.base": "aiida_gaussian.parsers.gaussian:GaussianBaseParser",
        "gaussian.cubegen_base": "aiida_gaussian.parsers.cubegen:CubegenBaseParser"
      },
      "aiida.workflows": {
        "gaussian.base": "aiida_gaussian.workchains:GaussianBaseWorkChain",
        "gaussian.cubes": "aiida_gaussian.workchains:GaussianCubesWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Kristjan Eimre, Pezhman Zarabadi-Poor, Aliaksandr Yakutovich",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Software Development :: Libraries :: Python Modules"
      ],
      "description": "AiiDA plugin for the Gaussian quantum chemistry software.",
      "license": "MIT",
      "version": "2.0.4"
    },
    "name": "aiida-gaussian",
    "package_name": "aiida_gaussian",
    "pip_url": "aiida-gaussian",
    "plugin_info": "https://raw.githubusercontent.com/nanotech-empa/aiida-gaussian/master/pyproject.toml"
  },
  "aiida-gaussian-datatypes": {
    "aiida_version": ">=1.6.2",
    "code_home": "https://github.com/dev-zero/aiida-gaussian-datatypes",
    "development_status": "beta",
    "documentation_url": "https://github.com/dev-zero/aiida-gaussian-datatypes/blob/master/README.md",
    "entry_point_prefix": "gaussian",
    "entry_points": {
      "aiida.cmdline.data": {
        "gaussian.basisset": "aiida_gaussian_datatypes.basisset.cli:cli",
        "gaussian.pseudo": "aiida_gaussian_datatypes.pseudopotential.cli:cli"
      },
      "aiida.data": {
        "gaussian.basisset": "aiida_gaussian_datatypes.basisset.data:BasisSet",
        "gaussian.pseudo": "aiida_gaussian_datatypes.pseudopotential.data:Pseudopotential"
      },
      "aiida.groups": {
        "gaussian.basisset": "aiida_gaussian_datatypes.groups:BasisSetGroup",
        "gaussian.pseudo": "aiida_gaussian_datatypes.groups:PseudopotentialGroup"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Tiziano M\u00fcller",
      "author_email": "tiziano.mueller@chem.uzh.ch",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Software Development :: Libraries :: Python Modules"
      ],
      "description": "AiiDA data plugin to manage gaussian datatypes (basis sets and pseudopotentials) as first-class citizens",
      "home_page": "https://github.com/dev-zero/aiida-gaussian-datatypes",
      "license": "MIT License",
      "version": "0.5.1"
    },
    "name": "aiida-gaussian-datatypes",
    "package_name": "aiida_gaussian_datatypes",
    "pip_url": "aiida-gaussian-datatypes",
    "plugin_info": "https://raw.github.com/dev-zero/aiida-gaussian-datatypes/master/setup.json"
  },
  "aiida-gollum": {
    "aiida_version": ">=0.12.0",
    "code_home": "https://github.com/garsua/aiida-gollum/",
    "development_status": "planning",
    "documentation_url": "https://aiida-gollum.readthedocs.io/",
    "entry_point_prefix": "gollum",
    "entry_points": {
      "aiida.calculations": {
        "gollum.gollum": "aiida_gollum.calculations.gollum:GollumCalculation"
      },
      "aiida.parsers": {
        "gollum.parser": "aiida_gollum.parsers.gollum:GollumParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Victor M. Garcia-Suarez",
      "author_email": "vm.garcia@cinn.es",
      "classifiers": [
        "License :: OSI Approved :: MIT License",
        "Framework :: AiiDA",
        "Programming Language :: Python :: 2.7",
        "Development Status :: 1 - Alpha"
      ],
      "description": "A plugin for Gollum functionality within AiiDA framework.",
      "version": "0.12.0"
    },
    "name": "aiida-gollum",
    "package_name": "aiida_gollum",
    "pip_url": "git+https://github.com/garsua/aiida-gollum"
  },
  "aiida-graphql": {
    "aiida_version": ">=1.0.0b6,<2.0.0",
    "code_home": "https://github.com/dev-zero/aiida-graphql",
    "development_status": "alpha",
    "entry_point_prefix": "graphql",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {
      "author": "Tiziano M\u00fcller",
      "author_email": "tiziano.mueller@chem.uzh.ch",
      "classifiers": [
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Software Development :: Libraries :: Python Modules"
      ],
      "description": "Strawberry-based GraphQL API Server for AiiDA",
      "home_page": "https://github.com/dev-zero/aiida-graphql",
      "license": "MIT",
      "version": "0.0.2"
    },
    "name": "aiida-graphql",
    "package_name": "aiida_graphql",
    "pip_url": "aiida-graphql"
  },
  "aiida-gromacs": {
    "aiida_version": ">=2.0,<3",
    "code_home": "https://github.com/jimboid/aiida-gromacs",
    "development_status": "alpha",
    "documentation_url": "https://aiida-gromacs.readthedocs.io/",
    "entry_point_prefix": "gromacs",
    "entry_points": {
      "aiida.calculations": {
        "general-MD": "aiida_gromacs.calculations.generalMD:GeneralCalculation",
        "gromacs.editconf": "aiida_gromacs.calculations.editconf:EditconfCalculation",
        "gromacs.genion": "aiida_gromacs.calculations.genion:GenionCalculation",
        "gromacs.grompp": "aiida_gromacs.calculations.grompp:GromppCalculation",
        "gromacs.mdrun": "aiida_gromacs.calculations.mdrun:MdrunCalculation",
        "gromacs.pdb2gmx": "aiida_gromacs.calculations.pdb2gmx:Pdb2gmxCalculation",
        "gromacs.solvate": "aiida_gromacs.calculations.solvate:SolvateCalculation"
      },
      "aiida.data": {
        "gromacs.editconf": "aiida_gromacs.data.editconf:EditconfParameters",
        "gromacs.genion": "aiida_gromacs.data.genion:GenionParameters",
        "gromacs.grompp": "aiida_gromacs.data.grompp:GromppParameters",
        "gromacs.mdrun": "aiida_gromacs.data.mdrun:MdrunParameters",
        "gromacs.pdb2gmx": "aiida_gromacs.data.pdb2gmx:Pdb2gmxParameters",
        "gromacs.solvate": "aiida_gromacs.data.solvate:SolvateParameters"
      },
      "aiida.parsers": {
        "general-MD": "aiida_gromacs.parsers.generalMD:GeneralParser",
        "gromacs.editconf": "aiida_gromacs.parsers.editconf:EditconfParser",
        "gromacs.genion": "aiida_gromacs.parsers.genion:GenionParser",
        "gromacs.grompp": "aiida_gromacs.parsers.grompp:GromppParser",
        "gromacs.mdrun": "aiida_gromacs.parsers.mdrun:MdrunParser",
        "gromacs.pdb2gmx": "aiida_gromacs.parsers.pdb2gmx:Pdb2gmxParser",
        "gromacs.solvate": "aiida_gromacs.parsers.solvate:SolvateParser"
      },
      "aiida.workflows": {
        "gromacs.setup": "aiida_gromacs.workflows.simsetup:SetupWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "James Gebbie-Rayet",
      "author_email": "james.gebbie@stfc.ac.uk",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Development Status :: 3 - Alpha",
        "Framework :: AiiDA"
      ],
      "description": "A plugin for using GROMACS with AiiDA for molecular dymanics simulations."
    },
    "name": "aiida-gromacs",
    "package_name": "aiida_gromacs",
    "pip_url": "git+https://github.com/jimboid/aiida-gromacs"
  },
  "aiida-grouppathx": {
    "aiida_version": ">=1.6.4,<3",
    "code_home": "https://github.com/zhubonan/aiida-grouppathx",
    "development_status": "beta",
    "entry_point_prefix": "grouppathx",
    "entry_points": {
      "aiida.cmdline.data": {
        "gpx": "aiida_grouppathx.cli:grouppathx_cli"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "Bonan Zhu <zhubonan@outlook.com>",
      "classifiers": [
        "Development Status :: 3 - Alpha",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin provides the GroupPathX class",
      "version": "0.2.0"
    },
    "name": "aiida-grouppathx",
    "package_name": "aiida_grouppathx",
    "pip_url": "aiida-grouppathx"
  },
  "aiida-gudhi": {
    "aiida_version": "*",
    "code_home": "https://github.com/ltalirz/aiida-gudhi",
    "development_status": "beta",
    "entry_point_prefix": "gudhi",
    "entry_points": {
      "aiida.calculations": {
        "gudhi.rdm": "aiida_gudhi.calculations.rips:RipsDistanceMatrixCalculation"
      },
      "aiida.data": {
        "gudhi.rdm": "aiida_gudhi.data.rips:RipsDistanceMatrixParameters"
      },
      "aiida.parsers": {
        "gudhi.rdm": "aiida_gudhi.parsers.rips:RipsParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Leopold Talirz",
      "author_email": "leopold.talirz@gmail.com",
      "classifiers": [
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin for the [GUDHI](http://gudhi.gforge.inria.fr/) library for topological data analysis.",
      "home_page": "https://github.com/ltalirz/aiida-gudhi",
      "license": "MIT",
      "version": "0.1.0a3"
    },
    "name": "aiida-gudhi",
    "package_name": "aiida_gudhi",
    "pip_url": "aiida-gudhi",
    "plugin_info": "https://raw.github.com/ltalirz/aiida-gudhi/master/setup.json"
  },
  "aiida-gulp": {
    "aiida_version": "1.0.0b5",
    "code_home": "https://github.com/aiidaplugins/aiida-gulp",
    "development_status": "beta",
    "documentation_url": "https://aiida-gulp.readthedocs.io",
    "entry_point_prefix": "gulp",
    "entry_points": {
      "aiida.calculations": {
        "gulp.fitting": "aiida_gulp.calculations.gulp_fitting:GulpFittingCalculation",
        "gulp.optimize": "aiida_gulp.calculations.gulp_optimize:GulpOptCalculation",
        "gulp.single": "aiida_gulp.calculations.gulp_single:GulpSingleCalculation"
      },
      "aiida.cmdline.data": {
        "gulp.potentials": "aiida_gulp.cmndline.potentials:potentials"
      },
      "aiida.data": {
        "gulp.potential": "aiida_gulp.data.potential:EmpiricalPotential",
        "gulp.symmetry": "aiida_gulp.data.symmetry:SymmetryData"
      },
      "aiida.parsers": {
        "gulp.fitting": "aiida_gulp.parsers.parse_fitting:GulpFittingParser",
        "gulp.optimize": "aiida_gulp.parsers.parse_opt:GulpOptParser",
        "gulp.single": "aiida_gulp.parsers.parse_single:GulpSingleParser"
      },
      "aiida.workflows": {},
      "console_scripts": {
        "gulp_mock": "aiida_gulp.tests.mock_gulp:main"
      },
      "gulp.potentials": {
        "lj": "aiida_gulp.potentials.lj:PotentialWriterLJ",
        "reaxff": "aiida_gulp.potentials.reaxff:PotentialWriterReaxff"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Chris Sewell",
      "author_email": "chrisj_sewell@hotmail.com",
      "classifiers": [
        "Framework :: AiiDA",
        "Programming Language :: Python",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.6",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA plugin for running the GULP MD code",
      "home_page": "https://github.com/chrisjsewell/aiida-gulp",
      "license": "MIT",
      "version": "0.10.0b5"
    },
    "name": "aiida-gulp",
    "package_name": "aiida_gulp",
    "pip_url": "aiida-gulp",
    "plugin_info": "https://raw.githubusercontent.com/aiidaplugins/aiida-gulp/master/setup.json"
  },
  "aiida-kkr": {
    "aiida_version": null,
    "code_home": "https://github.com/JuDFTteam/aiida-kkr/tree/develop",
    "development_status": "stable",
    "documentation_url": "https://aiida-kkr.readthedocs.io/",
    "entry_point_prefix": "kkr",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "Philipp Ruessmann <p.ruessmann@fz-juelich.de>, Jens Broeder <j.broeder@fz-juelich.de>, Fabian Bertoldo <f.bertoldo@fz-juelich.de>",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA plugin for the JuKKR codes",
      "version": "2.0.0"
    },
    "name": "aiida-kkr",
    "package_name": "aiida_kkr",
    "pip_url": "aiida-kkr"
  },
  "aiida-lammps": {
    "aiida_version": ">=1.4.0,<2.0.0",
    "code_home": "https://github.com/aiidaplugins/aiida-lammps",
    "development_status": "beta",
    "entry_point_prefix": "lammps",
    "entry_points": {
      "aiida.calculations": {
        "dynaphopy": "aiida_lammps.calculations.dynaphopy: DynaphopyCalculation",
        "lammps.combinate": "aiida_lammps.calculations.lammps.combinate:CombinateCalculation",
        "lammps.force": "aiida_lammps.calculations.lammps.force:ForceCalculation",
        "lammps.md": "aiida_lammps.calculations.lammps.md:MdCalculation",
        "lammps.md.multi": "aiida_lammps.calculations.lammps.md_multi:MdMultiCalculation",
        "lammps.optimize": "aiida_lammps.calculations.lammps.optimize:OptimizeCalculation"
      },
      "aiida.data": {
        "lammps.potential": "aiida_lammps.data.potential:EmpiricalPotential",
        "lammps.trajectory": "aiida_lammps.data.trajectory:LammpsTrajectory"
      },
      "aiida.parsers": {
        "dynaphopy": "aiida_lammps.parsers.dynaphopy: DynaphopyParser",
        "lammps.force": "aiida_lammps.parsers.lammps.force:ForceParser",
        "lammps.md": "aiida_lammps.parsers.lammps.md:MdParser",
        "lammps.md.multi": "aiida_lammps.parsers.lammps.md_multi:MdMultiParser",
        "lammps.optimize": "aiida_lammps.parsers.lammps.optimize:OptimizeParser"
      },
      "lammps.potentials": {
        "eam": "aiida_lammps.data.pot_plugins.eam:EAM",
        "lennard_jones": "aiida_lammps.data.pot_plugins.lennard_jones:LennardJones",
        "reaxff": "aiida_lammps.data.pot_plugins.reaxff:Reaxff",
        "tersoff": "aiida_lammps.data.pot_plugins.tersoff:Tersoff"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Abel Carreras, Chris Sewell",
      "author_email": "chrisj_sewell@hotmail.com",
      "classifiers": [
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA plugin for LAMMPS",
      "version": "0.8.0"
    },
    "name": "aiida-lammps",
    "package_name": "aiida_lammps",
    "pip_url": "git+https://github.com/aiidaplugins/aiida-lammps"
  },
  "aiida-lsmo": {
    "aiida_version": ">=1.0.0",
    "code_home": "https://github.com/lsmo-epfl/aiida-lsmo",
    "development_status": "stable",
    "entry_point_prefix": "lsmo",
    "entry_points": {
      "aiida.calculations": {
        "lsmo.calc_ch4_working_cap": "aiida_lsmo.calcfunctions:calc_ch4_working_cap",
        "lsmo.calc_h2_working_cap": "aiida_lsmo.calcfunctions:calc_h2_working_cap",
        "lsmo.calc_o2_working_cap": "aiida_lsmo.calcfunctions:calc_o2_working_cap",
        "lsmo.calc_selectivity": "aiida_lsmo.calcfunctions:calc_selectivity",
        "lsmo.ff_builder": "aiida_lsmo.calcfunctions:ff_builder"
      },
      "aiida.parsers": {
        "lsmo.cp2k_advanced_parser": "aiida_lsmo.parsers:Cp2kAdvancedParser",
        "lsmo.cp2k_bsse_parser": "aiida_lsmo.parsers:Cp2kBsseParser"
      },
      "aiida.workflows": {
        "lsmo.binding_site": "aiida_lsmo.workchains:BindingSiteWorkChain",
        "lsmo.cp2k_binding_energy": "aiida_lsmo.workchains.cp2k_binding_energy:Cp2kBindingEnergyWorkChain",
        "lsmo.cp2k_multistage": "aiida_lsmo.workchains:Cp2kMultistageWorkChain",
        "lsmo.cp2k_multistage_ddec": "aiida_lsmo.workchains:Cp2kMultistageDdecWorkChain",
        "lsmo.isotherm": "aiida_lsmo.workchains:IsothermWorkChain",
        "lsmo.isotherm_calc_pe": "aiida_lsmo.workchains:IsothermCalcPEWorkChain",
        "lsmo.isotherm_multi_temp": "aiida_lsmo.workchains:IsothermMultiTempWorkChain",
        "lsmo.nanoporous_screening_1": "aiida_lsmo.workchains:NanoporousScreening1WorkChain",
        "lsmo.sim_annealing": "aiida_lsmo.workchains.sim_annealing:SimAnnealingWorkChain",
        "lsmo.zeopp_multistage_ddec": "aiida_lsmo.workchains:ZeoppMultistageDdecWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Aliaksandr Yakutovich, Daniele Ongari, Leopold Talirz",
      "author_email": "aliaksandr.yakutovich@epfl.ch",
      "classifiers": [
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7"
      ],
      "description": "AiiDA workflows for the LSMO laboratory at EPFL",
      "version": "1.0.0"
    },
    "name": "aiida-lsmo",
    "package_name": "aiida_lsmo",
    "pip_url": "git+https://github.com/lsmo-epfl/aiida-lsmo"
  },
  "aiida-metavo-scheduler": {
    "aiida_version": ">=1.0.0,<1.6",
    "code_home": "https://github.com/pzarabadip/aiida-metavo-scheduler",
    "development_status": "stable",
    "entry_point_prefix": "metavo_scheduler",
    "entry_points": {
      "aiida.cmdline.computer.configure": {
        "sshmetavo": "aiida_metavo_scheduler.metavo.ssh_metavo:CONFIGURE_SSH_CMD"
      },
      "aiida.schedulers": {
        "pbsprometavo": "aiida_metavo_scheduler.metavo.pbspro_metavo:PbsproSchedulerMetaVO"
      },
      "aiida.transports": {
        "sshmetavo": "aiida_metavo_scheduler.metavo.ssh_metavo:SshTransport"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Pezhman Zarabadi-Poor",
      "author_email": "pzarabadip@gmail.com",
      "classifiers": [
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering"
      ],
      "description": "",
      "version": "1.0.0"
    },
    "name": "aiida-metavo-scheduler",
    "package_name": "aiida_metavo_scheduler",
    "pip_url": "git+https://github.com/pzarabadip/aiida-metavo-scheduler"
  },
  "aiida-mpds": {
    "aiida_version": ">=1.0.1",
    "code_home": "https://github.com/mpds-io/mpds-aiida",
    "development_status": "beta",
    "documentation_url": "https://github.com/mpds-io/mpds-aiida",
    "entry_point_prefix": "mpds",
    "entry_points": {
      "aiida.workflows": {
        "crystal.aiida": "mpds_aiida.workflows.aiida:AiidaStructureWorkchain",
        "crystal.cif": "mpds_aiida.workflows.cif:CIFStructureWorkchain",
        "crystal.mpds": "mpds_aiida.workflows.mpds:MPDSStructureWorkchain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Andrey Sobolev",
      "author_email": "as@tilde.pro",
      "classifiers": [
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Scientific/Engineering :: Information Analysis",
        "Framework :: AiiDA"
      ],
      "description": "Aiida workflows for MPDS based on CRYSTAL",
      "version": ""
    },
    "name": "aiida-mpds",
    "package_name": "aiida_mpds",
    "pip_url": "git+https://github.com/mpds-io/mpds-aiida"
  },
  "aiida-muon": {
    "aiida_version": ">=2.0,<3",
    "code_home": "https://github.com/positivemuon/aiida-muon",
    "development_status": "pre-alpha",
    "entry_point_prefix": "muon",
    "entry_points": {
      "aiida.workflows": {
        "muon.find_muon": "aiida_muon.workflows.find_muon:FindMuonWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Muon  group Parma",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Development Status :: 2 - Pre-Alpha",
        "Framework :: AiiDA"
      ],
      "description": "aiida-muon is allows to find candiate muon implantation sites and hyperfine field by DFT supercell relaxations and from further symmetry and kinetics analysis.  "
    },
    "name": "aiida-muon",
    "package_name": "aiida_muon",
    "pip_url": "git+https://github.com/positivemuon/aiida-muon",
    "version_file": "https://github.com/positivemuon/aiida-muon/blob/main/aiida_muon/__init__.py"
  },
  "aiida-musconv": {
    "aiida_version": ">=2.0,<3",
    "code_home": "https://github.com/positivemuon/aiida-musconv",
    "development_status": "pre-alpha",
    "entry_point_prefix": "musconv",
    "entry_points": {
      "aiida.workflows": {
        "musconv": "aiida_musconv.workflows.musconv:MusconvWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Muon  group Parma",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Development Status :: 2 - Pre-Alpha",
        "Framework :: AiiDA"
      ],
      "description": "aiida-musconv is a plugin that allows to obtain converged supercell size for an interstitial impurity calculation."
    },
    "name": "aiida-musconv",
    "package_name": "aiida_musconv",
    "pip_url": "git+https://github.com/positivemuon/aiida-musconv",
    "version_file": "https://github.com/positivemuon/aiida-musconv/blob/main/aiida_musconv/__init__.py"
  },
  "aiida-nanotech-empa": {
    "aiida_version": null,
    "code_home": "https://github.com/nanotech-empa/aiida-nanotech-empa",
    "development_status": "beta",
    "entry_point_prefix": "nanotech_empa",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-nanotech-empa",
    "package_name": "aiida_nanotech_empa",
    "pip_url": "git+https://github.com/nanotech-empa/aiida-nanotech-empa"
  },
  "aiida-nims-scheduler": {
    "aiida_version": null,
    "code_home": "https://github.com/atztogo/aiida-nims-scheduler",
    "development_status": "stable",
    "documentation_url": "https://github.com/atztogo/aiida-nims-scheduler",
    "entry_point_prefix": "nims_scheduler",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-nims-scheduler",
    "package_name": "aiida_nims_scheduler",
    "pip_url": "git+https://github.com/atztogo/aiida-nims-scheduler"
  },
  "aiida-nwchem": {
    "aiida_version": ">=2.0,<3.0",
    "code_home": "https://github.com/aiidateam/aiida-nwchem",
    "development_status": "beta",
    "documentation_url": "https://aiida-nwchem.readthedocs.io/",
    "entry_point_prefix": "nwchem",
    "entry_points": {
      "aiida.calculations": {
        "nwchem.base": "aiida_nwchem.calculations.nwchem:NwchemBaseCalculation",
        "nwchem.nwchem": "aiida_nwchem.calculations.nwchem:NwchemCalculation"
      },
      "aiida.parsers": {
        "nwchem.nwchem": "aiida_nwchem.parsers.nwchem:NwchemBaseParser"
      },
      "aiida.workflows": {
        "nwchem.base": "aiida_nwchem.workflows.base:NwchemBaseWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "The AiiDA team <developers@aiida.net>",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering"
      ],
      "description": "The official AiiDA plugin for NWChem",
      "version": "3.0.0"
    },
    "name": "aiida-nwchem",
    "package_name": "aiida_nwchem",
    "pip_url": "aiida-nwchem",
    "plugin_info": "https://raw.githubusercontent.com/aiidateam/aiida-nwchem/master/setup.json"
  },
  "aiida-open_circuit_voltage": {
    "aiida_version": ">=1.1.0,<2.0.0",
    "code_home": "https://github.com/tsthakur/aiida-open_circuit_voltage",
    "development_status": "alpha",
    "entry_point_prefix": "quantumespresso.ocv",
    "entry_points": {
      "aiida.workflows": {
        "quantumespresso.ocv.ocvwc": "aiida_open_circuit_voltage.workflows.workchain:OCVWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Tushar Thakur",
      "author_email": "tushar.thakur@epfl.ch",
      "classifiers": [
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python",
        "Development Status :: 3 - Alpha",
        "Natural Language :: English",
        "Intended Audience :: Science/Research"
      ],
      "description": "The AiiDA plugin to calculate ocv at various charge of states using QE",
      "version": "0.1.0"
    },
    "name": "aiida-open_circuit_voltage",
    "package_name": "aiida_open_circuit_voltage"
  },
  "aiida-optimize": {
    "aiida_version": ">=2.0.0,<3.0.0",
    "code_home": "https://github.com/greschd/aiida-optimize",
    "development_status": "stable",
    "documentation_url": "https://aiida-optimize.readthedocs.io",
    "entry_point_prefix": "optimize",
    "entry_points": {
      "aiida.workflows": {
        "optimize.optimize": "aiida_optimize._optimization_workchain:OptimizationWorkChain",
        "optimize.wrappers.add_inputs": "aiida_optimize.wrappers._add_inputs:AddInputsWorkChain",
        "optimize.wrappers.concatenate": "aiida_optimize.wrappers._concatenate:ConcatenateWorkChain",
        "optimize.wrappers.create_evaluate": "aiida_optimize.wrappers._create_evaluate:CreateEvaluateWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Dominik Gresch",
      "author_email": "greschd@gmx.ch",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: Apache Software License",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for running optimization algorithms.",
      "home_page": "https://aiida-optimize.readthedocs.io/",
      "license": "Apache 2.0",
      "version": "1.0.2"
    },
    "name": "aiida-optimize",
    "package_name": "aiida_optimize",
    "pip_url": "aiida-optimize",
    "plugin_info": "https://raw.githubusercontent.com/greschd/aiida-optimize/master/setup.json"
  },
  "aiida-orca": {
    "aiida_version": ">=1.0.0,<2.0.0",
    "code_home": "https://github.com/pzarabadip/aiida-orca",
    "development_status": "stable",
    "documentation_url": "https://aiida-orca.readthedocs.io/",
    "entry_point_prefix": "orca",
    "entry_points": {
      "aiida.calculations": {
        "orca_asa": "aiida_orca.calculations:OrcaAsaCalculation",
        "orca_main": "aiida_orca.calculations:OrcaCalculation"
      },
      "aiida.parsers": {
        "orca_base_parser": "aiida_orca.parsers:OrcaBaseParser"
      },
      "aiida.workflows": {
        "orca.base": "aiida_orca.workchains:OrcaBaseWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Pezhman Zarabadi-Poor",
      "author_email": "pzarabadip@gmail.com",
      "classifiers": [
        "Environment :: Plugins",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA plugin for ORCA code",
      "version": "0.5.1"
    },
    "name": "aiida-orca",
    "package_name": "aiida_orca",
    "pip_url": "git+https://github.com/pzarabadip/aiida-orca"
  },
  "aiida-phonopy": {
    "aiida_version": ">=2.0.0,<3.0.0",
    "code_home": "https://github.com/aiida-phonopy/aiida-phonopy",
    "development_status": "stable",
    "documentation_url": "https://aiida-phonopy.readthedocs.io/",
    "entry_point_prefix": "phonopy",
    "entry_points": {
      "aiida.calculations": {
        "phonopy.phonopy": "aiida_phonopy.calculations.phonopy:PhonopyCalculation"
      },
      "aiida.data": {
        "phonopy.force_constants": "aiida_phonopy.data.force_constants:ForceConstantsData",
        "phonopy.phonopy": "aiida_phonopy.data.phonopy:PhonopyData",
        "phonopy.preprocess": "aiida_phonopy.data.preprocess:PreProcessData",
        "phonopy.raw": "aiida_phonopy.data.raw:RawData"
      },
      "aiida.parsers": {
        "phonopy.phonopy": "aiida_phonopy.parsers.phonopy:PhonopyParser"
      },
      "aiida.workflows": {
        "phonopy.phonopy": "aiida_phonopy.workflows.phonopy:PhonopyWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "Lorenzo Bastonero <bastonero.lorenzo@gmail.com>",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "The official AiiDA plugin for Phonopy",
      "version": "1.1.3"
    },
    "name": "aiida-phonopy",
    "package_name": "aiida_phonopy",
    "pip_url": "aiida-phonopy",
    "plugin_info": "https://raw.githubusercontent.com/aiida-phonopy/aiida-phonopy/master/setup.json"
  },
  "aiida-phtools": {
    "aiida_version": "*",
    "code_home": "https://github.com/ltalirz/aiida-phtools",
    "development_status": "planning",
    "entry_point_prefix": "phtools",
    "entry_points": {
      "aiida.calculations": {
        "phtools.dmatrix": "aiida_phtools.calculations.distance_matrix:DistanceMatrixCalculation",
        "phtools.surface": "aiida_phtools.calculations.pore_surface:PoreSurfaceCalculation"
      },
      "aiida.data": {
        "phtools.surface": "aiida_phtools.data.pore_surface:PoreSurfaceParameters"
      },
      "aiida.parsers": {
        "phtools.dmatrix": "aiida_phtools.parsers.distance_matrix:DistanceMatrixParser",
        "phtools.surface": "aiida_phtools.parsers.pore_surface:PoreSurfaceParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Leopold Talirz",
      "author_email": "leopold.talirz@gmail.com",
      "classifiers": [
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin for persistence homology tools, used to analyze nanoporous materials.",
      "home_page": "https://github.com/ltalirz/aiida-phtools",
      "license": "MIT",
      "version": "0.1.0a1"
    },
    "name": "aiida-phtools",
    "package_name": "aiida_phtools",
    "pip_url": "aiida-phtools",
    "plugin_info": "https://raw.github.com/ltalirz/aiida-phtools/master/setup.json"
  },
  "aiida-plumed": {
    "aiida_version": ">=1.0.0b3,<2.0.0",
    "code_home": "https://github.com/ConradJohnston/aiida-plumed",
    "development_status": "pre-alpha",
    "entry_point_prefix": "plumed",
    "entry_points": {
      "aiida.calculations": {
        "plumed": "aiida_plumed.calculations:DiffCalculation"
      },
      "aiida.cmdline.data": {
        "plumed": "aiida_plumed.cli:data_cli"
      },
      "aiida.data": {
        "plumed": "aiida_plumed.data:DiffParameters"
      },
      "aiida.parsers": {
        "plumed": "aiida_plumed.parsers:DiffParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Conrad Johnston",
      "author_email": "conrad.s.johnston@googlemail.com",
      "classifiers": [
        "Development Status :: 2 - Pre-Alpha",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin providing support for Plumed2",
      "home_page": "https://github.com/ConradJohnston/aiida-plumed",
      "license": "MIT",
      "version": "0.1.0a0"
    },
    "name": "aiida-plumed",
    "package_name": "aiida_plumed",
    "pip_url": "aiida-plumed",
    "plugin_info": "https://raw.github.com/ConradJohnston/aiida-plumed/AiiDA-v1.0-compatibility/setup.json"
  },
  "aiida-porousmaterials": {
    "aiida_version": null,
    "code_home": "https://github.com/pzarabadip/aiida-porousmaterials",
    "development_status": "stable",
    "entry_point_prefix": "porousmaterials",
    "entry_points": {
      "aiida.calculations": {
        "porousmaterials": "aiida_porousmaterials.calculations:PorousMaterialsCalculation"
      },
      "aiida.parsers": {
        "porousmaterials": "aiida_porousmaterials.parser:PorousMaterialsParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Pezhman Zarabadi-Poor",
      "author_email": "pzarabadip@gmail.com",
      "classifiers": [
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8"
      ],
      "description": "AiiDA plugin for PorousMaterials code",
      "home_page": "https://github.com/pzarabadip/aiida-porousmaterials",
      "license": "MIT",
      "version": "1.0.0a3"
    },
    "name": "aiida-porousmaterials",
    "package_name": "aiida_porousmaterials",
    "pip_url": "aiida-porousmaterials"
  },
  "aiida-pseudo": {
    "aiida_version": ">=2.1,<3.0",
    "code_home": "https://github.com/aiidateam/aiida-pseudo",
    "development_status": "stable",
    "entry_point_prefix": "pseudo",
    "entry_points": {
      "aiida.data": {
        "pseudo": "aiida_pseudo.data.pseudo.pseudo:PseudoPotentialData",
        "pseudo.jthxml": "aiida_pseudo.data.pseudo.jthxml:JthXmlData",
        "pseudo.psf": "aiida_pseudo.data.pseudo.psf:PsfData",
        "pseudo.psml": "aiida_pseudo.data.pseudo.psml:PsmlData",
        "pseudo.psp8": "aiida_pseudo.data.pseudo.psp8:Psp8Data",
        "pseudo.upf": "aiida_pseudo.data.pseudo.upf:UpfData",
        "pseudo.vps": "aiida_pseudo.data.pseudo.vps:VpsData"
      },
      "aiida.groups": {
        "pseudo.family": "aiida_pseudo.groups.family.pseudo:PseudoPotentialFamily",
        "pseudo.family.cutoffs": "aiida_pseudo.groups.family.cutoffs:CutoffsPseudoPotentialFamily",
        "pseudo.family.pseudo_dojo": "aiida_pseudo.groups.family.pseudo_dojo:PseudoDojoFamily",
        "pseudo.family.sssp": "aiida_pseudo.groups.family.sssp:SsspFamily"
      },
      "console_scripts": {
        "aiida-pseudo": "aiida_pseudo.cli:cmd_root"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "\"Sebastiaan P. Huber\" <mail@sphuber.net>",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "AiiDA plugin that simplifies working with pseudo potentials.",
      "version": "1.1.0"
    },
    "name": "aiida-pseudo",
    "package_name": "aiida_pseudo",
    "pip_url": "aiida-pseudo",
    "plugin_info": "https://raw.github.com/aiidateam/aiida-pseudo/master/setup.cfg"
  },
  "aiida-psi4": {
    "aiida_version": ">=1.6.4,<2.0.0",
    "code_home": "https://github.com/ltalirz/aiida-psi4/tree/master",
    "development_status": "beta",
    "entry_point_prefix": "psi4",
    "entry_points": {
      "aiida.calculations": {
        "psi4": "aiida_psi4.calculations:Psi4Calculation"
      },
      "aiida.data": {
        "psi4.atomic_input": "aiida_psi4.data:AtomicInput"
      },
      "aiida.parsers": {
        "psi4": "aiida_psi4.parsers:QCSchemaParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Leopold Talirz",
      "author_email": "leopold.talirz@gmail.com",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA plugin for the Psi4 Quantum Chemistry package.",
      "version": "0.1.0a0"
    },
    "name": "aiida-psi4",
    "package_name": "aiida_psi4",
    "pip_url": "git+https://github.com/ltalirz/aiida-psi4"
  },
  "aiida-pyscf": {
    "aiida_version": ">=2.3,<3.0",
    "code_home": "https://github.com/microsoft/aiida-pyscf",
    "development_status": "alpha",
    "entry_point_prefix": "pyscf",
    "entry_points": {
      "aiida.calculations": {
        "pyscf.base": "aiida_pyscf.calculations.base:PyscfCalculation"
      },
      "aiida.parsers": {
        "pyscf.base": "aiida_pyscf.parsers.base:PyscfParser"
      },
      "aiida.workflows": {
        "pyscf.base": "aiida_pyscf.workflows.base:PyscfBaseWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "\"Sebastiaan P. Huber\" <mail@sphuber.net>, Adam Grofe <v-adamgrofe@microsoft.com>",
      "classifiers": [
        "Development Status :: 3 - Alpha",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering"
      ],
      "description": "AiiDA plugin for the Python-based Simulations of Chemistry Framework (PySCF).",
      "version": "0.4.0"
    },
    "name": "aiida-pyscf",
    "package_name": "aiida_pyscf",
    "pip_url": "aiida-pyscf",
    "plugin_info": "https://github.com/microsoft/aiida-pyscf/blob/main/pyproject.toml"
  },
  "aiida-python": {
    "aiida_version": null,
    "code_home": "https://github.com/addman2/aiida-python",
    "development_status": "planning",
    "entry_point_prefix": "aiidapython",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-python",
    "package_name": "aiida_python"
  },
  "aiida-qeq": {
    "aiida_version": ">=0.12.2,<1.0.0",
    "code_home": "https://github.com/ltalirz/aiida-qeq",
    "development_status": "stable",
    "entry_point_prefix": "qeq",
    "entry_points": {
      "aiida.calculations": {
        "qeq.eqeq": "aiida_qeq.calculations.eqeq:EQeqCalculation",
        "qeq.qeq": "aiida_qeq.calculations.qeq:QeqCalculation"
      },
      "aiida.data": {
        "qeq.eqeq": "aiida_qeq.data.eqeq:EQeqParameters",
        "qeq.qeq": "aiida_qeq.data.qeq:QeqParameters"
      },
      "aiida.parsers": {
        "qeq.eqeq": "aiida_qeq.parsers.eqeq:EQeqParser",
        "qeq.qeq": "aiida_qeq.parsers.qeq:QeqParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Leopold Talirz, Daniele Ongari",
      "author_email": "leopold.talirz@gmail.com",
      "classifiers": [
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin for computing electronic charges on atoms using equilibration-type models (QEq, EQEq, ...).",
      "home_page": "https://github.com/ltalirz/aiida-qeq",
      "license": "MIT",
      "version": "0.1.0"
    },
    "name": "aiida-qeq",
    "package_name": "aiida_qeq",
    "pip_url": "aiida-qeq",
    "plugin_info": "https://raw.githubusercontent.com/ltalirz/aiida-qeq/master/setup.json"
  },
  "aiida-qp2": {
    "aiida_version": null,
    "code_home": "https://github.com/TREX-CoE/aiida-qp2",
    "development_status": "beta",
    "documentation_url": "https://trex-coe.github.io/aiida-qp2/index.html",
    "entry_point_prefix": "qp2",
    "entry_points": {
      "aiida.calculations": {
        "qp2": "aiida_qp2.calculations:QP2Calculation"
      },
      "aiida.parsers": {
        "qp2": "aiida_qp2.parsers:QP2Parser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Evgeny Posenitskiy",
      "author_email": "posenitskiy@irsamc.ups-tlse.fr",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin for the Quantum Package 2.0",
      "home_page": "https://github.com/TREX-CoE/aiida-qp2",
      "license": "MIT",
      "version": "0.2.0"
    },
    "name": "aiida-qp2",
    "package_name": "aiida_qp2",
    "pip_url": "aiida-qp2"
  },
  "aiida-quantumespresso": {
    "aiida_version": ">=2.3,<3.0",
    "code_home": "https://github.com/aiidateam/aiida-quantumespresso",
    "development_status": "stable",
    "documentation_url": "https://aiida-quantumespresso.readthedocs.io/",
    "entry_point_prefix": "quantumespresso",
    "entry_points": {
      "aiida.calculations": {
        "quantumespresso.cp": "aiida_quantumespresso.calculations.cp:CpCalculation",
        "quantumespresso.create_kpoints_from_distance": "aiida_quantumespresso.calculations.functions.create_kpoints_from_distance:create_kpoints_from_distance",
        "quantumespresso.dos": "aiida_quantumespresso.calculations.dos:DosCalculation",
        "quantumespresso.epw": "aiida_quantumespresso.calculations.epw:EpwCalculation",
        "quantumespresso.matdyn": "aiida_quantumespresso.calculations.matdyn:MatdynCalculation",
        "quantumespresso.merge_ph_outputs": "aiida_quantumespresso.calculations.functions.merge_ph_outputs:merge_ph_outputs",
        "quantumespresso.namelists": "aiida_quantumespresso.calculations.namelists:NamelistsCalculation",
        "quantumespresso.neb": "aiida_quantumespresso.calculations.neb:NebCalculation",
        "quantumespresso.open_grid": "aiida_quantumespresso.calculations.open_grid:OpenGridCalculation",
        "quantumespresso.ph": "aiida_quantumespresso.calculations.ph:PhCalculation",
        "quantumespresso.pp": "aiida_quantumespresso.calculations.pp:PpCalculation",
        "quantumespresso.projwfc": "aiida_quantumespresso.calculations.projwfc:ProjwfcCalculation",
        "quantumespresso.pw": "aiida_quantumespresso.calculations.pw:PwCalculation",
        "quantumespresso.pw2gw": "aiida_quantumespresso.calculations.pw2gw:Pw2gwCalculation",
        "quantumespresso.pw2wannier90": "aiida_quantumespresso.calculations.pw2wannier90:Pw2wannier90Calculation",
        "quantumespresso.pwimmigrant": "aiida_quantumespresso.calculations.pwimmigrant:PwimmigrantCalculation",
        "quantumespresso.q2r": "aiida_quantumespresso.calculations.q2r:Q2rCalculation",
        "quantumespresso.seekpath_structure_analysis": "aiida_quantumespresso.calculations.functions.seekpath_structure_analysis:seekpath_structure_analysis",
        "quantumespresso.xspectra": "aiida_quantumespresso.calculations.xspectra:XspectraCalculation"
      },
      "aiida.data": {
        "quantumespresso.force_constants": "aiida_quantumespresso.data.force_constants:ForceConstantsData",
        "quantumespresso.hubbard_structure": "aiida_quantumespresso.data.hubbard_structure:HubbardStructureData"
      },
      "aiida.parsers": {
        "quantumespresso.cp": "aiida_quantumespresso.parsers.cp:CpParser",
        "quantumespresso.dos": "aiida_quantumespresso.parsers.dos:DosParser",
        "quantumespresso.matdyn": "aiida_quantumespresso.parsers.matdyn:MatdynParser",
        "quantumespresso.neb": "aiida_quantumespresso.parsers.neb:NebParser",
        "quantumespresso.open_grid": "aiida_quantumespresso.parsers.open_grid:OpenGridParser",
        "quantumespresso.ph": "aiida_quantumespresso.parsers.ph:PhParser",
        "quantumespresso.pp": "aiida_quantumespresso.parsers.pp:PpParser",
        "quantumespresso.projwfc": "aiida_quantumespresso.parsers.projwfc:ProjwfcParser",
        "quantumespresso.pw": "aiida_quantumespresso.parsers.pw:PwParser",
        "quantumespresso.pw2gw": "aiida_quantumespresso.parsers.pw2gw:Pw2gwParser",
        "quantumespresso.pw2wannier90": "aiida_quantumespresso.parsers.pw2wannier90:Pw2wannier90Parser",
        "quantumespresso.q2r": "aiida_quantumespresso.parsers.q2r:Q2rParser",
        "quantumespresso.xspectra": "aiida_quantumespresso.parsers.xspectra:XspectraParser"
      },
      "aiida.tools.calculations": {
        "quantumespresso.pw": "aiida_quantumespresso.tools.calculations.pw:PwCalculationTools"
      },
      "aiida.tools.data.orbitals": {
        "noncollinearhydrogen": "aiida_quantumespresso.tools.data.orbital.noncollinearhydrogen:NoncollinearHydrogenOrbital",
        "spinorbithydrogen": "aiida_quantumespresso.tools.data.orbital.spinorbithydrogen:SpinorbitHydrogenOrbital"
      },
      "aiida.workflows": {
        "quantumespresso.matdyn.base": "aiida_quantumespresso.workflows.matdyn.base:MatdynBaseWorkChain",
        "quantumespresso.pdos": "aiida_quantumespresso.workflows.pdos:PdosWorkChain",
        "quantumespresso.ph.base": "aiida_quantumespresso.workflows.ph.base:PhBaseWorkChain",
        "quantumespresso.pw.bands": "aiida_quantumespresso.workflows.pw.bands:PwBandsWorkChain",
        "quantumespresso.pw.base": "aiida_quantumespresso.workflows.pw.base:PwBaseWorkChain",
        "quantumespresso.pw.relax": "aiida_quantumespresso.workflows.pw.relax:PwRelaxWorkChain",
        "quantumespresso.q2r.base": "aiida_quantumespresso.workflows.q2r.base:Q2rBaseWorkChain",
        "quantumespresso.xps": "aiida_quantumespresso.workflows.xps:XpsWorkChain",
        "quantumespresso.xspectra.base": "aiida_quantumespresso.workflows.xspectra.base:XspectraBaseWorkChain",
        "quantumespresso.xspectra.core": "aiida_quantumespresso.workflows.xspectra.core:XspectraCoreWorkChain",
        "quantumespresso.xspectra.crystal": "aiida_quantumespresso.workflows.xspectra.crystal:XspectraCrystalWorkChain"
      },
      "console_scripts": {
        "aiida-quantumespresso": "aiida_quantumespresso.cli:cmd_root"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "The AiiDA team <developers@aiida.net>",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "The official AiiDA plugin for Quantum ESPRESSO",
      "version": "4.3.0"
    },
    "name": "aiida-quantumespresso",
    "package_name": "aiida_quantumespresso",
    "pip_url": "aiida-quantumespresso",
    "plugin_info": "https://raw.github.com/aiidateam/aiida-quantumespresso/master/setup.json"
  },
  "aiida-quantumespresso-hp": {
    "aiida_version": ">=1.0.0b6,<2.0",
    "code_home": "https://github.com/sphuber/aiida-quantumespresso-hp",
    "development_status": "beta",
    "entry_point_prefix": "quantumespresso.hp",
    "entry_points": {
      "aiida.calculations": {
        "quantumespresso.hp": "aiida_quantumespresso_hp.calculations.hp:HpCalculation"
      },
      "aiida.parsers": {
        "quantumespresso.hp": "aiida_quantumespresso_hp.parsers.hp:HpParser"
      },
      "aiida.workflows": {
        "quantumespresso.hp.base": "aiida_quantumespresso_hp.workflows.hp.base:HpBaseWorkChain",
        "quantumespresso.hp.hubbard": "aiida_quantumespresso_hp.workflows.hubbard:SelfConsistentHubbardWorkChain",
        "quantumespresso.hp.main": "aiida_quantumespresso_hp.workflows.hp.main:HpWorkChain",
        "quantumespresso.hp.parallelize_atoms": "aiida_quantumespresso_hp.workflows.hp.parallelize_atoms:HpParallelizeAtomsWorkChain"
      },
      "console_scripts": {
        "launch_calculation_hp": "aiida_quantumespresso_hp.cli.calculations.hp:launch",
        "launch_workflow_hp_base": "aiida_quantumespresso_hp.cli.workflows.hp.base:launch",
        "launch_workflow_hp_hubbard": "aiida_quantumespresso_hp.cli.workflows.hubbard:launch",
        "launch_workflow_hp_main": "aiida_quantumespresso_hp.cli.workflows.hp.main:launch"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Sebastiaan P. Huber",
      "author_email": "mail@sphuber.net",
      "classifiers": [
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 2.7",
        "Development Status :: 4 - Beta"
      ],
      "description": "The AiiDA plugin for the Hubbard module of Quantum ESPRESSO",
      "version": "0.1.0"
    },
    "name": "aiida-quantumespresso-hp",
    "package_name": "aiida_quantumespresso_hp",
    "pip_url": "git+https://github.com/sphuber/aiida-quantumespresso-hp"
  },
  "aiida-raspa": {
    "aiida_version": null,
    "code_home": "https://github.com/yakutovicha/aiida-raspa",
    "development_status": "stable",
    "entry_point_prefix": "raspa",
    "entry_points": {
      "aiida.calculations": {
        "raspa": "aiida_raspa.calculations:RaspaCalculation"
      },
      "aiida.parsers": {
        "raspa": "aiida_raspa.parsers:RaspaParser"
      },
      "aiida.workflows": {
        "raspa.base": "aiida_raspa.workchains:RaspaBaseWorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Aliaksandr Yakutovich",
      "author_email": "aliaksandr.yakutovich@epfl.ch",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3"
      ],
      "description": "AiiDA plugin for RASPA code",
      "home_page": "https://github.com/yakutovicha/aiida-raspa",
      "license": "MIT License",
      "version": "1.2.0"
    },
    "name": "aiida-raspa",
    "package_name": "aiida_raspa",
    "pip_url": "aiida-raspa"
  },
  "aiida-shell": {
    "aiida_version": ">=2.1,<3.0",
    "code_home": "https://github.com/sphuber/aiida-shell",
    "development_status": "alpha",
    "entry_point_prefix": "core",
    "entry_points": {
      "aiida.calculations": {
        "core.shell": "aiida_shell.calculations.shell:ShellJob"
      },
      "aiida.data": {
        "core.code.installed.shell": "aiida_shell.data.code:ShellCode",
        "core.pickled": "aiida_shell.data.pickled:PickledData"
      },
      "aiida.parsers": {
        "core.shell": "aiida_shell.parsers.shell:ShellParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "\"Sebastiaan P. Huber\" <mail@sphuber.net>",
      "classifiers": [
        "Development Status :: 3 - Alpha",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering"
      ],
      "description": "AiiDA plugin that makes running shell commands easy.",
      "version": "0.5.3"
    },
    "name": "aiida-shell",
    "package_name": "aiida_shell",
    "pip_url": "aiida-shell",
    "plugin_info": "https://raw.github.com/sphuber/aiida-shell/master/pyproject.toml"
  },
  "aiida-siesta": {
    "aiida_version": ">=2.0.0,<3.0.0",
    "code_home": "https://github.com/siesta-project/aiida_siesta_plugin/tree/master",
    "development_status": "stable",
    "documentation_url": "https://aiida-siesta-plugin.readthedocs.io/",
    "entry_point_prefix": "siesta",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {
      "author_email": "Albero Garcia <albertog@icmab.es>, \"Victor M. Garcia-Suarez\" <garciavictor@uniovi.es>, Emanuele Bosoni <ebosoni@icmab.es>, Vladimir Dikan <vdikan@icmab.es>, Pol Febrer <pol.febrer@icn2.cat>",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "A plugin for Siesta's basic functionality within the AiiDA framework.",
      "version": "2.0.0"
    },
    "name": "aiida-siesta",
    "package_name": "aiida_siesta",
    "pip_url": "aiida-siesta"
  },
  "aiida-spex": {
    "aiida_version": ">=1.0.0b3,<3.0.0",
    "code_home": "https://github.com/JuDFTteam/aiida-spex",
    "development_status": "planning",
    "entry_point_prefix": "spex",
    "entry_points": {
      "aiida.calculations": {
        "spex.spex": "aiida_spex.calculations.spex:SpexCalculation"
      },
      "aiida.data": {
        "spex.spexinp": "aiida_spex.data.spexinp:SpexinpData"
      },
      "aiida.parsers": {
        "spex.spexparser": "aiida_spex.parsers.spex:SpexParser"
      },
      "aiida.workflows": {
        "spex.job": "aiida_spex.workflows.job:SpexJobWorkchain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The SPEX Team",
      "author_email": "a.chandran@fz-juelich.de",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "AiiDA plugin for SPEX code",
      "version": "1.1.2"
    },
    "name": "aiida-spex",
    "package_name": "aiida_spex",
    "pip_url": "git+https://github.com/JuDFTteam/aiida-spex"
  },
  "aiida-spirit": {
    "aiida_version": null,
    "code_home": "https://github.com/JuDFTteam/aiida-spirit/tree/main",
    "development_status": "planning",
    "documentation_url": "https://aiida-spirit.readthedocs.io/",
    "entry_point_prefix": "spirit",
    "entry_points": {
      "aiida.calculations": {
        "spirit": "aiida_spirit.calculations:SpiritCalculation"
      },
      "aiida.parsers": {
        "spirit": "aiida_spirit.parsers:SpiritParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The JuDFT Team",
      "author_email": "p.ruessmann@fz-juelich.de",
      "classifiers": [
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin for the spirit code",
      "home_page": "https://github.com/JuDFTteam/aiida-spirit",
      "license": "MIT",
      "version": "0.2.1"
    },
    "name": "aiida-spirit",
    "package_name": "aiida_spirit",
    "pip_url": "aiida-spirit"
  },
  "aiida-sshonly": {
    "aiida_version": ">=1.3.0,<2.0.0",
    "code_home": "https://github.com/adegomme/aiida-sshonly",
    "development_status": "beta",
    "entry_point_prefix": "sshonly",
    "entry_points": {
      "aiida.transports": {
        "ssh_only": "aiida_sshonly.transports.sshonly:SshOnlyTransport"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "adegomme",
      "classifiers": [
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin adding a sshonly transport option, using only SSH to transfer files, avoiding SFTP, in case it's blocked or non functional on a remote system",
      "home_page": "https://github.com/adegomme/aiida-sshonly",
      "license": "MIT",
      "version": "0.1.0a3"
    },
    "name": "aiida-sshonly",
    "package_name": "aiida_sshonly",
    "pip_url": "aiida-sshonly",
    "plugin_info": "https://raw.github.com/adegomme/aiida-sshonly/master/setup.json"
  },
  "aiida-statefile-schedulers": {
    "aiida_version": null,
    "code_home": "https://github.com/dev-zero/aiida-statefile-schedulers",
    "development_status": "beta",
    "entry_point_prefix": "statefile_schedulers",
    "entry_points": {
      "aiida.schedulers": {
        "statefile_schedulers.direct": "aiida_statefile_schedulers.schedulers.direct:StatefileDirectScheduler"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Tiziano M\u00fcller",
      "author_email": "tm@dev-zero.ch",
      "classifiers": [
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "Simple statefile-driven task schedulers for AiiDA",
      "home_page": "https://github.com/dev-zero/aiida-statefile-schedulers",
      "license": "MIT",
      "version": "0.2.1"
    },
    "name": "aiida-statefile-schedulers",
    "package_name": "aiida_statefile_schedulers",
    "pip_url": "aiida-statefile-schedulers"
  },
  "aiida-strain": {
    "aiida_version": null,
    "code_home": "https://github.com/greschd/aiida-strain",
    "development_status": "alpha",
    "documentation_url": "https://aiida-strain.readthedocs.io",
    "entry_point_prefix": "strain",
    "entry_points": {
      "aiida.workflows": {
        "strain.apply_strains": "aiida_strain:ApplyStrains",
        "strain.apply_strains_with_symmetry": "aiida_strain:ApplyStrainsWithSymmetry"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Dominik Gresch",
      "author_email": "greschd@gmx.ch",
      "classifiers": [
        "Development Status :: 3 - Alpha",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: Apache Software License",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for applying strain to structures",
      "home_page": "https://aiida-strain.readthedocs.io",
      "license": "Apache 2.0",
      "version": "0.2.0"
    },
    "name": "aiida-strain",
    "package_name": "aiida_strain",
    "pip_url": "aiida-strain"
  },
  "aiida-supercell": {
    "aiida_version": ">=1.0.0,<2.0",
    "code_home": "https://github.com/pzarabadip/aiida-supercell",
    "development_status": "stable",
    "documentation_url": "https://aiida-supercell.readthedocs.io/",
    "entry_point_prefix": "supercell",
    "entry_points": {
      "aiida.calculations": {
        "supercell": "aiida_supercell.calculations:SupercellCalculation"
      },
      "aiida.parsers": {
        "supercell": "aiida_supercell.parsers:SupercellParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Pezhman Zarabadi-Poor",
      "author_email": "pzarabadip@gmail.com",
      "classifiers": [
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9"
      ],
      "description": "AiiDA Plugin for Supercell program",
      "version": "1.0.1"
    },
    "name": "aiida-supercell",
    "package_name": "aiida_supercell",
    "pip_url": "git+https://github.com/pzarabadip/aiida-supercell"
  },
  "aiida-symmetry-representation": {
    "aiida_version": null,
    "code_home": "https://github.com/greschd/aiida_symmetry_representation",
    "development_status": "stable",
    "documentation_url": "https://aiida-symmetry-representation.readthedocs.io",
    "entry_point_prefix": "symmetry_representation",
    "entry_points": {
      "aiida.calculations": {
        "symmetry_representation.filter_symmetries": "aiida_symmetry_representation.calculations.filter_symmetries:FilterSymmetriesCalculation"
      },
      "aiida.parsers": {
        "symmetry_representation.symmetry": "aiida_symmetry_representation.parsers.symmetries:SymmetriesParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Dominik Gresch",
      "author_email": "greschd@gmx.ch",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: Apache Software License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for symmetry representations.",
      "home_page": "https://aiida-symmetry-representation.readthedocs.io",
      "license": "Apache 2.0",
      "version": "0.2.0"
    },
    "name": "aiida-symmetry-representation",
    "package_name": "aiida_symmetry_representation",
    "pip_url": "aiida-symmetry-representation"
  },
  "aiida-tbextraction": {
    "aiida_version": null,
    "code_home": "https://github.com/greschd/aiida-tbextraction",
    "development_status": "beta",
    "documentation_url": "https://aiida-tbextraction.readthedocs.io/",
    "entry_point_prefix": "tbextraction",
    "entry_points": {
      "aiida.workflows": {
        "tbextraction.calculate_tb": "aiida_tbextraction.calculate_tb:TightBindingCalculation",
        "tbextraction.energy_windows.run_window": "aiida_tbextraction.energy_windows.run_window:RunWindow",
        "tbextraction.energy_windows.window_search": "aiida_tbextraction.energy_windows.window_search:WindowSearch",
        "tbextraction.fp_run.base": "aiida_tbextraction.fp_run:FirstPrinciplesRunBase",
        "tbextraction.fp_run.reference_bands.base": "aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase",
        "tbextraction.fp_run.wannier_input.base": "aiida_tbextraction.fp_run.wannier_input:WannierInputBase",
        "tbextraction.model_evaluation.band_difference": "aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation",
        "tbextraction.model_evaluation.base": "aiida_tbextraction.model_evaluation:ModelEvaluationBase",
        "tbextraction.optimize_fp_tb": "aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding",
        "tbextraction.optimize_strained_fp_tb": "aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Dominik Gresch",
      "author_email": "greschd@gmx.ch",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: Apache Software License",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for extracting tight-binding models",
      "home_page": "https://aiida-tbextraction.readthedocs.io",
      "license": "Apache 2.0",
      "version": "0.2.0b1"
    },
    "name": "aiida-tbextraction",
    "package_name": "aiida_tbextraction",
    "pip_url": "aiida-tbextraction"
  },
  "aiida-tbmodels": {
    "aiida_version": null,
    "code_home": "https://github.com/greschd/aiida-tbmodels",
    "development_status": "alpha",
    "documentation_url": "https://aiida-tbmodels.readthedocs.io",
    "entry_point_prefix": "tbmodels",
    "entry_points": {
      "aiida.calculations": {
        "tbmodels.eigenvals": "aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation",
        "tbmodels.parse": "aiida_tbmodels.calculations.parse:ParseCalculation",
        "tbmodels.slice": "aiida_tbmodels.calculations.slice:SliceCalculation",
        "tbmodels.symmetrize": "aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation"
      },
      "aiida.parsers": {
        "tbmodels.model": "aiida_tbmodels.parsers.model:ModelParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Dominik Gresch",
      "author_email": "greschd@gmx.ch",
      "classifiers": [
        "Development Status :: 3 - Alpha",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: Apache Software License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for running TBmodels",
      "home_page": "https://aiida-tbmodels.readthedocs.io",
      "license": "Apache 2.0",
      "version": "0.3.0"
    },
    "name": "aiida-tbmodels",
    "package_name": "aiida_tbmodels",
    "pip_url": "aiida-tbmodels"
  },
  "aiida-tcod": {
    "aiida_version": ">=1.0.0b1",
    "code_home": "https://github.com/aiidateam/aiida-tcod",
    "development_status": "beta",
    "entry_point_prefix": "tcod",
    "entry_points": {
      "aiida.tools.dbexporters": {
        "tcod": "aiida.tools.dbexporters.tcod"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The AiiDA team",
      "author_email": "developers@aiida.net",
      "classifiers": [
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin to interact with the TCOD",
      "version": "0.1.0a0"
    },
    "name": "aiida-tcod",
    "package_name": "aiida_tcod",
    "pip_url": "git+https://github.com/aiidateam/aiida-tcod"
  },
  "aiida-uppasd": {
    "aiida_version": ">=1.1.0,<2.0.0",
    "code_home": "https://github.com/uppasd/aiida-uppasd",
    "development_status": "planning",
    "documentation_url": "https://github.com/uppasd/aiida-uppasd/blob/master/README.md",
    "entry_point_prefix": "uppasd",
    "entry_points": {
      "aiida.calculations": {
        "UppASD_core_calculations": "UppASD_AiiDA.calculations.core_calcs:UppASD"
      },
      "aiida.parsers": {
        "UppASD_core_parsers": "UppASD_AiiDA.parsers.core_parser:SpinDynamic_core_parser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Qichen Xu, Anders Bergman, Anna Delin, Jonathan Chico",
      "author_email": "qichenx@kth.se",
      "classifiers": [
        "Programming Language :: Python",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Framework :: AiiDA"
      ],
      "description": "Interface for UppASD and AiiDA",
      "version": "0.1.0"
    },
    "name": "aiida-uppasd",
    "package_name": "aiida_uppasd",
    "pip_url": "git+https://github.com/unkcpz/aiida-uppasd"
  },
  "aiida-vasp": {
    "aiida_version": ">=1.6,<2",
    "code_home": "https://github.com/aiida-vasp/aiida-vasp",
    "development_status": "stable",
    "documentation_url": "https://aiida-vasp.readthedocs.io/",
    "entry_point_prefix": "vasp",
    "entry_points": {
      "aiida.calculations": {
        "vasp.immigrant": "aiida_vasp.calcs.immigrant:VaspImmigrant",
        "vasp.neb": "aiida_vasp.calcs.neb:VaspNEBCalculation",
        "vasp.vasp": "aiida_vasp.calcs.vasp:VaspCalculation",
        "vasp.vasp2w90": "aiida_vasp.calcs.vasp2w90:Vasp2w90Calculation"
      },
      "aiida.cmdline.data": {
        "vasp-potcar": "aiida_vasp.commands.potcar:potcar"
      },
      "aiida.data": {
        "vasp.archive": "aiida_vasp.data.archive:ArchiveData",
        "vasp.chargedensity": "aiida_vasp.data.chargedensity:ChargedensityData",
        "vasp.potcar": "aiida_vasp.data.potcar:PotcarData",
        "vasp.potcar_file": "aiida_vasp.data.potcar:PotcarFileData",
        "vasp.wavefun": "aiida_vasp.data.wavefun:WavefunData"
      },
      "aiida.groups": {
        "vasp.potcar": "aiida_vasp.data.potcar:PotcarGroup"
      },
      "aiida.parsers": {
        "vasp.neb": "aiida_vasp.parsers.neb:VtstNebParser",
        "vasp.vasp": "aiida_vasp.parsers.vasp:VaspParser",
        "vasp.vasp2w90": "aiida_vasp.parsers.vasp2w90:Vasp2w90Parser"
      },
      "aiida.workflows": {
        "vasp.bands": "aiida_vasp.workchains.bands:BandsWorkChain",
        "vasp.converge": "aiida_vasp.workchains.converge:ConvergeWorkChain",
        "vasp.immigrant": "aiida_vasp.workchains.immigrant:VaspImmigrantWorkChain",
        "vasp.master": "aiida_vasp.workchains.master:MasterWorkChain",
        "vasp.neb": "aiida_vasp.workchains.neb:VaspNEBWorkChain",
        "vasp.relax": "aiida_vasp.workchains.relax:RelaxWorkChain",
        "vasp.vasp": "aiida_vasp.workchains.vasp:VaspWorkChain",
        "vasp.verify": "aiida_vasp.workchains.verify:VerifyWorkChain"
      },
      "console_scripts": {
        "mock-vasp": "aiida_vasp.commands.mock_vasp:mock_vasp",
        "mock-vasp-strict": "aiida_vasp.commands.mock_vasp:mock_vasp_strict"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Espen Flage-Larsen",
      "author_email": "espen.flage-larsen@sintef.no",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for running VASP calculations.",
      "home_page": "https://github.com/aiida-vasp/aiida-vasp",
      "license": "MIT License, see LICENSE.txt file.",
      "version": "2.2.0"
    },
    "name": "aiida-vasp",
    "package_name": "aiida_vasp",
    "pip_url": "aiida-vasp",
    "plugin_info": "https://raw.githubusercontent.com/aiida-vasp/aiida-vasp/master/setup.json"
  },
  "aiida-wannier90": {
    "aiida_version": ">=1.0.0,<2",
    "code_home": "https://github.com/aiidateam/aiida-wannier90",
    "development_status": "stable",
    "documentation_url": "https://aiida-wannier90.readthedocs.io/",
    "entry_point_prefix": "wannier90",
    "entry_points": {
      "aiida.calculations": {
        "wannier90.wannier90": "aiida_wannier90.calculations:Wannier90Calculation"
      },
      "aiida.data": {},
      "aiida.parsers": {
        "wannier90.wannier90": "aiida_wannier90.parsers:Wannier90Parser"
      },
      "aiida.workflows": {
        "wannier90.minimal": "aiida_wannier90.workflows.minimal:MinimalW90WorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Dominik Gresch, Antimo Marrazzo, Daniel Marchand, Giovanni Pizzi, Junfeng Qiao, Norma Rivano, and the AiiDA team",
      "classifiers": [
        "Development Status :: 5 - Production/Stable",
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "AiiDA Plugin for the Wannier90 code",
      "home_page": "https://github.com/aiidateam/aiida-wannier90",
      "license": "MIT",
      "version": "2.0.1"
    },
    "name": "aiida-wannier90",
    "package_name": "aiida_wannier90",
    "pip_url": "aiida-wannier90",
    "plugin_info": "https://raw.github.com/aiidateam/aiida-wannier90/master/setup.json"
  },
  "aiida-wannier90-workflows": {
    "aiida_version": ">=1.1.1,<2",
    "code_home": "https://github.com/aiidateam/aiida-wannier90-workflows",
    "development_status": "stable",
    "entry_point_prefix": "wannier90_workflows",
    "entry_points": {
      "aiida.workflows": {
        "wannier90_workflows.bands": "aiida_wannier90_workflows.workflows.bands:Wannier90BandsWorkChain",
        "wannier90_workflows.wannier90": "aiida_wannier90_workflows.workflows.wannier:Wannier90WorkChain"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Antimo Marrazzo, Giovanni Pizzi, Junfeng Qiao",
      "author_email": "developers@aiida.net",
      "classifiers": [
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "Advanced AiiDA workflows for Wannier90",
      "home_page": "https://github.com/aiidateam/aiida-wannier90-workflows",
      "license": "MIT License",
      "version": "1.0.2"
    },
    "name": "aiida-wannier90-workflows",
    "package_name": "aiida_wannier90_workflows",
    "pip_url": "aiida-wannier90-workflows",
    "plugin_info": "https://raw.github.com/aiidateam/aiida-wannier90-workflows/master/setup.json"
  },
  "aiida-wien2k": {
    "aiida_version": null,
    "code_home": "https://github.com/rubel75/aiida-wien2k",
    "development_status": "planning",
    "entry_point_prefix": "wien2k",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-wien2k",
    "package_name": "aiida_wien2k"
  },
  "aiida-yambo": {
    "aiida_version": ">=1.0.0a2",
    "code_home": "https://github.com/yambo-code/yambo-aiida/",
    "development_status": "stable",
    "entry_point_prefix": "yambo",
    "entry_points": {
      "aiida.calculations": {
        "yambo.yambo": "aiida_yambo.calculations.yambo:YamboCalculation"
      },
      "aiida.data": {},
      "aiida.parsers": {
        "yambo.yambo": "aiida_yambo.parsers.parsers:YamboParser"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Miki Bonacci, Michael Atambo, Antimo Marrazzo, Prandini Gianluca",
      "author_email": "miki.bonacci@unimore.it",
      "classifiers": [
        "Environment :: Plugins",
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python",
        "Topic :: Scientific/Engineering :: Physics"
      ],
      "description": "YAMBO plugin and workflows for AiiDA",
      "home_page": "https://github.com/yambo-code/yambo-aiida",
      "license": "MIT",
      "version": "1.3.0"
    },
    "name": "aiida-yambo",
    "package_name": "aiida_yambo",
    "pip_url": "aiida-yambo",
    "plugin_info": "https://raw.github.com/yambo-code/yambo-aiida/master/setup.json"
  },
  "aiida-yambo-wannier90": {
    "aiida_version": ">=1.6.4,<3",
    "code_home": "https://github.com/aiidaplugins/aiida-yambo-wannier90",
    "development_status": "beta",
    "documentation_url": "https://aiida-yambo-wannier90.readthedocs.io/en/latest/",
    "entry_point_prefix": "yambo_wannier90",
    "entry_points": {
      "aiida.calculations": {
        "yambo_wannier90.gw2wannier90": "aiida_yambo_wannier90.calculations.gw2wannier90:Gw2wannier90Calculation"
      },
      "aiida.parsers": {
        "yambo_wannier90.gw2wannier90": "aiida_yambo_wannier90.parsers.gw2wannier90:Gw2wannier90Parser"
      },
      "aiida.workflows": {
        "yambo_wannier90": "aiida_yambo_wannier90.workflows:YamboWannier90WorkChain"
      },
      "console_scripts": {
        "aiida-yambo-wannier90": "aiida_yambo_wannier90.cli:cmd_root"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "The AiiDA Team",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python"
      ],
      "description": "Plugin to combine Wannier90 interpolations with GW corrections computed by Yambo",
      "version": "0.1.0b0"
    },
    "name": "aiida-yambo-wannier90",
    "package_name": "aiida_yambo_wannier90",
    "pip_url": "aiida-yambo-wannier90",
    "plugin_info": "https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/pyproject.toml",
    "version_file": "https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/aiida_yambo_wannier90/__init__.py"
  },
  "aiida-yascheduler": {
    "aiida_version": null,
    "code_home": "https://github.com/tilde-lab/yascheduler",
    "development_status": "beta",
    "documentation_url": "https://github.com/tilde-lab/yascheduler",
    "entry_point_prefix": "yascheduler",
    "entry_points": {
      "aiida.schedulers": {
        "yascheduler": "yascheduler.aiida_plugin:YaScheduler"
      },
      "console_scripts": {
        "yainit": "yascheduler.utils:init",
        "yanodes": "yascheduler.utils:show_nodes",
        "yascheduler": "yascheduler.utils:daemonize",
        "yasetnode": "yascheduler.utils:manage_node",
        "yastatus": "yascheduler.utils:check_status",
        "yasubmit": "yascheduler.utils:submit"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Sergey Korolev, Evgeny Blokhin, Andrey Sobolev",
      "author_email": "eb@tilde.pro",
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Framework :: AiiDA",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Scientific/Engineering :: Information Analysis",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Software Development :: Libraries :: Python Modules"
      ],
      "description": "Yet another computing scheduler and cloud orchestration engine",
      "home_page": "https://github.com/tilde-lab/yascheduler",
      "license": "MIT",
      "version": "1.0.10"
    },
    "name": "aiida-yascheduler",
    "package_name": "aiida_yascheduler",
    "pip_url": "yascheduler"
  },
  "aiida-z2pack": {
    "aiida_version": null,
    "code_home": "https://github.com/AntimoMarrazzo/aiida-z2pack",
    "development_status": "planning",
    "entry_point_prefix": "z2pack",
    "entry_points": {},
    "hosted_on": "github.com",
    "metadata": {},
    "name": "aiida-z2pack",
    "package_name": "aiida_z2pack",
    "pip_url": "git+https://github.com/AntimoMarrazzo/aiida-z2pack"
  },
  "aiida-zeopp": {
    "aiida_version": null,
    "code_home": "https://github.com/ltalirz/aiida-zeopp",
    "development_status": "stable",
    "entry_point_prefix": "zeopp",
    "entry_points": {
      "aiida.calculations": {
        "zeopp.network": "aiida_zeopp.calculations.network:NetworkCalculation"
      },
      "aiida.data": {
        "zeopp.parameters": "aiida_zeopp.data.parameters:NetworkParameters"
      },
      "aiida.parsers": {
        "zeopp.network": "aiida_zeopp.parsers.network:NetworkParser"
      },
      "aiida.workflows": {},
      "console_scripts": {
        "zeopp-submit": "aiida_zeopp.console_scripts.data_cli:cli"
      }
    },
    "hosted_on": "github.com",
    "metadata": {
      "author": "Leopold Talirz",
      "author_email": "leopold.talirz@epfl.ch",
      "classifiers": [
        "Framework :: AiiDA",
        "Programming Language :: Python"
      ],
      "description": "AiiDA plugin for zeo++",
      "home_page": "https://github.com/ltalirz/aiida-zeopp",
      "license": "Creative Commons",
      "version": "1.1.2"
    },
    "name": "aiida-zeopp",
    "package_name": "aiida_zeopp",
    "pip_url": "aiida-zeopp"
  }
}